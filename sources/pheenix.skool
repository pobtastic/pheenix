@rom
@start
@expand=#DEF(#POKE #LINK:Pokes)
@expand=#DEF(#ANIMATE(delay,count=$50)(name=$a)*$name-1,$delay;#FOR$02,$count||x|$name-x|;||($name-animation))
@set-handle-unsupported-macros=1

; Loading Screen
;
; #UDGTABLE
; { =h Pheenix Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=Loading
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4880 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4900 DEFB $00,$00,$00,$00,$00,$00,$00,$7C,$42,$7E,$7E,$42,$3E,$42,$00,$10,$00,$00,$10,$00,$00,$04,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$10,$00,$00,$00,$00,$00,$42,$00,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4980 DEFB $7C,$00,$10,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $7C,$00,$10,$00,$00,$00,$00,$00,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$00,$00,$00,$00,$00,$42,$42,$40,$40,$62,$08,$24,$00,$00,$38,$00,$10,$38,$38,$04,$00,$78,$3C,$00,$00,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$10,$38,$38,$38,$38,$00,$42,$38,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A80 DEFB $42,$44,$38,$38,$38,$00,$00,$78,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AC0 DEFB $42,$44,$38,$38,$38,$00,$00,$78,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B00 DEFB $00,$00,$00,$00,$00,$00,$00,$42,$7E,$7C,$7C,$52,$08,$18,$00,$30,$40,$00,$10,$44,$04,$3C,$30,$44,$44,$00,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$10,$44,$04,$40,$44,$00,$42,$04,$30,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B80 DEFB $7C,$44,$10,$44,$40,$10,$00,$44,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BC0 DEFB $7C,$44,$10,$44,$40,$10,$00,$44,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C00 DEFB $00,$00,$00,$00,$00,$00,$00,$7C,$42,$40,$40,$4A,$08,$18,$00,$10,$38,$00,$10,$44,$3C,$44,$10,$44,$44,$00,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7C,$10,$78,$3C,$38,$78,$00,$42,$3C,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C80 DEFB $42,$44,$10,$78,$38,$00,$00,$44,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CC0 DEFB $42,$44,$10,$78,$38,$00,$00,$44,$02,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D00 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$42,$40,$40,$46,$08,$24,$00,$10,$04,$00,$10,$44,$44,$44,$10,$44,$3C,$00,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$10,$40,$44,$04,$40,$00,$5A,$44,$10,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D80 DEFB $42,$3C,$10,$40,$04,$00,$00,$78,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DC0 DEFB $42,$3C,$10,$40,$04,$00,$00,$78,$42,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E00 DEFB $00,$00,$00,$00,$00,$00,$00,$40,$42,$7E,$7E,$42,$3E,$42,$00,$38,$78,$00,$0C,$38,$3C,$3C,$38,$44,$04,$00,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$0C,$3C,$3C,$78,$3C,$00,$24,$3C,$38,$0C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E80 DEFB $7C,$04,$0C,$3C,$78,$10,$00,$40,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EC0 DEFB $7C,$04,$0C,$3C,$78,$10,$00,$40,$3C,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$38,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FC0 DEFB $00,$38,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $5800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Attributes.
 $5820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5860 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5880 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $58A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $58C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $58E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5900 DEFB $00,$00,$00,$00,$00,$00,$00,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$00,$00,$00,$00,$00,$00,$00 ;
 $5920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$96,$96,$96,$96,$96,$96,$96,$96,$96,$96,$96,$96,$96,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5960 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5980 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $59A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $59C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $59E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $5AC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ;
 $5AE0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07 ; }

; Data block at 5B00
b$5B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Routine at 5C00
c$5C00 RST $38       ;
 $5C01 NOP           ;
 $5C02 NOP           ;
 $5C03 NOP           ;
 $5C04 RST $38       ;
 $5C05 NOP           ;
 $5C06 INC HL        ;
 $5C07 DEC C         ;
 $5C08 DEC C         ;
 $5C09 INC HL        ;
 $5C0A DEC B         ;
 $5C0B NOP           ;
 $5C0C NOP           ;
 $5C0D NOP           ;
 $5C0E DJNZ $5C1A    ;
 $5C10 LD BC,$0600   ;
 $5C13 NOP           ;
 $5C14 DEC BC        ;
 $5C15 NOP           ;
 $5C16 LD BC,$0100   ;
 $5C19 NOP           ;
*$5C1A LD B,$00      ;
 $5C1C DJNZ $5C1E    ;
*$5C1E NOP           ;
 $5C1F NOP           ;
 $5C20 NOP           ;
 $5C21 NOP           ;
 $5C22 NOP           ;
 $5C23 NOP           ;
 $5C24 NOP           ;
 $5C25 NOP           ;
 $5C26 NOP           ;
 $5C27 NOP           ;
 $5C28 NOP           ;
 $5C29 NOP           ;
 $5C2A NOP           ;
 $5C2B NOP           ;
 $5C2C NOP           ;
 $5C2D NOP           ;
 $5C2E NOP           ;
 $5C2F NOP           ;
 $5C30 NOP           ;
 $5C31 NOP           ;
 $5C32 NOP           ;
 $5C33 NOP           ;
 $5C34 NOP           ;
 $5C35 NOP           ;
 $5C36 NOP           ;
 $5C37 INC A         ;
 $5C38 LD B,B        ;
 $5C39 NOP           ;
 $5C3A RST $38       ;
 $5C3B CALL $B100    ;
 $5C3E LD E,A        ;
 $5C3F NOP           ;
 $5C40 NOP           ;
 $5C41 NOP           ;
 $5C42 NOP           ;
 $5C43 NOP           ;
 $5C44 RST $38       ;
 $5C45 LD B,$00      ;
 $5C47 LD (BC),A     ;
 $5C48 RLCA          ;
 $5C49 NOP           ;
 $5C4A NOP           ;
 $5C4B AND B         ;
 $5C4C LD E,L        ;
 $5C4D NOP           ;
 $5C4E NOP           ;
 $5C4F OR (HL)       ;
 $5C50 LD E,H        ;
 $5C51 CP E          ;
 $5C52 LD E,H        ;
 $5C53 BIT 3,H       ;
 $5C55 AND B         ;
 $5C56 LD E,L        ;
 $5C57 JP Z,$A15C    ;
 $5C5A LD E,L        ;
 $5C5B RET NC        ;
 $5C5C LD E,L        ;
 $5C5D SBC A,A       ;
 $5C5E LD E,L        ;
 $5C5F JP Z,$D200    ;
 $5C62 LD E,L        ;
 $5C63 JP NC,$D25D   ;
 $5C66 LD E,L        ;
 $5C67 DEC L         ;
 $5C68 SUB D         ;
 $5C69 LD E,H        ;
 $5C6A NOP           ;
 $5C6B NOP           ;
 $5C6C NOP           ;
 $5C6D NOP           ;
 $5C6E NOP           ;
 $5C6F NOP           ;
 $5C70 NOP           ;
 $5C71 NOP           ;
 $5C72 NOP           ;
 $5C73 NOP           ;
 $5C74 OR (HL)       ;
 $5C75 LD A,(DE)     ;
 $5C76 NOP           ;
 $5C77 NOP           ;
 $5C78 LD B,D        ;
 $5C79 LD DE,$5800   ;
 $5C7C RST $38       ;
 $5C7D NOP           ;
 $5C7E NOP           ;
 $5C7F LD HL,$5B00   ;
 $5C82 LD HL,$E017   ;
 $5C85 LD C,B        ;
 $5C86 RET PO        ;
 $5C87 LD D,B        ;
 $5C88 LD HL,$2109   ;
 $5C8B RLA           ;
 $5C8C INC BC        ;
 $5C8D NOP           ;
 $5C8E NOP           ;
 $5C8F NOP           ;
 $5C90 NOP           ;
 $5C91 NOP           ;
 $5C92 NOP           ;
 $5C93 NOP           ;
 $5C94 NOP           ;
 $5C95 NOP           ;
 $5C96 NOP           ;
 $5C97 NOP           ;
 $5C98 NOP           ;
 $5C99 NOP           ;
 $5C9A NOP           ;
 $5C9B NOP           ;
 $5C9C NOP           ;
 $5C9D NOP           ;
 $5C9E NOP           ;
 $5C9F NOP           ;
 $5CA0 NOP           ;
 $5CA1 NOP           ;
 $5CA2 NOP           ;
 $5CA3 NOP           ;
 $5CA4 NOP           ;
 $5CA5 NOP           ;
 $5CA6 NOP           ;
 $5CA7 NOP           ;
 $5CA8 NOP           ;
 $5CA9 NOP           ;
 $5CAA NOP           ;
 $5CAB NOP           ;
 $5CAC NOP           ;
 $5CAD NOP           ;
 $5CAE NOP           ;
 $5CAF NOP           ;
 $5CB0 NOP           ;
 $5CB1 NOP           ;
 $5CB2 OR H          ;
 $5CB3 LD E,A        ;
 $5CB4 RST $38       ;
 $5CB5 RST $38       ;
 $5CB6 CALL P,$A809  ;
 $5CB9 DJNZ $5D06    ;
 $5CBB CALL P,$C409  ;
 $5CBE DEC D         ;
 $5CBF LD D,E        ;
 $5CC0 ADD A,C       ;
 $5CC1 RRCA          ;
 $5CC2 CALL NZ,$5215 ;
 $5CC5 CALL P,$C409  ;
 $5CC8 DEC D         ;
 $5CC9 LD D,B        ;
 $5CCA ADD A,B       ;
 $5CCB NOP           ;
 $5CCC LD BC,$000D   ;
 $5CCF DEFB $FD      ;
 $5CD0 LD ($3534),A  ;
 $5CD3 JR NC,$5D05   ;
 $5CD5 LD C,$00      ;
 $5CD7 NOP           ;
 $5CD8 OR H          ;
 $5CD9 LD E,A        ;
 $5CDA NOP           ;
 $5CDB DEC C         ;
 $5CDC NOP           ;
 $5CDD LD (BC),A     ;
 $5CDE DEC E         ;
 $5CDF NOP           ;
 $5CE0 EXX           ;
 $5CE1 JR NC,$5CF1   ;
 $5CE3 NOP           ;
 $5CE4 NOP           ;
 $5CE5 NOP           ;
 $5CE6 NOP           ;
 $5CE7 NOP           ;
 $5CE8 LD A,($30DA)  ;
 $5CEB LD C,$00      ;
 $5CED NOP           ;
 $5CEE NOP           ;
 $5CEF NOP           ;
 $5CF0 NOP           ;
*$5CF1 LD A,($30E7)  ;
 $5CF4 LD C,$00      ;
 $5CF6 NOP           ;
 $5CF7 NOP           ;
 $5CF8 NOP           ;
 $5CF9 NOP           ;
 $5CFA LD A,($0DFB)  ;
 $5CFD NOP           ;
 $5CFE INC BC        ;
 $5CFF LD E,E        ;
 $5D00 NOP           ;
 $5D01 PUSH AF       ;
 $5D02 XOR H         ;
 $5D03 JR C,$5D13    ;
*$5D05 NOP           ;
*$5D06 NOP           ;
 $5D07 EX AF,AF'     ;
 $5D08 NOP           ;
 $5D09 NOP           ;
 $5D0A INC L         ;
 $5D0B SCF           ;
 $5D0C LD C,$00      ;
 $5D0E NOP           ;
 $5D0F RLCA          ;
 $5D10 NOP           ;
 $5D11 NOP           ;
 $5D12 DEC SP        ;
*$5D13 LD ($0510),HL ;
 $5D16 INC DE        ;
 $5D17 LD BC,$4850   ;
 $5D1A LD B,L        ;
 $5D1B LD B,L        ;
 $5D1C LD C,(HL)     ;
 $5D1D LD C,C        ;
 $5D1E LD E,B        ;
 $5D1F JR NZ,$5D8A   ;
 $5D21 LD (HL),E     ;
 $5D22 JR NZ,$5D90   ;
 $5D24 LD L,A        ;
 $5D25 LD H,C        ;
 $5D26 LD H,H        ;
 $5D27 LD L,C        ;
 $5D28 LD L,(HL)     ;
 $5D29 LD H,A        ;
 $5D2A LD ($AC3B),HL ;
 $5D2D LD SP,$0E30   ;
 $5D30 NOP           ;
 $5D31 NOP           ;
 $5D32 LD A,(BC)     ;
 $5D33 NOP           ;
 $5D34 NOP           ;
 $5D35 INC L         ;
 $5D36 ADD HL,SP     ;
 $5D37 LD C,$00      ;
 $5D39 NOP           ;
 $5D3A ADD HL,BC     ;
 $5D3B NOP           ;
 $5D3C NOP           ;
 $5D3D DEC SP        ;
 $5D3E LD ($0013),HL ;
 $5D41 DJNZ $5D49    ;
 $5D43 LD DE,$1202   ;
 $5D46 LD BC,$5020   ;
*$5D49 LD L,H        ;
 $5D4A LD H,L        ;
 $5D4B LD H,C        ;
 $5D4C LD (HL),E     ;
 $5D4D LD H,L        ;
 $5D4E JR NZ,$5DA7   ;
 $5D50 LD H,C        ;
 $5D51 LD L,C        ;
 $5D52 LD (HL),H     ;
 $5D53 JR NZ,$5D67   ;
 $5D55 NOP           ;
 $5D56 LD DE,$1007   ;
 $5D59 NOP           ;
 $5D5A LD ($000D),HL ;
 $5D5D INC B         ;
 $5D5E DEC D         ;
 $5D5F NOP           ;
 $5D60 CALL P,$3332  ;
 $5D63 LD (HL),$35   ;
 $5D65 ADD HL,SP     ;
 $5D66 LD C,$00      ;
 $5D68 NOP           ;
 $5D69 LD L,E        ;
 $5D6A LD E,H        ;
 $5D6B NOP           ;
 $5D6C INC L         ;
 $5D6D JR NC,$5D7D   ;
 $5D6F NOP           ;
 $5D70 NOP           ;
 $5D71 NOP           ;
 $5D72 NOP           ;
 $5D73 NOP           ;
 $5D74 DEC C         ;
 $5D75 NOP           ;
 $5D76 DEC B         ;
 $5D77 DJNZ $5D79    ;
*$5D79 RST $28       ;
 $5D7A LD ($AF22),HL ;
*$5D7D LD ($3534),A  ;
 $5D80 SCF           ;
 $5D81 LD (HL),$0E   ;
 $5D83 NOP           ;
 $5D84 NOP           ;
 $5D85 CALL NC,$005F ;
 $5D88 DEC C         ;
 $5D89 NOP           ;
*$5D8A LD B,$13      ;
 $5D8C NOP           ;
 $5D8D RST $28       ;
 $5D8E LD ($AF22),HL ;
 $5D91 LD A,($C0F9)  ;
 $5D94 INC SP        ;
 $5D95 JR NC,$5DC8   ;
 $5D97 LD ($0E31),A  ;
 $5D9A NOP           ;
 $5D9B NOP           ;
 $5D9C SBC A,C       ;
 $5D9D LD (HL),L     ;
 $5D9E NOP           ;
 $5D9F DEC C         ;
 $5DA0 ADD A,B       ;
 $5DA1 DEFB $FD      ;
 $5DA2 LD ($3534),A  ;
 $5DA5 JR NC,$5DD7   ;
*$5DA7 LD C,$00      ;
 $5DA9 NOP           ;
 $5DAA OR H          ;
 $5DAB LD E,A        ;
 $5DAC NOP           ;
 $5DAD LD A,($22F8)  ;
 $5DB0 LD D,B        ;
 $5DB1 LD C,B        ;
 $5DB2 LD B,L        ;
 $5DB3 LD B,L        ;
 $5DB4 LD C,(HL)     ;
 $5DB5 LD C,C        ;
 $5DB6 LD E,B        ;
 $5DB7 LD ($32AF),HL ;
 $5DBA INC SP        ;
 $5DBB DEC (HL)      ;
 $5DBC DEC (HL)      ;
 $5DBD LD ($000E),A  ;
 $5DC0 NOP           ;
 $5DC1 NOP           ;
 $5DC2 LD E,H        ;
 $5DC3 NOP           ;
 $5DC4 INC L         ;
 $5DC5 DEC (HL)      ;
 $5DC6 DEC (HL)      ;
 $5DC7 JR NC,$5DD7   ;
 $5DC9 NOP           ;
 $5DCA NOP           ;
 $5DCB LD H,$02      ;
 $5DCD NOP           ;
 $5DCE LD A,($0DF7)  ;
 $5DD1 ADD A,B       ;
 $5DD2 NOP           ;
 $5DD3 NOP           ;
 $5DD4 SBC A,C       ;
 $5DD5 LD (HL),L     ;
 $5DD6 NOP           ;
*$5DD7 JR NZ,$5DF9   ;
 $5DD9 JR NZ,$5DFB   ;
 $5DDB JR NZ,$5DFD   ;
 $5DDD NOP           ;
 $5DDE NOP           ;
 $5DDF NOP           ;
 $5DE0 NOP           ;
 $5DE1 NOP           ;
 $5DE2 ADD A,B       ;
 $5DE3 INC BC        ;
 $5DE4 LD (HL),B     ;
 $5DE5 INC SP        ;
 $5DE6 JR NZ,$5E08   ;
 $5DE8 JR NZ,$5E0A   ;
 $5DEA JR NZ,$5E0C   ;
 $5DEC JR NZ,$5E0E   ;
 $5DEE LD (BC),A     ;
 $5DEF NOP           ;
 $5DF0 LD A,B        ;
 $5DF1 LD E,H        ;
 $5DF2 LD (HL),B     ;
 $5DF3 ADD A,B       ;
 $5DF4 NOP           ;
 $5DF5 NOP           ;
 $5DF6 NOP           ;
 $5DF7 NOP           ;
 $5DF8 NOP           ;
*$5DF9 NOP           ;
 $5DFA NOP           ;
*$5DFB NOP           ;
 $5DFC NOP           ;
*$5DFD NOP           ;
 $5DFE NOP           ;
 $5DFF NOP           ;
 $5E00 NOP           ;
 $5E01 NOP           ;
 $5E02 NOP           ;
 $5E03 NOP           ;
 $5E04 NOP           ;
 $5E05 NOP           ;
 $5E06 NOP           ;
 $5E07 NOP           ;
*$5E08 NOP           ;
 $5E09 NOP           ;
*$5E0A NOP           ;
 $5E0B NOP           ;
*$5E0C NOP           ;
 $5E0D NOP           ;
*$5E0E NOP           ;
 $5E0F NOP           ;
 $5E10 NOP           ;
 $5E11 NOP           ;
 $5E12 NOP           ;
 $5E13 NOP           ;
 $5E14 NOP           ;
 $5E15 NOP           ;
 $5E16 NOP           ;
 $5E17 NOP           ;
 $5E18 NOP           ;
 $5E19 NOP           ;
 $5E1A NOP           ;
 $5E1B NOP           ;
 $5E1C NOP           ;
 $5E1D NOP           ;
 $5E1E NOP           ;
 $5E1F NOP           ;
 $5E20 NOP           ;
 $5E21 NOP           ;
 $5E22 NOP           ;
 $5E23 NOP           ;
 $5E24 NOP           ;
 $5E25 NOP           ;
 $5E26 NOP           ;
 $5E27 NOP           ;
 $5E28 NOP           ;
 $5E29 NOP           ;
 $5E2A NOP           ;
 $5E2B NOP           ;
 $5E2C NOP           ;
 $5E2D NOP           ;
 $5E2E NOP           ;
 $5E2F NOP           ;
 $5E30 NOP           ;
 $5E31 NOP           ;
 $5E32 NOP           ;
 $5E33 NOP           ;
 $5E34 NOP           ;
 $5E35 NOP           ;
 $5E36 NOP           ;
 $5E37 NOP           ;
 $5E38 NOP           ;
 $5E39 NOP           ;
 $5E3A NOP           ;
 $5E3B NOP           ;
 $5E3C NOP           ;
 $5E3D NOP           ;
 $5E3E NOP           ;
 $5E3F NOP           ;
 $5E40 NOP           ;
 $5E41 NOP           ;
 $5E42 NOP           ;
 $5E43 NOP           ;
 $5E44 NOP           ;
 $5E45 NOP           ;
 $5E46 NOP           ;
 $5E47 NOP           ;
 $5E48 NOP           ;
 $5E49 NOP           ;
 $5E4A NOP           ;
 $5E4B NOP           ;
 $5E4C NOP           ;
 $5E4D NOP           ;
 $5E4E NOP           ;
 $5E4F NOP           ;
 $5E50 NOP           ;
 $5E51 NOP           ;
 $5E52 NOP           ;
 $5E53 NOP           ;
 $5E54 NOP           ;
 $5E55 NOP           ;
 $5E56 NOP           ;
 $5E57 NOP           ;
 $5E58 NOP           ;
 $5E59 NOP           ;
 $5E5A NOP           ;
 $5E5B NOP           ;
 $5E5C NOP           ;
 $5E5D NOP           ;
 $5E5E NOP           ;
 $5E5F NOP           ;
 $5E60 NOP           ;
 $5E61 NOP           ;
 $5E62 NOP           ;
 $5E63 NOP           ;
 $5E64 NOP           ;
 $5E65 NOP           ;
 $5E66 NOP           ;
 $5E67 NOP           ;
 $5E68 NOP           ;
 $5E69 NOP           ;
 $5E6A NOP           ;
 $5E6B NOP           ;
 $5E6C NOP           ;
 $5E6D NOP           ;
 $5E6E NOP           ;
 $5E6F NOP           ;
 $5E70 NOP           ;
 $5E71 NOP           ;
 $5E72 NOP           ;
 $5E73 NOP           ;
 $5E74 NOP           ;
 $5E75 NOP           ;
 $5E76 NOP           ;
 $5E77 NOP           ;
 $5E78 NOP           ;
 $5E79 NOP           ;
 $5E7A NOP           ;
 $5E7B NOP           ;
 $5E7C NOP           ;
 $5E7D NOP           ;
 $5E7E NOP           ;
 $5E7F NOP           ;
 $5E80 NOP           ;
 $5E81 NOP           ;
 $5E82 NOP           ;
 $5E83 NOP           ;
 $5E84 NOP           ;
 $5E85 NOP           ;
 $5E86 NOP           ;
 $5E87 NOP           ;
 $5E88 NOP           ;
 $5E89 NOP           ;
 $5E8A NOP           ;
 $5E8B NOP           ;
 $5E8C NOP           ;
 $5E8D NOP           ;
 $5E8E NOP           ;
 $5E8F NOP           ;
 $5E90 NOP           ;
 $5E91 NOP           ;
 $5E92 NOP           ;
 $5E93 NOP           ;
 $5E94 NOP           ;
 $5E95 NOP           ;
 $5E96 NOP           ;
 $5E97 NOP           ;
 $5E98 NOP           ;
 $5E99 NOP           ;
 $5E9A NOP           ;
 $5E9B NOP           ;
 $5E9C NOP           ;
 $5E9D NOP           ;
 $5E9E NOP           ;
 $5E9F NOP           ;
 $5EA0 NOP           ;
 $5EA1 NOP           ;
 $5EA2 NOP           ;
 $5EA3 NOP           ;
 $5EA4 NOP           ;
 $5EA5 NOP           ;
 $5EA6 NOP           ;
 $5EA7 NOP           ;
 $5EA8 NOP           ;
 $5EA9 NOP           ;
 $5EAA NOP           ;
 $5EAB NOP           ;
 $5EAC NOP           ;
 $5EAD NOP           ;
 $5EAE NOP           ;
 $5EAF NOP           ;
 $5EB0 NOP           ;
 $5EB1 NOP           ;
 $5EB2 NOP           ;
 $5EB3 NOP           ;
 $5EB4 NOP           ;
 $5EB5 NOP           ;
 $5EB6 NOP           ;
 $5EB7 NOP           ;
 $5EB8 NOP           ;
 $5EB9 NOP           ;
 $5EBA NOP           ;
 $5EBB NOP           ;
 $5EBC NOP           ;
 $5EBD NOP           ;
 $5EBE NOP           ;
 $5EBF NOP           ;
 $5EC0 NOP           ;
 $5EC1 NOP           ;
 $5EC2 NOP           ;
 $5EC3 NOP           ;
 $5EC4 NOP           ;
 $5EC5 NOP           ;
 $5EC6 NOP           ;
 $5EC7 NOP           ;
 $5EC8 NOP           ;
 $5EC9 NOP           ;
 $5ECA NOP           ;
 $5ECB NOP           ;
 $5ECC NOP           ;
 $5ECD NOP           ;
 $5ECE NOP           ;
 $5ECF NOP           ;
 $5ED0 NOP           ;
 $5ED1 NOP           ;
 $5ED2 NOP           ;
 $5ED3 NOP           ;
 $5ED4 NOP           ;
 $5ED5 NOP           ;
 $5ED6 NOP           ;
 $5ED7 NOP           ;
 $5ED8 NOP           ;
 $5ED9 NOP           ;
 $5EDA NOP           ;
 $5EDB NOP           ;
 $5EDC NOP           ;
 $5EDD NOP           ;
 $5EDE NOP           ;
 $5EDF NOP           ;
 $5EE0 NOP           ;
 $5EE1 NOP           ;
 $5EE2 NOP           ;
 $5EE3 NOP           ;
 $5EE4 NOP           ;
 $5EE5 NOP           ;
 $5EE6 NOP           ;
 $5EE7 NOP           ;
 $5EE8 NOP           ;
 $5EE9 NOP           ;
 $5EEA NOP           ;
 $5EEB NOP           ;
 $5EEC NOP           ;
 $5EED NOP           ;
 $5EEE NOP           ;
 $5EEF NOP           ;
 $5EF0 NOP           ;
 $5EF1 NOP           ;
 $5EF2 NOP           ;
 $5EF3 NOP           ;
 $5EF4 NOP           ;
 $5EF5 NOP           ;
 $5EF6 NOP           ;
 $5EF7 NOP           ;
 $5EF8 NOP           ;
 $5EF9 NOP           ;
 $5EFA NOP           ;
 $5EFB NOP           ;
 $5EFC NOP           ;
 $5EFD NOP           ;
 $5EFE NOP           ;
 $5EFF NOP           ;
 $5F00 NOP           ;
 $5F01 NOP           ;
 $5F02 NOP           ;
 $5F03 NOP           ;
 $5F04 NOP           ;
 $5F05 NOP           ;
 $5F06 NOP           ;
 $5F07 NOP           ;
 $5F08 NOP           ;
 $5F09 NOP           ;
 $5F0A NOP           ;
 $5F0B NOP           ;
 $5F0C NOP           ;
 $5F0D NOP           ;
 $5F0E NOP           ;
 $5F0F NOP           ;
 $5F10 NOP           ;
 $5F11 NOP           ;
 $5F12 NOP           ;
 $5F13 NOP           ;
 $5F14 NOP           ;
 $5F15 NOP           ;
 $5F16 NOP           ;
 $5F17 NOP           ;
 $5F18 NOP           ;
 $5F19 NOP           ;
 $5F1A NOP           ;
 $5F1B NOP           ;
 $5F1C NOP           ;
 $5F1D NOP           ;
 $5F1E NOP           ;
 $5F1F NOP           ;
 $5F20 NOP           ;
 $5F21 NOP           ;
 $5F22 NOP           ;
 $5F23 NOP           ;
 $5F24 NOP           ;
 $5F25 NOP           ;
 $5F26 NOP           ;
 $5F27 NOP           ;
 $5F28 NOP           ;
 $5F29 NOP           ;
 $5F2A NOP           ;
 $5F2B NOP           ;
 $5F2C NOP           ;
 $5F2D NOP           ;
 $5F2E NOP           ;
 $5F2F NOP           ;
 $5F30 NOP           ;
 $5F31 NOP           ;
 $5F32 NOP           ;
 $5F33 NOP           ;
 $5F34 NOP           ;
 $5F35 NOP           ;
 $5F36 NOP           ;
 $5F37 NOP           ;
 $5F38 NOP           ;
 $5F39 NOP           ;
 $5F3A NOP           ;
 $5F3B NOP           ;
 $5F3C NOP           ;
 $5F3D NOP           ;
 $5F3E NOP           ;
 $5F3F NOP           ;
 $5F40 NOP           ;
 $5F41 NOP           ;
 $5F42 NOP           ;
 $5F43 NOP           ;
 $5F44 NOP           ;
 $5F45 NOP           ;
 $5F46 NOP           ;
 $5F47 NOP           ;
 $5F48 NOP           ;
 $5F49 NOP           ;
 $5F4A NOP           ;
 $5F4B NOP           ;
 $5F4C NOP           ;
 $5F4D NOP           ;
 $5F4E NOP           ;
 $5F4F NOP           ;
 $5F50 NOP           ;
 $5F51 NOP           ;
 $5F52 NOP           ;
 $5F53 NOP           ;
 $5F54 NOP           ;
 $5F55 NOP           ;
 $5F56 NOP           ;
 $5F57 NOP           ;
 $5F58 NOP           ;
 $5F59 NOP           ;
 $5F5A NOP           ;
 $5F5B NOP           ;
 $5F5C NOP           ;
 $5F5D NOP           ;
 $5F5E NOP           ;
 $5F5F NOP           ;
 $5F60 NOP           ;
 $5F61 NOP           ;
 $5F62 NOP           ;
 $5F63 NOP           ;
 $5F64 NOP           ;
 $5F65 NOP           ;
 $5F66 NOP           ;
 $5F67 NOP           ;
 $5F68 NOP           ;
 $5F69 NOP           ;
 $5F6A NOP           ;
 $5F6B NOP           ;
 $5F6C NOP           ;
 $5F6D NOP           ;
 $5F6E NOP           ;
 $5F6F NOP           ;
 $5F70 NOP           ;
 $5F71 NOP           ;
 $5F72 NOP           ;
 $5F73 NOP           ;
 $5F74 NOP           ;
 $5F75 NOP           ;
 $5F76 NOP           ;
 $5F77 NOP           ;
 $5F78 NOP           ;
 $5F79 NOP           ;
 $5F7A NOP           ;
 $5F7B NOP           ;
 $5F7C NOP           ;
 $5F7D NOP           ;
 $5F7E NOP           ;
 $5F7F NOP           ;
 $5F80 NOP           ;
 $5F81 NOP           ;
 $5F82 NOP           ;
 $5F83 NOP           ;
 $5F84 NOP           ;
 $5F85 NOP           ;
 $5F86 NOP           ;
 $5F87 NOP           ;
 $5F88 NOP           ;
 $5F89 NOP           ;
 $5F8A NOP           ;
 $5F8B NOP           ;
 $5F8C NOP           ;
 $5F8D NOP           ;
 $5F8E NOP           ;
 $5F8F IN A,($02)    ;
 $5F91 LD C,L        ;
 $5F92 NOP           ;
 $5F93 DI            ;
 $5F94 DEC C         ;
 $5F95 OR A          ;
 $5F96 DEC L         ;
 $5F97 JP NC,$CD5D   ;
 $5F9A LD E,L        ;
 $5F9B SBC A,C       ;
 $5F9C LD (HL),L     ;
 $5F9D DEC HL        ;
 $5F9E DEC L         ;
 $5F9F LD H,L        ;
 $5FA0 INC SP        ;
 $5FA1 NOP           ;
 $5FA2 NOP           ;
 $5FA3 DEFB $ED,$10  ;
 $5FA5 DEC C         ;
 $5FA6 NOP           ;
 $5FA7 ADD HL,BC     ;
 $5FA8 NOP           ;
 $5FA9 ADD A,L       ;
 $5FAA INC E         ;
 $5FAB DJNZ $5FC9    ;
 $5FAD LD D,D        ;
 $5FAE DEC DE        ;
 $5FAF HALT          ;
 $5FB0 DEC DE        ;
 $5FB1 INC BC        ;
 $5FB2 INC DE        ;
 $5FB3 NOP           ;
 $5FB4 LD A,$00      ;
 $5FB6 NOP           ;
 $5FB7 NOP           ;
 $5FB8 NOP           ;
 $5FB9 NOP           ;
 $5FBA NOP           ;
 $5FBB NOP           ;
 $5FBC NOP           ;
 $5FBD NOP           ;
 $5FBE NOP           ;
 $5FBF NOP           ;
 $5FC0 NOP           ;
 $5FC1 NOP           ;
 $5FC2 NOP           ;
 $5FC3 NOP           ;
 $5FC4 NOP           ;
 $5FC5 NOP           ;
 $5FC6 NOP           ;
 $5FC7 NOP           ;
 $5FC8 NOP           ;
*$5FC9 NOP           ;
 $5FCA NOP           ;
 $5FCB NOP           ;
 $5FCC NOP           ;
 $5FCD NOP           ;
 $5FCE NOP           ;
 $5FCF NOP           ;
 $5FD0 NOP           ;
 $5FD1 NOP           ;
 $5FD2 NOP           ;
 $5FD3 NOP           ;

; Graphics: Mothership Alien
;
; .
;
; .
;
; Frame #N$01:
; .
; #UDGTABLE { #UDGS$02,$02(mothership-alien-01)(
;   #UDG(#PC+$08*($02*$y+$x),#MAP($y)($44,1:$42))(*udg)
;   udg
; ) } TABLE#
@label=Graphics_MothershipAlien_01
b$5FD4 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$44) } TABLE#
 $5FD5 DEFB %00000111 ;
 $5FD6 DEFB %00001111 ;
 $5FD7 DEFB %00011001 ;
 $5FD8 DEFB %00011011 ;
 $5FD9 DEFB %00011111 ;
 $5FDA DEFB %00001101 ;
 $5FDB DEFB %00000111 ; }
 $5FDC DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$44) } TABLE#
 $5FDD DEFB %11110000 ;
 $5FDE DEFB %11111000 ;
 $5FDF DEFB %11001100 ;
 $5FE0 DEFB %11011100 ;
 $5FE1 DEFB %11111100 ;
 $5FE2 DEFB %01011000 ;
 $5FE3 DEFB %11110000 ; }
 $5FE4 DEFB %00010001 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $5FE5 DEFB %00011011 ;
 $5FE6 DEFB %00011011 ;
 $5FE7 DEFB %00011011 ;
 $5FE8 DEFB %00011011 ;
 $5FE9 DEFB %00001110 ;
 $5FEA DEFB %00000100 ;
 $5FEB DEFB %00000000 ; }
 $5FEC DEFB %11000100 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $5FED DEFB %11101100 ;
 $5FEE DEFB %01101100 ;
 $5FEF DEFB %01101100 ;
 $5FF0 DEFB %01101100 ;
 $5FF1 DEFB %00111000 ;
 $5FF2 DEFB %00010000 ;
 $5FF3 DEFB %00000000 ; }
; Frame #N$02:
; .
; #UDGTABLE { #UDGS$02,$02(mothership-alien-02)(
;   #UDG(#PC+$08*($02*$y+$x),#MAP($y)($44,1:$42))(*udg)
;   udg
; ) } TABLE#
@label=Graphics_MothershipAlien_02
 $5FF4 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$44) } TABLE#
 $5FF5 DEFB %00000111 ;
 $5FF6 DEFB %00001111 ;
 $5FF7 DEFB %00011001 ;
 $5FF8 DEFB %00011101 ;
 $5FF9 DEFB %00011111 ;
 $5FFA DEFB %00001100 ;
 $5FFB DEFB %00000111 ; }
 $5FFC DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$44) } TABLE#
 $5FFD DEFB %11110000 ;
 $5FFE DEFB %11111000 ;
 $5FFF DEFB %11001100 ;
 $6000 DEFB %11101100 ;
 $6001 DEFB %11111100 ;
 $6002 DEFB %00011000 ;
 $6003 DEFB %11110000 ; }
 $6004 DEFB %00000001 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $6005 DEFB %00100011 ;
 $6006 DEFB %00110011 ;
 $6007 DEFB %00110011 ;
 $6008 DEFB %00110110 ;
 $6009 DEFB %00111100 ;
 $600A DEFB %00011000 ;
 $600B DEFB %00000000 ; }
 $600C DEFB %11000000 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $600D DEFB %11100010 ;
 $600E DEFB %01100110 ;
 $600F DEFB %01100110 ;
 $6010 DEFB %00110110 ;
 $6011 DEFB %00011110 ;
 $6012 DEFB %00001100 ;
 $6013 DEFB %00000000 ; }

; Data block at 6014
b$6014 DEFB $00,$01,$00,$00,$01,$00,$00,$03
 $601C DEFB $80,$00,$7D,$7C,$00,$C1,$06,$00
 $6024 DEFB $83,$83

; Graphics: Lives Icon
@label=Graphics_LivesIcon
b$6026 DEFB %00010000 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $6027 DEFB %00010000 ;
 $6028 DEFB %10111010 ;
 $6029 DEFB %10111010 ;
 $602A DEFB %10111010 ;
 $602B DEFB %11111110 ;
 $602C DEFB %10010010 ;
 $602D DEFB %10111010 ; }

; Graphics: Bullets
@label=Graphics_Bullets_01
b$602E DEFB %01100000 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $602F DEFB %01100000 ;
 $6030 DEFB %01100011 ;
 $6031 DEFB %00000011 ;
 $6032 DEFB %00000011 ;
 $6033 DEFB %00011000 ;
 $6034 DEFB %00011000 ;
 $6035 DEFB %00011000 ; }
@label=Graphics_Bullets_02
 $6036 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $6037 DEFB %00000000 ;
 $6038 DEFB %00000000 ;
 $6039 DEFB %00000000 ;
 $603A DEFB %00011000 ;
 $603B DEFB %00011000 ;
 $603C DEFB %00011000 ;
 $603D DEFB %00000000 ; }
@label=Graphics_Bullets_03
 $603E DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $603F DEFB %01100000 ;
 $6040 DEFB %01100000 ;
 $6041 DEFB %01100000 ;
 $6042 DEFB %00000110 ;
 $6043 DEFB %00000110 ;
 $6044 DEFB %00000110 ;
 $6045 DEFB %00000000 ; }
@label=Graphics_Bullets_04
 $6046 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$45) } TABLE#
 $6047 DEFB %00001000 ;
 $6048 DEFB %00010000 ;
 $6049 DEFB %00001000 ;
 $604A DEFB %00010000 ;
 $604B DEFB %00001000 ;
 $604C DEFB %00010000 ;
 $604D DEFB %00000000 ; }

; Graphics: Ship
;
; .
;
; .
;
; #UDGTABLE { #UDGS$02,$02(ship)(
;   #UDG(#PC+$08*($02*$y+$x),$46)(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Ship
b$604E DEFB %00000001 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $604F DEFB %00000001 ;
 $6050 DEFB %00000011 ;
 $6051 DEFB %00000011 ;
 $6052 DEFB %01000011 ;
 $6053 DEFB %01000110 ;
 $6054 DEFB %01100110 ;
 $6055 DEFB %01100111 ; }
 $6056 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $6057 DEFB %00000000 ;
 $6058 DEFB %10000000 ;
 $6059 DEFB %10000000 ;
 $605A DEFB %10000100 ;
 $605B DEFB %11000100 ;
 $605C DEFB %11001100 ;
 $605D DEFB %11001100 ; }
 $605E DEFB %01100111 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $605F DEFB %01111111 ;
 $6060 DEFB %01111111 ;
 $6061 DEFB %01110111 ;
 $6062 DEFB %01100001 ;
 $6063 DEFB %01100011 ;
 $6064 DEFB %01000111 ;
 $6065 DEFB %01000000 ; }
 $6066 DEFB %11001100 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $6067 DEFB %11111100 ;
 $6068 DEFB %11111100 ;
 $6069 DEFB %11011100 ;
 $606A DEFB %00001100 ;
 $606B DEFB %10001100 ;
 $606C DEFB %11000100 ;
 $606D DEFB %00000100 ; }

; Graphics: Eggsplosion
;
; .
;
; .
;
; #UDGTABLE { #UDGS$02,$02(eggsplosion-left)(
;   #UDG(#PC+$08*($02*$y+$x),$42)(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Eggsplosion_Left
b$606E DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $606F DEFB %00000011 ;
 $6070 DEFB %00000111 ;
 $6071 DEFB %00001111 ;
 $6072 DEFB %00001111 ;
 $6073 DEFB %00011111 ;
 $6074 DEFB %00011111 ;
 $6075 DEFB %00011111 ; }
 $6076 DEFB %11111110 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $6077 DEFB %11111000 ;
 $6078 DEFB %11100000 ;
 $6079 DEFB %11110000 ;
 $607A DEFB %11111000 ;
 $607B DEFB %11111100 ;
 $607C DEFB %11110000 ;
 $607D DEFB %11100000 ; }
 $607E DEFB %00011111 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $607F DEFB %00011111 ;
 $6080 DEFB %00001111 ;
 $6081 DEFB %00001111 ;
 $6082 DEFB %00000111 ;
 $6083 DEFB %00000011 ;
 $6084 DEFB %00000000 ;
 $6085 DEFB %00000000 ; }
 $6086 DEFB %11110000 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $6087 DEFB %11111100 ;
 $6088 DEFB %11111000 ;
 $6089 DEFB %11110000 ;
 $608A DEFB %11110000 ;
 $608B DEFB %11111000 ;
 $608C DEFB %11111110 ;
 $608D DEFB %00000000 ; }
; #UDGTABLE { #UDGS$02,$02(eggsplosion-right)(
;   #UDG(#PC+$08*($02*$y+$x),$42)(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Eggsplosion_Right
 $608E DEFB %01111111 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $608F DEFB %00011111 ;
 $6090 DEFB %00000111 ;
 $6091 DEFB %00001111 ;
 $6092 DEFB %00011111 ;
 $6093 DEFB %00111111 ;
 $6094 DEFB %00001111 ;
 $6095 DEFB %00000111 ; }
 $6096 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $6097 DEFB %11000000 ;
 $6098 DEFB %11100000 ;
 $6099 DEFB %11110000 ;
 $609A DEFB %11110000 ;
 $609B DEFB %11111000 ;
 $609C DEFB %11111000 ;
 $609D DEFB %11111000 ; }
 $609E DEFB %00001111 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $609F DEFB %00111111 ;
 $60A0 DEFB %00011111 ;
 $60A1 DEFB %00001111 ;
 $60A2 DEFB %00000111 ;
 $60A3 DEFB %00011111 ;
 $60A4 DEFB %01111111 ;
 $60A5 DEFB %00000000 ; }
 $60A6 DEFB %11111000 ; {#UDGTABLE { #UDG(#PC,$42) } TABLE#
 $60A7 DEFB %11111000 ;
 $60A8 DEFB %11110000 ;
 $60A9 DEFB %11110000 ;
 $60AA DEFB %11100000 ;
 $60AB DEFB %11000000 ;
 $60AC DEFB %00000000 ;
 $60AD DEFB %00000000 ; }

; Graphics: Bird
;
; .
;
; .
;
; #UDGTABLE { #UDGS$03,$02(bird-01-green)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($60C6,$617B),#PC+$08*$x))
;   #UDG({addr},#MAP($x+($y*$03))($43,1:$44,4:$46))(*udg)
;   udg
; ) } TABLE#
; .
; #UDGTABLE { #UDGS$03,$02(bird-01-magenta)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($60C6,$617B),#PC+$08*$x))
;   #UDG({addr},#MAP($x+($y*$03))($46,1:$43,4:$46))(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Bird_01
b$60AE DEFB %00000001 ; {#UDGTABLE { #UDG(#PC,$43) } TABLE#
 $60AF DEFB %00000001 ;
 $60B0 DEFB %00000011 ;
 $60B1 DEFB %00000011 ;
 $60B2 DEFB %00000011 ;
 $60B3 DEFB %00000011 ;
 $60B4 DEFB %00000010 ;
 $60B5 DEFB %00000011 ; }
 $60B6 DEFB %00100100 ; {#UDGTABLE { #UDG(#PC,$44) } TABLE#
 $60B7 DEFB %00011000 ;
 $60B8 DEFB %10011001 ;
 $60B9 DEFB %11111111 ;
 $60BA DEFB %11111111 ;
 $60BB DEFB %00111100 ;
 $60BC DEFB %00111100 ;
 $60BD DEFB %00111100 ; }
 $60BE DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$43) } TABLE#
 $60BF DEFB %10000000 ;
 $60C0 DEFB %11000000 ;
 $60C1 DEFB %11000000 ;
 $60C2 DEFB %11000000 ;
 $60C3 DEFB %11000000 ;
 $60C4 DEFB %01000000 ;
 $60C5 DEFB %11000000 ; }
 $60C6 DEFB %00011000 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $60C7 DEFB %01100110 ;
 $60C8 DEFB %00000000 ;
 $60C9 DEFB %00000000 ;
 $60CA DEFB %00000000 ;
 $60CB DEFB %00000000 ;
 $60CC DEFB %00000000 ; }
; #UDGTABLE { #UDGS$03,$02(bird-02-green)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($60E5,$617B),#PC+$08*$x))
;   #UDG({addr},#MAP($x+($y*$03))($43,1:$44,4:$46))(*udg)
;   udg
; ) } TABLE#
; .
; #UDGTABLE { #UDGS$03,$02(bird-02-magenta)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($60E5,$617B),#PC+$08*$x))
;   #UDG({addr},#MAP($x+($y*$03))($46,1:$43,4:$46))(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Bird_02
 $60CD DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$43) } TABLE#
 $60CE DEFB %00000001 ;
 $60CF DEFB %00000001 ;
 $60D0 DEFB %00000011 ;
 $60D1 DEFB %00000111 ;
 $60D2 DEFB %00001110 ;
 $60D3 DEFB %00011000 ;
 $60D4 DEFB %00010000 ; }
 $60D5 DEFB %00100100 ; {#UDGTABLE { #UDG(#PC,$44) } TABLE#
 $60D6 DEFB %00011000 ;
 $60D7 DEFB %10011001 ;
 $60D8 DEFB %11111111 ;
 $60D9 DEFB %11111111 ;
 $60DA DEFB %00111100 ;
 $60DB DEFB %00111100 ;
 $60DC DEFB %00111100 ; }
 $60DD DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$43) } TABLE#
 $60DE DEFB %10000000 ;
 $60DF DEFB %10000000 ;
 $60E0 DEFB %11000000 ;
 $60E1 DEFB %11100000 ;
 $60E2 DEFB %01110000 ;
 $60E3 DEFB %00011000 ;
 $60E4 DEFB %00001000 ; }
 $60E5 DEFB %00100100 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $60E6 DEFB %11000011 ; }

; Graphics: Pheenix (Egg)
;
; .
;
; .
;
; #UDGTABLE { #UDGS$03,$01(pheenix-01)(
;   #UDG(#PC+$08*$x,$05)(*udg)
;   udg
; ) } TABLE#
; .
; The drawing routine uses this layout:
; #TABLE { X | X | X } { | X | } TABLE#
; Hence, when this sprite is drawn it also writes the empty data at
; #R$60FF(#N$60FF) on the bottom row.
@label=Graphics_Pheenix_01
b$60E7 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $60E8 DEFB %00000000 ;
 $60E9 DEFB %00000000 ;
 $60EA DEFB %00000000 ;
 $60EB DEFB %00000000 ;
 $60EC DEFB %00000000 ;
 $60ED DEFB %00000000 ;
 $60EE DEFB %00000000 ; }
 $60EF DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $60F0 DEFB %00011110 ;
 $60F1 DEFB %01111111 ;
 $60F2 DEFB %11111111 ;
 $60F3 DEFB %11111111 ;
 $60F4 DEFB %11111111 ;
 $60F5 DEFB %01111111 ;
 $60F6 DEFB %00011110 ; }
 $60F7 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $60F8 DEFB %00000000 ;
 $60F9 DEFB %10000000 ;
 $60FA DEFB %11000000 ;
 $60FB DEFB %11000000 ;
 $60FC DEFB %11000000 ;
 $60FD DEFB %10000000 ;
 $60FE DEFB %00000000 ; }
; #UDGTABLE { #UDGS$03,$01(pheenix-02)(
;   #UDG(#PC+$08*$x,$05)(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Pheenix_02
 $60FF DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $6100 DEFB %00000000 ;
 $6101 DEFB %00000000 ;
 $6102 DEFB %00000000 ;
 $6103 DEFB %00000000 ;
 $6104 DEFB %00000000 ;
 $6105 DEFB %00000000 ;
 $6106 DEFB %00000000 ; }
 $6107 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $6108 DEFB %00011011 ;
 $6109 DEFB %01110001 ;
 $610A DEFB %11100011 ;
 $610B DEFB %11111000 ;
 $610C DEFB %11100011 ;
 $610D DEFB %01110001 ;
 $610E DEFB %00011011 ; }
 $610F DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $6110 DEFB %00000000 ;
 $6111 DEFB %11000000 ;
 $6112 DEFB %11100000 ;
 $6113 DEFB %11100000 ;
 $6114 DEFB %11100000 ;
 $6115 DEFB %11000000 ;
 $6116 DEFB %00000000 ; }
; Invisible bottom row.
 $6117 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $6118 DEFB %00000000 ;
 $6119 DEFB %00000000 ;
 $611A DEFB %00000000 ;
 $611B DEFB %00000000 ;
 $611C DEFB %00000000 ;
 $611D DEFB %00000000 ;
 $611E DEFB %00000000 ; }
; #UDGTABLE { #UDGS$03,$02(pheenix-03)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($6137,$617B),#PC+$08*$x))
;   #UDG({addr},#MAP($x+($y*$03))($05,1:$41,4:$46))(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Pheenix_03
 $611F DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $6120 DEFB %00001100 ;
 $6121 DEFB %00111000 ;
 $6122 DEFB %01110000 ;
 $6123 DEFB %01111100 ;
 $6124 DEFB %01110000 ;
 $6125 DEFB %00111000 ;
 $6126 DEFB %00001100 ; }
 $6127 DEFB %00111100 ; {#UDGTABLE { #UDG(#PC,$01) } TABLE#
 $6128 DEFB %01011010 ;
 $6129 DEFB %01100110 ;
 $612A DEFB %11111111 ;
 $612B DEFB %11111111 ;
 $612C DEFB %11111111 ;
 $612D DEFB %11111111 ;
 $612E DEFB %01111110 ; }
 $612F DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $6130 DEFB %00110000 ;
 $6131 DEFB %00011100 ;
 $6132 DEFB %00111110 ;
 $6133 DEFB %00001110 ;
 $6134 DEFB %00111110 ;
 $6135 DEFB %00011100 ;
 $6136 DEFB %00110000 ; }
 $6137 DEFB %00100100 ; {#UDGTABLE { #UDG(#PC,$06) } TABLE#
 $6138 DEFB %00100100 ;
 $6139 DEFB %00100100 ;
 $613A DEFB %01011010 ;
 $613B DEFB %10011001 ;
 $613C DEFB %00000000 ; }

; Graphics: Masks
@label=Graphics_Masks
b$613D DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $613E DEFB %00000000 ;
 $613F DEFB %00000000 ;
 $6140 DEFB %00000000 ;
 $6141 DEFB %00000000 ;
 $6142 DEFB %00000000 ;
 $6143 DEFB %00000000 ;
 $6144 DEFB %00000000 ; }
 $6145 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6146 DEFB %00000000 ;
 $6147 DEFB %00000000 ;
 $6148 DEFB %00000000 ;
 $6149 DEFB %00000000 ;
 $614A DEFB %00000000 ;
 $614B DEFB %00000000 ;
 $614C DEFB %00000000 ; }
 $614D DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $614E DEFB %00000000 ;
 $614F DEFB %00000000 ;
 $6150 DEFB %00000000 ;
 $6151 DEFB %00000000 ;
 $6152 DEFB %00000000 ; }
 $6153 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6154 DEFB %00000000 ;
 $6155 DEFB %00000000 ;
 $6156 DEFB %00000000 ;
 $6157 DEFB %00000000 ;
 $6158 DEFB %00000000 ;
 $6159 DEFB %00000000 ;
 $615A DEFB %00000000 ; }

; Graphics: Pheenix (Hatched)
;
; .
;
; .
;
; #UDGTABLE { #UDGS$03,$02(pheenix-04-blue)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($6173,$617B),#PC+$08*$x))
;   #UDG({addr},#IF($y==0)($41,$46))(*udg)
;   udg
; ) } TABLE#
; .
; #UDGTABLE { #UDGS$03,$02(pheenix-04-magenta)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($6173,$617B),#PC+$08*$x))
;   #UDG({addr},#IF($y==0)($43,$46))(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Pheenix_04
b$615B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$41) } TABLE#
 $615C DEFB %00000000 ;
 $615D DEFB %00001110 ;
 $615E DEFB %00111111 ;
 $615F DEFB %00111111 ;
 $6160 DEFB %01111111 ;
 $6161 DEFB %01111110 ;
 $6162 DEFB %11110000 ; }
 $6163 DEFB %00111100 ; {#UDGTABLE { #UDG(#PC,$41) } TABLE#
 $6164 DEFB %01011010 ;
 $6165 DEFB %01100110 ;
 $6166 DEFB %11111111 ;
 $6167 DEFB %11111111 ;
 $6168 DEFB %11111111 ;
 $6169 DEFB %11111111 ;
 $616A DEFB %01111110 ; }
 $616B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$41) } TABLE#
 $616C DEFB %00000000 ;
 $616D DEFB %01110000 ;
 $616E DEFB %11111100 ;
 $616F DEFB %11111100 ;
 $6170 DEFB %11111110 ;
 $6171 DEFB %01111110 ;
 $6172 DEFB %00001111 ; }
 $6173 DEFB %00100100 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $6174 DEFB %00100100 ;
 $6175 DEFB %00100100 ;
 $6176 DEFB %01011010 ;
 $6177 DEFB %10011001 ;
 $6178 DEFB %00000000 ;
 $6179 DEFB %00000000 ;
 $617A DEFB %00000000 ; }
 $617B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $617C DEFB %00000000 ;
 $617D DEFB %00000000 ;
 $617E DEFB %00000000 ;
 $617F DEFB %00000000 ;
 $6180 DEFB %00000000 ;
 $6181 DEFB %00000000 ;
 $6182 DEFB %00000000 ; }
 $6183 DEFB $00,$00   ; Unused.
; #UDGTABLE { #UDGS$03,$02(pheenix-05-blue)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($619D,$617B),#PC+$08*$x))
;   #UDG({addr},#IF($y==0)($41,$46))(*udg)
;   udg
; ) } TABLE#
; .
; #UDGTABLE { #UDGS$03,$02(pheenix-05-magenta)(
;   #LET(addr=#IF($y==1)(#IF($x==1)($619D,$617B),#PC+$08*$x))
;   #UDG({addr},#IF($y==0)($43,$46))(*udg)
;   udg
; ) } TABLE#
@label=Graphics_Pheenix_05
 $6185 DEFB %11100000 ; {#UDGTABLE { #UDG(#PC,$41) } TABLE#
 $6186 DEFB %01111000 ;
 $6187 DEFB %01111110 ;
 $6188 DEFB %00111111 ;
 $6189 DEFB %00111111 ;
 $618A DEFB %00011111 ;
 $618B DEFB %00000111 ;
 $618C DEFB %00000000 ; }
 $618D DEFB %00111100 ; {#UDGTABLE { #UDG(#PC,$41) } TABLE#
 $618E DEFB %01011010 ;
 $618F DEFB %01100110 ;
 $6190 DEFB %11111111 ;
 $6191 DEFB %11111111 ;
 $6192 DEFB %11111111 ;
 $6193 DEFB %11111111 ;
 $6194 DEFB %01111110 ; }
 $6195 DEFB %00000111 ; {#UDGTABLE { #UDG(#PC,$41) } TABLE#
 $6196 DEFB %00011110 ;
 $6197 DEFB %01111110 ;
 $6198 DEFB %11111100 ;
 $6199 DEFB %11111100 ;
 $619A DEFB %11111000 ;
 $619B DEFB %11100000 ;
 $619C DEFB %00000000 ; }
 $619D DEFB %00100100 ; {#UDGTABLE { #UDG(#PC,$46) } TABLE#
 $619E DEFB %00100100 ;
 $619F DEFB %00100100 ;
 $61A0 DEFB %01011010 ;
 $61A1 DEFB %10011001 ;
 $61A2 DEFB %00000000 ; }

; Graphics: Explosion Bits
@label=Graphics_ExplosionBits
b$61A3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $61A4 DEFB %00000000 ;
 $61A5 DEFB %00000000 ;
 $61A6 DEFB %00010000 ;
 $61A7 DEFB %00100000 ;
 $61A8 DEFB %00000110 ;
 $61A9 DEFB %00000111 ;
 $61AA DEFB %00000011 ; }
 $61AB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $61AC DEFB %00000000 ;
 $61AD DEFB %00110000 ;
 $61AE DEFB %01110000 ;
 $61AF DEFB %01111000 ;
 $61B0 DEFB %00011000 ;
 $61B1 DEFB %00000000 ;
 $61B2 DEFB %00000000 ; }
 $61B3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $61B4 DEFB %00001100 ;
 $61B5 DEFB %00001100 ;
 $61B6 DEFB %00000110 ;
 $61B7 DEFB %11000000 ;
 $61B8 DEFB %00000000 ;
 $61B9 DEFB %00000000 ;
 $61BA DEFB %00000000 ; }

; Graphics: MegaDodo Logo
;
; .
;
; .
;
; #UDGTABLE { #UDGS$02,$02(megadodo)(
;   #UDG(#PC+$08*($02*$y+$x),$04)(*udg)
;   udg
; ) } TABLE#
@label=Graphics_MegaDodo
b$61BB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$04) } TABLE#
 $61BC DEFB %00000000 ;
 $61BD DEFB %00000000 ;
 $61BE DEFB %00000000 ;
 $61BF DEFB %01100000 ;
 $61C0 DEFB %11100111 ;
 $61C1 DEFB %11011111 ;
 $61C2 DEFB %11011111 ; }
 $61C3 DEFB %00110000 ; {#UDGTABLE { #UDG(#PC,$04) } TABLE#
 $61C4 DEFB %01101010 ;
 $61C5 DEFB %01111111 ;
 $61C6 DEFB %00111101 ;
 $61C7 DEFB %00110000 ;
 $61C8 DEFB %10011000 ;
 $61C9 DEFB %11111100 ;
 $61CA DEFB %01111100 ; }
 $61CB DEFB %01111111 ; {#UDGTABLE { #UDG(#PC,$04) } TABLE#
 $61CC DEFB %00110111 ;
 $61CD DEFB %00111010 ;
 $61CE DEFB %00011111 ;
 $61CF DEFB %00001111 ;
 $61D0 DEFB %00000010 ;
 $61D1 DEFB %00000010 ;
 $61D2 DEFB %00001110 ; }
 $61D3 DEFB %10111100 ; {#UDGTABLE { #UDG(#PC,$04) } TABLE#
 $61D4 DEFB %00111000 ;
 $61D5 DEFB %11111000 ;
 $61D6 DEFB %11100000 ;
 $61D7 DEFB %11000000 ;
 $61D8 DEFB %10000000 ;
 $61D9 DEFB %10000000 ;
 $61DA DEFB %11100000 ; }

; Graphics: Large Star
@label=Graphics_StarLarge
b$61DB DEFB %00010000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $61DC DEFB %01010100 ;
 $61DD DEFB %00111000 ;
 $61DE DEFB %11111110 ;
 $61DF DEFB %00111000 ;
 $61E0 DEFB %01010100 ;
 $61E1 DEFB %00010000 ;
 $61E2 DEFB %00000000 ; }

; Graphics: Box
@label=Graphics_Box
b$61E3 DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $61E4 DEFB %10000001 ;
 $61E5 DEFB %10111101 ;
 $61E6 DEFB %10100101 ;
 $61E7 DEFB %10100101 ;
 $61E8 DEFB %10111101 ;
 $61E9 DEFB %10000001 ;
 $61EA DEFB %11111111 ; }

; Data block at 61EB
b$61EB DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $61EC DEFB %11111011 ;
 $61ED DEFB %01111011 ;
 $61EE DEFB %01011010 ;
 $61EF DEFB %00010010 ;
 $61F0 DEFB %00010000 ;
 $61F1 DEFB %00010000 ;
 $61F2 DEFB %00000000 ; }
 $61F3 DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $61F4 DEFB %11111100 ;
 $61F5 DEFB %11110000 ;
 $61F6 DEFB %00000000 ;
 $61F7 DEFB %00000000 ;
 $61F8 DEFB %00000000 ;
 $61F9 DEFB %00000000 ;
 $61FA DEFB %00000000 ; }
 $61FB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $61FC DEFB %00000000 ;
 $61FD DEFB %00000000 ;
 $61FE DEFB %00001000 ;
 $61FF DEFB %00001111 ;
 $6200 DEFB %00001001 ;
 $6201 DEFB %00000001 ;
 $6202 DEFB %00100001 ; }
 $6203 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6204 DEFB %00000000 ;
 $6205 DEFB %00000000 ;
 $6206 DEFB %00010000 ;
 $6207 DEFB %11110000 ;
 $6208 DEFB %10010000 ;
 $6209 DEFB %10000000 ;
 $620A DEFB %10000100 ; }
 $620B DEFB %00111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $620C DEFB %00100001 ;
 $620D DEFB %00000001 ;
 $620E DEFB %10010001 ;
 $620F DEFB %11111111 ;
 $6210 DEFB %10010001 ;
 $6211 DEFB %00000001 ;
 $6212 DEFB %00000001 ; }
 $6213 DEFB %11111100 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6214 DEFB %10000100 ;
 $6215 DEFB %10000000 ;
 $6216 DEFB %10001001 ;
 $6217 DEFB %11111111 ;
 $6218 DEFB %10001001 ;
 $6219 DEFB %10000000 ;
 $621A DEFB %10000000 ; }
 $621B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $621C DEFB %00000000 ;
 $621D DEFB %11111111 ;
 $621E DEFB %00111101 ;
 $621F DEFB %00001110 ;
 $6220 DEFB %00011111 ;
 $6221 DEFB %00111111 ;
 $6222 DEFB %01111111 ; }
 $6223 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6224 DEFB %00011111 ;
 $6225 DEFB %11111111 ;
 $6226 DEFB %11111111 ;
 $6227 DEFB %11111111 ;
 $6228 DEFB %11111111 ;
 $6229 DEFB %11111111 ;
 $622A DEFB %11111111 ; }
 $622B DEFB %00000010 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $622C DEFB %00000010 ;
 $622D DEFB %00000010 ;
 $622E DEFB %00000010 ;
 $622F DEFB %00000010 ;
 $6230 DEFB %00000010 ;
 $6231 DEFB %00000010 ;
 $6232 DEFB %00000010 ; }
 $6233 DEFB %01000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6234 DEFB %01000000 ;
 $6235 DEFB %01000000 ;
 $6236 DEFB %01000000 ;
 $6237 DEFB %01000000 ;
 $6238 DEFB %01000000 ;
 $6239 DEFB %01000000 ;
 $623A DEFB %01000000 ; }
 $623B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $623C DEFB %11111000 ;
 $623D DEFB %11111111 ;
 $623E DEFB %11111111 ;
 $623F DEFB %11111111 ;
 $6240 DEFB %11111111 ;
 $6241 DEFB %11111111 ;
 $6242 DEFB %11111111 ; }
 $6243 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6244 DEFB %00000000 ;
 $6245 DEFB %11111111 ;
 $6246 DEFB %10111100 ;
 $6247 DEFB %01110000 ;
 $6248 DEFB %11111000 ;
 $6249 DEFB %11111100 ;
 $624A DEFB %11111110 ; }

; Graphics: Small Star
@label=Graphics_StarSmall
b$624B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC,$05) } TABLE#
 $624C DEFB %00000000 ;
 $624D DEFB %00011000 ;
 $624E DEFB %00011000 ;
 $624F DEFB %00000000 ;
 $6250 DEFB %00000000 ;
 $6251 DEFB %00000000 ;
 $6252 DEFB %00000000 ; }

; Data block at 6253
b$6253 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6254 DEFB %00000000 ;
 $6255 DEFB %00000000 ;
 $6256 DEFB %00000000 ;
 $6257 DEFB %00000000 ;
 $6258 DEFB %00000000 ;
 $6259 DEFB %00000000 ;
 $625A DEFB %00000000 ; }
 $625B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $625C DEFB %11111111 ;
 $625D DEFB %00111101 ;
 $625E DEFB %00000110 ;
 $625F DEFB %00001111 ;
 $6260 DEFB %00011111 ;
 $6261 DEFB %00111111 ;
 $6262 DEFB %01111111 ; }
 $6263 DEFB %00111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6264 DEFB %00111111 ;
 $6265 DEFB %00011111 ;
 $6266 DEFB %00011111 ;
 $6267 DEFB %00001111 ;
 $6268 DEFB %00000111 ;
 $6269 DEFB %00000011 ;
 $626A DEFB %00000001 ; }
 $626B DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $626C DEFB %01111111 ;
 $626D DEFB %00111111 ;
 $626E DEFB %00011111 ;
 $626F DEFB %00001111 ;
 $6270 DEFB %00000111 ;
 $6271 DEFB %00000011 ;
 $6272 DEFB %00000001 ; }
 $6273 DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6274 DEFB %01111111 ;
 $6275 DEFB %00011111 ;
 $6276 DEFB %00000111 ;
 $6277 DEFB %00000001 ;
 $6278 DEFB %00000000 ;
 $6279 DEFB %00000000 ;
 $627A DEFB %00000000 ; }
 $627B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $627C DEFB %00000000 ;
 $627D DEFB %00000000 ;
 $627E DEFB %00000000 ;
 $627F DEFB %00000000 ;
 $6280 DEFB %10000000 ;
 $6281 DEFB %11100000 ;
 $6282 DEFB %11111000 ; }
 $6283 DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6284 DEFB %00111111 ;
 $6285 DEFB %00001111 ;
 $6286 DEFB %00000000 ;
 $6287 DEFB %00000000 ;
 $6288 DEFB %00000000 ;
 $6289 DEFB %00000000 ;
 $628A DEFB %00000000 ; }
 $628B DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $628C DEFB %11111111 ;
 $628D DEFB %11111111 ;
 $628E DEFB %11111111 ;
 $628F DEFB %00000000 ;
 $6290 DEFB %00000000 ;
 $6291 DEFB %00000000 ;
 $6292 DEFB %00000000 ; }
 $6293 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6294 DEFB %11111111 ;
 $6295 DEFB %10111100 ;
 $6296 DEFB %01100000 ;
 $6297 DEFB %11110000 ;
 $6298 DEFB %11111000 ;
 $6299 DEFB %11111100 ;
 $629A DEFB %11111110 ; }
 $629B DEFB %11111100 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $629C DEFB %11111100 ;
 $629D DEFB %11111000 ;
 $629E DEFB %11111000 ;
 $629F DEFB %11110000 ;
 $62A0 DEFB %11100000 ;
 $62A1 DEFB %11000000 ;
 $62A2 DEFB %10000000 ; }
 $62A3 DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62A4 DEFB %11111110 ;
 $62A5 DEFB %11111100 ;
 $62A6 DEFB %11111000 ;
 $62A7 DEFB %11110000 ;
 $62A8 DEFB %11100000 ;
 $62A9 DEFB %11000000 ;
 $62AA DEFB %10000000 ; }
 $62AB DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62AC DEFB %11111110 ;
 $62AD DEFB %11111000 ;
 $62AE DEFB %11100000 ;
 $62AF DEFB %10000000 ;
 $62B0 DEFB %00000000 ;
 $62B1 DEFB %00000000 ;
 $62B2 DEFB %00000000 ; }
 $62B3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62B4 DEFB %00000000 ;
 $62B5 DEFB %00000000 ;
 $62B6 DEFB %00000000 ;
 $62B7 DEFB %00000000 ;
 $62B8 DEFB %00000001 ;
 $62B9 DEFB %00000111 ;
 $62BA DEFB %00011111 ; }
 $62BB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62BC DEFB %00000000 ;
 $62BD DEFB %00000000 ;
 $62BE DEFB %00111100 ;
 $62BF DEFB %00000000 ;
 $62C0 DEFB %00000000 ;
 $62C1 DEFB %00000000 ;
 $62C2 DEFB %00000000 ; }
 $62C3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62C4 DEFB %00000000 ;
 $62C5 DEFB %01100110 ;
 $62C6 DEFB %01100110 ;
 $62C7 DEFB %01100110 ;
 $62C8 DEFB %01100110 ;
 $62C9 DEFB %00000000 ;
 $62CA DEFB %00000000 ; }
 $62CB DEFB %11111111 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62CC DEFB %11111111 ;
 $62CD DEFB %11111111 ;
 $62CE DEFB %11111111 ;
 $62CF DEFB %11111111 ;
 $62D0 DEFB %00000000 ;
 $62D1 DEFB %00000000 ;
 $62D2 DEFB %00000000 ; }
 $62D3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62D4 DEFB %01111110 ;
 $62D5 DEFB %01100010 ;
 $62D6 DEFB %01100010 ;
 $62D7 DEFB %01110010 ;
 $62D8 DEFB %01110010 ;
 $62D9 DEFB %01111110 ;
 $62DA DEFB %00000000 ; }
 $62DB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62DC DEFB %00001000 ;
 $62DD DEFB %00001000 ;
 $62DE DEFB %00011000 ;
 $62DF DEFB %00011000 ;
 $62E0 DEFB %00011000 ;
 $62E1 DEFB %00011000 ;
 $62E2 DEFB %00000000 ; }
 $62E3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62E4 DEFB %01111110 ;
 $62E5 DEFB %00000110 ;
 $62E6 DEFB %01111110 ;
 $62E7 DEFB %01100000 ;
 $62E8 DEFB %01111110 ;
 $62E9 DEFB %01111110 ;
 $62EA DEFB %00000000 ; }
 $62EB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62EC DEFB %01111100 ;
 $62ED DEFB %00000100 ;
 $62EE DEFB %00111110 ;
 $62EF DEFB %00000110 ;
 $62F0 DEFB %01111110 ;
 $62F1 DEFB %01111110 ;
 $62F2 DEFB %00000000 ; }
 $62F3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62F4 DEFB %01000000 ;
 $62F5 DEFB %01001100 ;
 $62F6 DEFB %01001100 ;
 $62F7 DEFB %01111110 ;
 $62F8 DEFB %00001100 ;
 $62F9 DEFB %00001100 ;
 $62FA DEFB %00000000 ; }
 $62FB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $62FC DEFB %01111110 ;
 $62FD DEFB %01000000 ;
 $62FE DEFB %01111110 ;
 $62FF DEFB %00000110 ;
 $6300 DEFB %01111110 ;
 $6301 DEFB %01111110 ;
 $6302 DEFB %00000000 ; }
 $6303 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6304 DEFB %01000000 ;
 $6305 DEFB %01000000 ;
 $6306 DEFB %01111110 ;
 $6307 DEFB %01100010 ;
 $6308 DEFB %01100010 ;
 $6309 DEFB %01111110 ;
 $630A DEFB %00000000 ; }
 $630B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $630C DEFB %01111110 ;
 $630D DEFB %00000110 ;
 $630E DEFB %00000110 ;
 $630F DEFB %00000110 ;
 $6310 DEFB %00000110 ;
 $6311 DEFB %00000110 ;
 $6312 DEFB %00000000 ; }
 $6313 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6314 DEFB %00111110 ;
 $6315 DEFB %00100010 ;
 $6316 DEFB %01111110 ;
 $6317 DEFB %01100010 ;
 $6318 DEFB %01100010 ;
 $6319 DEFB %01111110 ;
 $631A DEFB %00000000 ; }
 $631B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $631C DEFB %01111110 ;
 $631D DEFB %01100010 ;
 $631E DEFB %01111110 ;
 $631F DEFB %00000110 ;
 $6320 DEFB %00000110 ;
 $6321 DEFB %00000110 ;
 $6322 DEFB %00000000 ; }
 $6323 DEFB %00010000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6324 DEFB %01001101 ;
 $6325 DEFB %10111000 ;
 $6326 DEFB %00111110 ;
 $6327 DEFB %01111100 ;
 $6328 DEFB %01011010 ;
 $6329 DEFB %10100000 ;
 $632A DEFB %00010100 ; }
 $632B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $632C DEFB %00000000 ;
 $632D DEFB %00000001 ;
 $632E DEFB %00000100 ;
 $632F DEFB %00000001 ;
 $6330 DEFB %00000000 ;
 $6331 DEFB %00000010 ;
 $6332 DEFB %00000000 ; }
 $6333 DEFB %00100000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6334 DEFB %10000100 ;
 $6335 DEFB %01101010 ;
 $6336 DEFB %10101101 ;
 $6337 DEFB %01000110 ;
 $6338 DEFB %10110101 ;
 $6339 DEFB %00101000 ;
 $633A DEFB %00000100 ; }
 $633B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $633C DEFB %10000000 ;
 $633D DEFB %00000000 ;
 $633E DEFB %01100000 ;
 $633F DEFB %00000000 ;
 $6340 DEFB %10000000 ;
 $6341 DEFB %00100000 ;
 $6342 DEFB %00000000 ; }
 $6343 DEFB %00000011 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6344 DEFB %00000100 ;
 $6345 DEFB %00010001 ;
 $6346 DEFB %00000100 ;
 $6347 DEFB %00000010 ;
 $6348 DEFB %00001000 ;
 $6349 DEFB %00010110 ;
 $634A DEFB %00000001 ; }
 $634B DEFB %00110101 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $634C DEFB %01000010 ;
 $634D DEFB %00000000 ;
 $634E DEFB %00001000 ;
 $634F DEFB %10010000 ;
 $6350 DEFB %00000001 ;
 $6351 DEFB %10010001 ;
 $6352 DEFB %00100110 ; }
 $6353 DEFB %10000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6354 DEFB %00101000 ;
 $6355 DEFB %01000000 ;
 $6356 DEFB %10110000 ;
 $6357 DEFB %00100000 ;
 $6358 DEFB %01010000 ;
 $6359 DEFB %00101000 ;
 $635A DEFB %10000000 ; }
 $635B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $635C DEFB %01111110 ;
 $635D DEFB %01100010 ;
 $635E DEFB %01100010 ;
 $635F DEFB %01111110 ;
 $6360 DEFB %01100010 ;
 $6361 DEFB %01100010 ;
 $6362 DEFB %00000000 ; }
 $6363 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6364 DEFB %01111100 ;
 $6365 DEFB %01100100 ;
 $6366 DEFB %01111110 ;
 $6367 DEFB %01100010 ;
 $6368 DEFB %01100010 ;
 $6369 DEFB %01111110 ;
 $636A DEFB %00000000 ; }
 $636B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $636C DEFB %01111110 ;
 $636D DEFB %01100000 ;
 $636E DEFB %01100000 ;
 $636F DEFB %01100000 ;
 $6370 DEFB %01100000 ;
 $6371 DEFB %01111110 ;
 $6372 DEFB %00000000 ; }
 $6373 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6374 DEFB %01111110 ;
 $6375 DEFB %01110010 ;
 $6376 DEFB %00110010 ;
 $6377 DEFB %00110010 ;
 $6378 DEFB %01110010 ;
 $6379 DEFB %01111110 ;
 $637A DEFB %00000000 ; }
 $637B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $637C DEFB %01111110 ;
 $637D DEFB %01100000 ;
 $637E DEFB %01111100 ;
 $637F DEFB %01100000 ;
 $6380 DEFB %01100000 ;
 $6381 DEFB %01111110 ;
 $6382 DEFB %00000000 ; }
 $6383 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6384 DEFB %01111110 ;
 $6385 DEFB %01100000 ;
 $6386 DEFB %01111100 ;
 $6387 DEFB %01100000 ;
 $6388 DEFB %01100000 ;
 $6389 DEFB %01100000 ;
 $638A DEFB %00000000 ; }
 $638B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $638C DEFB %01111110 ;
 $638D DEFB %01100000 ;
 $638E DEFB %01100000 ;
 $638F DEFB %01101110 ;
 $6390 DEFB %01100110 ;
 $6391 DEFB %01111110 ;
 $6392 DEFB %00000000 ; }
 $6393 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6394 DEFB %00100010 ;
 $6395 DEFB %00100010 ;
 $6396 DEFB %01111110 ;
 $6397 DEFB %01100010 ;
 $6398 DEFB %01100010 ;
 $6399 DEFB %01100010 ;
 $639A DEFB %00000000 ; }
 $639B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $639C DEFB %00001000 ;
 $639D DEFB %00001000 ;
 $639E DEFB %00011000 ;
 $639F DEFB %00011000 ;
 $63A0 DEFB %00011000 ;
 $63A1 DEFB %00011000 ;
 $63A2 DEFB %00000000 ; }
 $63A3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63A4 DEFB %00001100 ;
 $63A5 DEFB %00001100 ;
 $63A6 DEFB %00001100 ;
 $63A7 DEFB %00001100 ;
 $63A8 DEFB %01101100 ;
 $63A9 DEFB %00111000 ;
 $63AA DEFB %00000000 ; }
 $63AB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63AC DEFB %01100100 ;
 $63AD DEFB %01101000 ;
 $63AE DEFB %01101000 ;
 $63AF DEFB %01111100 ;
 $63B0 DEFB %01100110 ;
 $63B1 DEFB %01100110 ;
 $63B2 DEFB %00000000 ; }
 $63B3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63B4 DEFB %00100000 ;
 $63B5 DEFB %00100000 ;
 $63B6 DEFB %01100000 ;
 $63B7 DEFB %01100000 ;
 $63B8 DEFB %01100000 ;
 $63B9 DEFB %01111100 ;
 $63BA DEFB %00000000 ; }
 $63BB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63BC DEFB %01111110 ;
 $63BD DEFB %01101010 ;
 $63BE DEFB %01101010 ;
 $63BF DEFB %01101010 ;
 $63C0 DEFB %01101010 ;
 $63C1 DEFB %01101010 ;
 $63C2 DEFB %00000000 ; }
 $63C3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63C4 DEFB %01111110 ;
 $63C5 DEFB %01100010 ;
 $63C6 DEFB %01100010 ;
 $63C7 DEFB %01100010 ;
 $63C8 DEFB %01100010 ;
 $63C9 DEFB %01100010 ;
 $63CA DEFB %00000000 ; }
 $63CB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63CC DEFB %01111110 ;
 $63CD DEFB %01100010 ;
 $63CE DEFB %01100010 ;
 $63CF DEFB %01100010 ;
 $63D0 DEFB %01100010 ;
 $63D1 DEFB %01111110 ;
 $63D2 DEFB %00000000 ; }
 $63D3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63D4 DEFB %01111110 ;
 $63D5 DEFB %01100010 ;
 $63D6 DEFB %01111110 ;
 $63D7 DEFB %01100000 ;
 $63D8 DEFB %01100000 ;
 $63D9 DEFB %01100000 ;
 $63DA DEFB %00000000 ; }
 $63DB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63DC DEFB %00000000 ;
 $63DD DEFB %00000000 ;
 $63DE DEFB %00000000 ;
 $63DF DEFB %00000000 ;
 $63E0 DEFB %00000000 ;
 $63E1 DEFB %00000000 ;
 $63E2 DEFB %00000000 ; }
 $63E3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63E4 DEFB %01111110 ;
 $63E5 DEFB %01100010 ;
 $63E6 DEFB %01111110 ;
 $63E7 DEFB %01101100 ;
 $63E8 DEFB %01100110 ;
 $63E9 DEFB %01100110 ;
 $63EA DEFB %00000000 ; }
 $63EB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63EC DEFB %01111110 ;
 $63ED DEFB %01000000 ;
 $63EE DEFB %01111110 ;
 $63EF DEFB %00000110 ;
 $63F0 DEFB %01111110 ;
 $63F1 DEFB %01111110 ;
 $63F2 DEFB %00000000 ; }
 $63F3 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63F4 DEFB %01111110 ;
 $63F5 DEFB %00011000 ;
 $63F6 DEFB %00011000 ;
 $63F7 DEFB %00011000 ;
 $63F8 DEFB %00011000 ;
 $63F9 DEFB %00011000 ;
 $63FA DEFB %00000000 ; }
 $63FB DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $63FC DEFB %01100010 ;
 $63FD DEFB %01100010 ;
 $63FE DEFB %01100010 ;
 $63FF DEFB %01100010 ;
 $6400 DEFB %01100010 ;
 $6401 DEFB %01111110 ;
 $6402 DEFB %00000000 ; }
 $6403 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6404 DEFB %01100010 ;
 $6405 DEFB %01100010 ;
 $6406 DEFB %01100010 ;
 $6407 DEFB %01100010 ;
 $6408 DEFB %00110100 ;
 $6409 DEFB %00011000 ;
 $640A DEFB %00000000 ; }
 $640B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $640C DEFB %01101010 ;
 $640D DEFB %01101010 ;
 $640E DEFB %01101010 ;
 $640F DEFB %01101010 ;
 $6410 DEFB %01101010 ;
 $6411 DEFB %01111110 ;
 $6412 DEFB %00000000 ; }
 $6413 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6414 DEFB %00000000 ;
 $6415 DEFB %00000000 ;
 $6416 DEFB %00000000 ;
 $6417 DEFB %00000000 ;
 $6418 DEFB %00000000 ;
 $6419 DEFB %00000000 ;
 $641A DEFB %00000000 ; }
 $641B DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $641C DEFB %01100010 ;
 $641D DEFB %01100010 ;
 $641E DEFB %01100010 ;
 $641F DEFB %01111110 ;
 $6420 DEFB %00011000 ;
 $6421 DEFB %00011000 ;
 $6422 DEFB %00000000 ; }
 $6423 DEFB %00000000 ; {#UDGTABLE { #UDG(#PC) } TABLE#
 $6424 DEFB %01111110 ;
 $6425 DEFB %00001110 ;
 $6426 DEFB %00011100 ;
 $6427 DEFB %00111000 ;
 $6428 DEFB %01110000 ;
 $6429 DEFB %01111110 ;
 $642A DEFB %00000000 ; }

; Messaging: Presents
@label=Messaging_Presents
t$642B DEFM "presents" ; "#STR#(#PC,$04,$08)".

; Messaging: Megadodo Software
@label=Messaging_Copyright
t$6433 DEFM $7F," "                  ; "#STR#(#PC,$04,$02)".
@label=Messaging_MegadodoSoftware
 $6435 DEFM "MEGADODO SOFTWARE 1983" ; "#STR#(#PC,$04,$16)".

; Messaging: Author M.W.Ward
@label=Messaging_WrittenBy
t$644B DEFM "written by " ; "#STR#(#PC,$04,$13)".
@label=Messaging_Author
 $6456 DEFM "M.W.Ward"    ; "#STR#(#PC,$04,$08)".

; Messaging: "press S to start"
@label=Messaging_PressSToStart
t$645E DEFM "press S to start" ; "#STR#(#PC,$04,$10)".

; Messaging: Game Over
@label=Messaging_GameOver
t$646E DEFM "GAMEOVER" ; #FONT#(:(#STR(#PC,$03,$08)))$6253,attr=$06(game-over)

; Messaging: Instructions
;
; Used by the routine at #R$6B99.
@label=Messaging_Instructions
t$6476 DEFM "INSTRUCTIONS"         ; #FONT#(:(#STR(#PC,$03,$0C)))$6253,attr=$06(instructions)
@label=Messaging_Left
 $6482 DEFM "LEFT    - CAPS SHIFT" ; #FONT#(:(#STR(#PC,$03,$14)))$6253,attr=$43(left)
@label=Messaging_Right
 $6496 DEFM "RIGHT   - Z"          ; #FONT#(:(#STR(#PC,$03,$0B)))$6253,attr=$43(right)
@label=Messaging_Fire
 $64A1 DEFM "FIRE    - SPACE"      ; #FONT#(:(#STR(#PC,$03,$0F)))$6253,attr=$43(fire)
@label=Messaging_Barrier
 $64B0 DEFM "BARRIER - ENTER"      ; #FONT#(:(#STR(#PC,$03,$0F)))$6253,attr=$43(barrier)
@label=Messaging_Level
 $64BF DEFM "SELECT LEVEL   1-5"   ; #FONT#(:(#STR(#PC,$03,$12)))$6253,attr=$07(level)

; Messaging: "Select Joystick Or Keys"
;
; Used by the routine at #R$6B4F.
@label=Messaging_SelectJoystickOrKeys
t$64D1 DEFM "SELECT JOYSTICK OR KEYS" ; #FONT#(:(#STR(#PC,$03,$17)))$6253,attr=$06(joystick-or-keys)
@label=Messaging_KempstonJoystick
 $64E8 DEFM "K - Kempston stick"      ; #FONT#(:(#STR(#PC,$03,$12)))$3D00,attr=$03(kempston-joystick)
@label=Messaging_AGFJoystick
 $64FA DEFM "A - AGF stick"           ; #FONT#(:(#STR(#PC,$03,$0D)))$3D00,attr=$03(agf-joystick)
@label=Messaging_Keyboard
 $6507 DEFM "B - keyboard"            ; #FONT#(:(#STR(#PC,$03,$0C)))$3D00,attr=$03(keyboard)
 $6513 DEFM $00

; Messaging: Header
@label=Messaging_Score
t$6514 DEFM "000000" ; #FONT#(:(#STR($6514,$03,$06)))$6253,attr=$06(player-score)
@label=Messaging_Header_HighScore
 $651A DEFM "HIGH "  ; #FONT#(:(#STR($651A,$03,$0B)))$6253,attr=$06(high-score)
; This isn't separate, it's part of the above.
@label=Messaging_HighScore
 $651F DEFM "000000" ; #FONT#(:(#STR($651F,$03,$06)))$6253,attr=$06(player-high-score)
@label=Messaging_Header_Level
 $6525 DEFM " L"     ; #FONT#(:(#STR($6525,$03,$03)))$6253,attr=$44(level-in-game)
; This isn't separate, it's part of the above.
@label=Messaging_Header_LevelNumber
 $6527 DEFM "1"      ; #FONT#(:(#STR($6527,$03,$01)))$6253,attr=$44(level-number)

; Score Buffer
@label=ScoreBuffer
g$6528 DEFB $30
 $6529 DEFB $30
 $652A DEFB $30
 $652B DEFB $30
 $652C DEFB $30
 $652D DEFB $30
 $652E DEFB $30,$20,$3A,$20,$3B,$3C,$3D,$3E
 $6536 DEFB $3F,$40

; Table: Mothership UDGs
@label=Table_MothershipUDGs
g$6538 DEFB $15,$16                         ; #UDGTABLE { #UDGS$02,$01(mothership-01)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$05)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
 $653A DEFB $17,$18                         ; #UDGTABLE { #UDGS$02,$01(mothership-02)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$05)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
 $653C DEFB $19,$1A                         ; #UDGTABLE { #UDGS$02,$01(mothership-03)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$06)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
 $653E DEFB $20,$20,$20                     ; #UDGTABLE { #UDGS$03,$01(mothership-04)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$32)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
@label=Table_Mothership_Top
 $6541 DEFB $1B,$1C                         ; #UDGTABLE { #UDGS$02,$01(mothership-05)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$32)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
 $6543 DEFB $20,$20,$20                     ; #UDGTABLE { #UDGS$03,$01(mothership-06)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$32)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
 $6546 DEFB $1D,$1E                         ; #UDGTABLE { #UDGS$02,$01(mothership-07)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$06)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
 $6548 DEFB $21                             ; #UDGTABLE {
                                            ; #UDG(#PC,$06)(mothership-08) }
                                            ; TABLE#
 $6549 DEFB $20,$20,$20,$20                 ; #UDGTABLE { #UDGS$04,$01(mothership-09)(
                                            ;   #UDG($6153+$08*(#PEEK(#PC+$x)),$06)(*udg)
                                            ;   udg
                                            ; ) } TABLE#
 $654D DEFB $2B                             ; #UDGTABLE {
                                            ; #UDG(#PC,$06)(mothership-10) }
                                            ; TABLE#
 $654E DEFB $20,$20,$2B,$20,$20,$20,$20,$28
 $6556 DEFB $21,$20,$20,$1F,$1F,$1F,$1F,$20
 $655E DEFB $20,$1F,$1F,$1F,$1F,$20,$20,$28
 $6566 DEFB $2E,$20,$20,$2E,$20,$20,$2E,$20
 $656E DEFB $20,$2E,$20,$20,$2E,$20,$20,$2E
 $6576 DEFB $20,$20,$22,$23,$24,$25,$26,$27
 $657E DEFB $2F,$2F,$2F,$2F,$2F,$2F,$27,$14
 $6586 DEFB $2C,$2B,$2A,$29

; Table: "PHEENIX" Logo Position Data
@label=Table_PheenixLogoPositionData
g$658A DEFB $21      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $658B DEFB $41      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $658C DEFB $61      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $658D DEFB $81      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $658E DEFB $A1      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $658F DEFB $C1      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6590 DEFB $E0      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6591 DEFB $E1      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6592 DEFB $E2      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6593 DEFB $00      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6594 DEFB $01      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6595 DEFB $02      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6596 DEFB $03      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6597 DEFB $04      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6598 DEFB $05      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $6599 DEFB $26      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $659A DEFB $46      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $659B DEFB $65      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $659C DEFB $64      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $659D DEFB $63      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $659E DEFB $62      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $659F DEFB $67      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A0 DEFB $87      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A1 DEFB $A7      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A2 DEFB $C7      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A3 DEFB $E7      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A4 DEFB $A8      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A5 DEFB $A9      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A6 DEFB $6A      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A7 DEFB $8A      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A8 DEFB $AA      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65A9 DEFB $CA      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65AA DEFB $EA      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65AB DEFB $6E      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65AC DEFB $6D      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65AD DEFB $6C      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65AE DEFB $8C      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65AF DEFB $AC      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B0 DEFB $CC      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B1 DEFB $EC      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B2 DEFB $ED      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B3 DEFB $EE      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B4 DEFB $AD      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B5 DEFB $AD      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B6 DEFB $AD      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B7 DEFB $72      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B8 DEFB $71      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65B9 DEFB $70      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65BA DEFB $90      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65BB DEFB $B0      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65BC DEFB $D0      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65BD DEFB $F0      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65BE DEFB $F1      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65BF DEFB $F2      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C0 DEFB $B1      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C1 DEFB $74      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C2 DEFB $94      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C3 DEFB $B4      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C4 DEFB $D4      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C5 DEFB $F4      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C6 DEFB $75      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C7 DEFB $76      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C8 DEFB $96      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65C9 DEFB $B6      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65CA DEFB $D6      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65CB DEFB $F6      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65CC DEFB $78      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65CD DEFB $98      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65CE DEFB $B8      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65CF DEFB $D8      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D0 DEFB $F8      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D1 DEFB $38      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D2 DEFB $7A      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D3 DEFB $9B      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D4 DEFB $BC      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D5 DEFB $DD      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D6 DEFB $FE      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D7 DEFB $7E      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D8 DEFB $9D      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65D9 DEFB $DB      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).
 $65DA DEFB $FA      ; Screen buffer address #N(#PC-$658A):
                     ; #N($4800+#PEEK(#PC)).

; Random Number Seed
;
; Used by the routine at #R$670E.
@label=RandomNumberSeed
g$65DB DEFW $0000

; Data block at 65DD
w$65DD DEFW $48A0
 $65DF DEFW $48BD
 $65E1 DEFW $48BD
 $65E3 DEFW $4860
 $65E5 DEFW $485D
 $65E7 DEFW $487D
 $65E9 DEFW $4820
 $65EB DEFW $483D
 $65ED DEFW $40E0
 $65EF DEFW $40FD
 $65F1 DEFW $40FD
 $65F3 DEFW $40A0
 $65F5 DEFW $40BD
 $65F7 DEFW $4060
 $65F9 DEFW $407D
 $65FB DEFW $48A0
 $65FD DEFW $48BD
 $65FF DEFW $48BD
 $6601 DEFW $4860
 $6603 DEFW $485D
 $6605 DEFW $487D
 $6607 DEFW $4820
 $6609 DEFW $483D
 $660B DEFW $40E0
 $660D DEFW $40FD
 $660F DEFW $40FD
 $6611 DEFW $40A0
 $6613 DEFW $40BD
 $6615 DEFW $4060
 $6617 DEFW $407D

; Game status buffer entry at 6619
g$6619 DEFB $FD,$48,$C0,$48,$DD,$48,$9D,$48
 $6621 DEFB $60,$48,$60,$48,$7D,$48,$7D,$48
 $6629 DEFB $20,$48,$3D,$48,$3D,$48,$DD,$40
 $6631 DEFB $60,$40,$7D,$40,$7D,$40

; Game status buffer entry at 6637
g$6637 DEFB $82,$40,$5B,$C0,$01,$48,$DC,$C0
 $663F DEFB $80,$48,$5D,$C8,$FF,$4F,$DE,$C8
 $6647 DEFB $3D,$48,$20,$48,$FD,$40,$E0,$40
 $664F DEFB $BD,$40,$A0,$40,$7D,$40,$60,$40
 $6657 DEFB $AB,$AF,$B3,$69,$4F,$75,$27,$37
 $665F DEFB $E5,$EF,$F9,$A7,$B7,$69,$75,$EF
 $6667 DEFB $C3,$DB,$8F,$6C,$65,$72,$79,$29
 $666F DEFB $2F,$35,$CF,$6B,$6F,$73,$3B,$22
 $6677 DEFB $F9,$E4,$B7,$A6,$75,$68

; Pheenix Colours
;
; Used by the routine at #R$75B7.
@label=Pheenix_Colour_01
g$667D DEFB $43
@label=Pheenix_Colour_02
 $667E DEFB $06

; Game status buffer entry at 667F
g$667F DEFB $0F

; Game status buffer entry at 6680
g$6680 DEFB $00
 $6681 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6689 DEFB $00,$00,$00,$00,$00,$00
 $668F DEFB $00,$00

; Game status buffer entry at 6691
g$6691 DEFB $00,$00

; Game status buffer entry at 6693
g$6693 DEFB $00,$00

; Game status buffer entry at 6695
g$6695 DEFB $00

; Game status buffer entry at 6696
g$6696 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $669E DEFB $00,$00,$00,$00,$00

; Game status buffer entry at 66A3
g$66A3 DEFB $00

; Game status buffer entry at 66A4
g$66A4 DEFB $00

; Game status buffer entry at 66A5
g$66A5 DEFB $00

; Game status buffer entry at 66A6
g$66A6 DEFB $00

; Game status buffer entry at 66A7
g$66A7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66B7 DEFB $00,$00

; Game status buffer entry at 66B9
g$66B9 DEFB $00

; Game status buffer entry at 66BA
g$66BA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66CA DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66D2 DEFB $00

; Game status buffer entry at 66D3
g$66D3 DEFB $00

; Mothership Animation Counter
;
; Used by the routine at #R$6A23.
@label=MothershipAnimationCounter
g$66D4 DEFB $00

; Game status buffer entry at 66D5
g$66D5 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66DD DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $66E5 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Game status buffer entry at 66ED
g$66ED DEFW $5ACE

; Flag: Extra Life
;
; Indicates whether an extra life should be awarded or not.
@label=Flag_ExtraLife
g$66EF DEFB $01

; Player Lives
@label=Player_Lives
g$66F0 DEFB $05      ; {Life counter.
 $66F1 DEFB $00      ; }

; Flag: Title Screen Start
;
; Indicates the start state while the title screen is showing.
@label=Flag_TitleScreenStart
g$66F2 DEFB $00

; Flag: Demo Mode Active?
@label=Flag_ActiveDemoMode
g$66F3 DEFB $01

; Game status buffer entry at 66F4
g$66F4 DEFB $00

; Flag: Player Lost All Lives?
@label=Flag_GameOver
g$66F5 DEFB $00

; Control Method
;
; #TABLE(default,centre,centre)
; { =h Byte | =h Method }
; { #N$00 | Keyboard }
; { #N$01 | AGF joystick }
; { #N$02 | Kempston joystick }
; TABLE#
@label=ControlMethod
g$66F6 DEFB $00

; Convert Screen Address To Attribute Buffer Address
;
; Used by the routines at #R$676F, #R$70E7, #R$7564, #R$75B7, #R$7616 and
; #R$7B67.
@label=ConvertScreenToAttributeBufferAddress
c$66F7 LD A,D        ; #REGa=#REGd.
 $66F8 AND %00011000 ; Keep only bits 3-4.
 $66FA SRA A         ; {Shift #REGa right three positions (with carry).
 $66FC SRA A         ;
 $66FE SRA A         ; }
 $6700 ADD A,$58     ; #REGa+=#N$58.
 $6702 LD D,A        ; #REGd=#REGa.
 $6703 RET           ; Return.

; Convert Attribute Address To Screen Buffer Address
;
; Used by the routines at #R$6853, #R$68A1, #R$6926, #R$6A23, #R$7069, #R$70E7,
; #R$72C9, #R$7564, #R$75B7, #R$7616, #R$79B2 and #R$7B67.
; .
; Converts an attribute buffer address to its corresponding screen buffer
; address.
;
;   HL Attribute buffer address
; O:HL Screen buffer address
@label=ConvertAttributeToScreenBufferAddress
c$6704 LD A,H        ; Copy the screen address high byte to #REGa.
 $6705 SUB $58       ; Subtract #N$58 (start of attribute area offset).
 $6707 ADD A,A       ; {Multiply by #N$08.
 $6708 ADD A,A       ;
 $6709 ADD A,A       ; }
 $670A ADD A,$40     ; Add #N$40 to set the base attribute area.
 $670C LD H,A        ; Update the high byte of the address.
 $670D RET           ; Return.

; Generate Random Number
;
; Used by the routines at #R$6A23, #R$6CEE, #R$74A4, #R$7616 and #R$7C82.
;
; O:A The random number
@label=GenerateRandomNumber
c$670E PUSH HL       ; {Stash #REGhl and #REGbc on the stack.
 $670F PUSH BC       ; }
 $6710 LD HL,($65DB) ; #REGhl=*#R$65DB.
 $6713 LD B,(HL)     ; Fetch a byte from *#REGhl and store it in #REGb.
 $6714 INC HL        ; Increment the seed pointer by one.
 $6715 LD A,$38      ; {Keep #REGh within #N$00-#N$38.
 $6717 AND H         ;
 $6718 LD H,A        ; }
 $6719 LD A,B        ; Copy the random byte into #REGa.
 $671A LD ($65DB),HL ; Write the updated seed back to *#R$65DB.
 $671D POP BC        ; {Restore #REGbc and #REGhl from the stack.
 $671E POP HL        ; }
 $671F RET           ; Return.

; Clear Screen
;
; Used by the routines at #R$68B8, #R$6B4F, #R$6B99, #R$72C9, #R$74A4 and
; #R$7C82.
@label=ClearScreen
c$6720 LD HL,$5AFF   ; {Clear #N$1B00 bytes of screen and attribute buffer memory by
 $6723 LD DE,$5AFE   ; setting all the bytes to #N$00.
 $6726 LD BC,$1AFF   ;
 $6729 LD (HL),$00   ;
 $672B LDDR          ; }
 $672D RET           ; Return.

; Clear Play-Area
;
; Used by the routine at #R$67F6.
@label=ClearPlayArea
c$672E LD HL,$5820   ; {Clear #N$02E0 bytes of the attribute buffer from #N$5820 to
 $6731 LD DE,$5821   ; #N$5AFF.
 $6734 LD BC,$02DF   ;
 $6737 LD (HL),$00   ;
 $6739 LDIR          ; }
 $673B LD HL,$4800   ; {Clear #N$1000 bytes of the screen buffer from #N$4800
 $673E LD DE,$4801   ; to #N$57FF.
 $6741 LD BC,$0FFF   ;
 $6744 LD (HL),L     ;
 $6745 LDIR          ; }
 $6747 LD HL,$4020   ; {Point #REGhl to screen buffer position #N$4020 and #REGde to screen
 $674A LD DE,$4021   ; buffer position #N$4021.}
 $674D LD B,$07      ; Set a counter in #REGb for #N$07 character rows.
@label=ClearPlayArea_RowLoop
*$674F PUSH BC       ; Save the row counter on the stack.
 $6750 LD B,$08      ; Set a counter in #REGb for #N$08 pixel lines.
@label=ClearPlayArea_LineLoop
*$6752 PUSH BC       ; {Stash the row counter and screen position pointers on
 $6753 PUSH DE       ; the stack.
 $6754 PUSH HL       ; }
 $6755 LD BC,$001F   ; {Clear #N$1F bytes across the line.
 $6758 LD (HL),B     ;
 $6759 LDIR          ; }
 $675B POP HL        ; {Restore the screen position pointers.
 $675C POP DE        ; }
 $675D INC H         ; {Move down one pixel line.
 $675E INC D         ; }
 $675F POP BC        ; {Restore the line counter and loop back to #R$6752
 $6760 DJNZ $6752    ; until all #N$08 lines are cleared.}
 $6762 LD H,$40      ; {Move to the next character row by resetting #REGh and #REGd to #N$40,
 $6764 LD D,H        ; then adding #N$20 to both #REGl and #REGe.
 $6765 LD A,$20      ;
 $6767 ADD A,L       ;
 $6768 LD L,A        ;
 $6769 LD E,A        ;
 $676A INC E         ; }
 $676B POP BC        ; {Restore the row counter and loop back to #R$674F
 $676C DJNZ $674F    ; until all #N$07 rows are cleared.}
 $676E RET           ; Return.

; Print String
;
; Used by the routines at #R$67A9, #R$67F6, #R$6B4F, #R$6B99, #R$6CEE, #R$72C9,
; #R$79B2 and #R$7C82.
;
; B String length
; C Attribute value of string
; DE Screen buffer address
; HL Pointer to string data
@label=Configurable_PrintString
c$676F LD IX,$6153   ; #REGix=#R$6253(#N$6153).
 $6773 JR $677F      ; Jump to #R$677F.
; This entry point is used by the routines at #R$696A, #R$6B4F, #R$79B2 and
; #R$7C82.
@label=SpectrumFont_PrintString
*$6775 LD IX,$3C00   ; #HTML(#REGix=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>.)
 $6779 JR $677F      ; Jump to #R$677F.
; This entry point is used by the routines at #R$696A, #R$6A23 and #R$79B2.
@label=CustomFont_PrintString
*$677B LD IX,$6153   ; #REGix=#R$6253(#N$6153).
@label=PrintString
*$677F PUSH DE       ; {Stash #REGde, #REGbc, #REGbc, #REGde and #REGhl on the
 $6780 PUSH BC       ; stack.
*$6781 PUSH BC       ;
 $6782 PUSH DE       ;
 $6783 PUSH HL       ; }
 $6784 LD L,(HL)     ; {Store the offset for the UDG data look-up in #REGhl.
 $6785 LD H,$00      ; }
 $6787 ADD HL,HL     ; {Multiply #REGhl by #N$08.
 $6788 ADD HL,HL     ;
 $6789 ADD HL,HL     ; }
 $678A PUSH IX       ; {#REGbc=#REGix (using the stack).
 $678C POP BC        ; }
 $678D ADD HL,BC     ; Add #REGbc to #REGhl.
 $678E LD B,$08      ; Set a counter in #REGb for #N$08 rows.
@label=PrintString_Loop
*$6790 LD A,(HL)     ; {Copy one row of graphics data to the screen buffer.
 $6791 LD (DE),A     ; }
 $6792 INC HL        ; Move to the next byte of graphics data.
 $6793 INC D         ; Move down one pixel row.
 $6794 DJNZ $6790    ; Decrease the row counter by one and loop back to #R$6790
                     ; until counter is zero.
 $6796 POP HL        ; {Restore #REGhl and #REGde from the stack.
 $6797 POP DE        ; }
 $6798 INC DE        ; Increment #REGde by one.
 $6799 INC HL        ; Increment #REGhl by one.
 $679A POP BC        ; Restore #REGbc from the stack.
 $679B DJNZ $6781    ; Decrease counter by one and loop back to #R$6781 until
                     ; counter is zero.
 $679D DEC DE        ; Decrease #REGde by one.
 $679E CALL $66F7    ; Call #R$66F7.
 $67A1 POP BC        ; Restore #REGbc from the stack.
 $67A2 LD A,C        ; Fetch the attribute colour.
@label=ColourPrintString_Loop
*$67A3 LD (DE),A     ; Write #REGa to the attribute buffer.
 $67A4 DEC DE        ; Move backwards one attribute block.
 $67A5 DJNZ $67A3    ; Decrease counter by one and loop back to #R$67A3 until
                     ; counter is zero.
 $67A7 POP DE        ; Restore #REGde from the stack.
 $67A8 RET           ; Return.

; Print Score
;
; Used by the routines at #R$67F6, #R$7200 and #R$79B2.
@label=PrintScore
c$67A9 LD DE,$4000   ; Set the screen buffer address to #N$4000.
 $67AC LD HL,$6514   ; Point #REGhl to #R$6514.
 $67AF LD BC,$0607   ; Set the string length to #N$06 characters and the attribute byte to
                     ; #INK$07.
 $67B2 CALL $676F    ; Call #R$676F.
 $67B5 RET           ; Return.

; Handler: Score
;
; Used by the routines at #R$7200, #R$72C9 and #R$79B2.
@label=Handler_Score
c$67B6 LD A,($66F3)  ; {Jump to #R$67C3 if *#R$66F3 is not active.
 $67B9 OR A          ;
 $67BA JR Z,$67C3    ; }
; Demo mode is active, so just reset the score.
 $67BC LD DE,$6528   ; #REGde=#R$6528.
 $67BF LD B,$00      ; #REGb=#N$00.
 $67C1 JR $67DD      ; Jump to #R$67DD.
@label=AddToScore
*$67C3 LD HL,$6519   ; Point #REGhl at #R$6514(#N$6519) (the current score).
 $67C6 LD DE,$652E   ; Point #REGde at #R$6528(#N$652E) (the points to add).
 $67C9 LD B,$06      ; Set a counter in #REGb for #N$06 score digits.
@label=AddToScore_Loop
*$67CB LD A,(DE)     ; {Fetch the points digit and add it to the corresponding
 $67CC ADD A,(HL)    ; score digit.}
 $67CD SUB $30       ; Convert the value from ASCII by subtracing #N$30.
 $67CF CP $3A        ; {Jump to #R$67D8 if #REGa is less than #N$3A.
 $67D1 JR C,$67D8    ; }
 $67D3 SUB $0A       ; #REGa-=#N$0A.
 $67D5 DEC HL        ; Decrease #REGhl by one.
 $67D6 INC (HL)      ; Increment *#REGhl by one.
 $67D7 INC HL        ; Increment #REGhl by one.
@label=AddToScore_Store
*$67D8 LD (HL),A     ; Write #REGa to *#REGhl.
 $67D9 DEC DE        ; Decrease #REGde by one.
 $67DA DEC HL        ; Decrease #REGhl by one.
 $67DB DJNZ $67CB    ; Decrease counter by one and loop back to #R$67CB until
                     ; counter is zero.
@label=Reset_ScoreBuffer
*$67DD PUSH DE       ; {Copy the score buffer pointer to #REGhl (using the
 $67DE POP HL        ; stack).}
 $67DF INC DE        ; Increment the score buffer destination pointer by one.
 $67E0 LD C,$06      ; Set a counter in #REGc for #N$06 score digits.
 $67E2 LD (HL),$30   ; Write #N$30 ("#CHR$30") to the score buffer.
 $67E4 LDIR          ; Copy #N$30 ("#CHR$30") across the remaining five score buffer
                     ; digits.
; Check if the score is at least "10,000".
 $67E6 LD A,($6515)  ; {Return if *#R$6514(#N$6515) is not equal to #N$31
 $67E9 CP $31        ; ("#CHR$31").
 $67EB RET NZ        ; }
 $67EC LD HL,$66EF   ; {Return if #R$66EF says that no extra life should be
 $67EF LD A,(HL)     ; awarded.
 $67F0 OR A          ;
 $67F1 RET Z         ; }
; Award an extra life to the player.
 $67F2 DEC (HL)      ; Reset #R$66EF as an extra life has been "awarded".
 $67F3 INC HL        ; Move to the lives counter at #R$66F0.
 $67F4 INC (HL)      ; Award one extra life.
 $67F5 RET           ; Return.

; Print Header
;
; Used by the routine at #R$72C9.
; .
; #PUSHS #UDGTABLE {
;   #SIM(start=$67F6,stop=$681B)#SCR$02{$00,$00,$200,$10}(header)
; } TABLE# #POPS
@label=PrintHeader
c$67F6 CALL $67A9    ; Call #R$67A9.
; Prints "#FONT#(:(#STR($651A,$03,$0B)))$6253,attr=$06(high-score)".
 $67F9 DEC C         ; Set the print attribute to #INK$06.
 $67FA LD B,$0B      ; Set #REGb for printing #N$0B characters.
 $67FC LD E,$12      ; Update the screen buffer printing position to #N$4012.
 $67FE CALL $676F    ; Call #R$676F.
; Prints "#FONT#(:(#STR($6525,$03,$03)))$6253,attr=$44(header-level)".
 $6801 LD BC,$0344   ; Set #REGb for printing #N$03 characters and the print attribute to
                     ; #COLOUR$44.
 $6804 LD E,$1D      ; Update the screen buffer printing position to #N$401D.
 $6806 CALL $676F    ; Call #R$676F.
 $6809 CALL $681C    ; Call #R$681C.
; Colour the lives icons.
 $680C LD HL,$5806   ; #REGhl=#N$5806 (attribute buffer location).
 $680F LD DE,$5807   ; #REGde=#N$5807 (attribute buffer location).
 $6812 LD C,$0B      ; Set a counter in #REGc for #N$0B characters.
 $6814 LD (HL),$42   ; Write #COLOUR$42 to the attribute buffer.
 $6816 LDIR          ; Copy the attribute byte across the rest of the lives
                     ; icons.
 $6818 CALL $672E    ; Call #R$672E.
 $681B RET           ; Return.

; Print Lives
;
; Used by the routines at #R$67F6, #R$7200, #R$72C9 and #R$79B2.
@label=PrintLives
c$681C LD DE,$4008   ; Set the screen buffer position to #N$4008 (where the life icons
                     ; start being displayed).
 $681F LD A,($66F0)  ; {Load the number of lives from *#R$66F0, subtract one and store the
 $6822 DEC A         ; result in #REGc.
 $6823 LD C,A        ; }
 $6824 LD B,$05      ; Set a counter in #REGb for #N$05 icon positions.
@label=PrintLives_Loop
*$6826 DEC C         ; Decrease the lives counter by one.
 $6827 PUSH BC       ; {Stash the loop counters and screen buffer position on
 $6828 PUSH DE       ; the stack.}
 $6829 LD A,$05      ; {Jump to #R$6833 if the position should show a life
 $682B CP C          ; icon.
 $682C JR NC,$6833   ; }
 $682E LD HL,$613D   ; Point #REGhl to the blank mask graphic at #R$613D.
 $6831 JR $6836      ; Jump to #R$6836.
; Print a "life" icon.
; .
; #UDG($6026,$42)
@label=PrintLifeIcon
*$6833 LD HL,$6026   ; #REGhl=#R$6026.
@label=PrintLives_DrawIcon
*$6836 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=PrintLives_LineLoop
*$6838 LD A,(HL)     ; {Copy the UDG data to the screen buffer.
 $6839 LD (DE),A     ; }
 $683A INC HL        ; Move to the next UDG graphic data byte.
 $683B INC D         ; Move down one pixel line in the screen buffer.
 $683C DJNZ $6838    ; Decrease the line counter by one and loop back to #R$6838 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $683E POP DE        ; Restore the original screen buffer position from the
                     ; stack.
 $683F INC DE        ; {Move right two character blocks, ready for printing the next life
 $6840 INC DE        ; icon.}
 $6841 POP BC        ; Restore the lives counter from the stack.
 $6842 DJNZ $6826    ; Decrease the lives counter by one and loop back to #R$6826 until
                     ; all the remaining lives have an icon displayed in the header.
 $6844 RET           ; Return.

; Routine at 6845
;
; Used by the routine at #R$79B2.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #CLS($47)#SIM(start=$6845,stop=$688F,de=$4000)#SCR$02(dh) }
; TABLE#
; #POPS
c$6845 LD HL,$613D   ; #REGhl=#R$613D.
 $6848 LD IX,$0002   ; #REGix=#N($0002,$04,$04).
 $684C JR $685A      ; Jump to #R$685A.

; Routine at 684E
;
; Used by the routine at #R$79B2.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #CLS($07)#SIM(start=$684E,stop=$688F,de=$4480)#SCR$02(dgdfdgdh) }
; TABLE#
; #POPS
c$684E LD HL,$606E   ; #REGhl=#R$606E.
 $6851 JR $6856      ; Jump to #R$6856.

; Routine at 6853
;
; Used by the routine at #R$79B2.
;
; .
;
; #PUSHS
; #UDGTABLE
; { #CLS($47)#SIM(start=$6853,stop=$688F,de=$4000)#SCR$02(dgfgdh) }
; TABLE#
; #POPS
c$6853 LD HL,$608E   ; #REGhl=#R$608E.
; This entry point is used by the routine at #R$684E.
*$6856 LD IX,$0200   ; #REGix=#N($0200,$04,$04).
; This entry point is used by the routine at #R$6845.
*$685A PUSH DE       ; Stash #REGde on the stack.
 $685B EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $685C LD B,$02      ; #REGb=#N$02.
*$685E PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $685F PUSH HL       ; }
 $6860 LD B,$02      ; #REGb=#N$02.
*$6862 PUSH BC       ; Stash #REGbc on the stack.
 $6863 LD A,(HL)     ; #REGa=*#REGhl.
 $6864 CP IXl        ; Compare #REGa with the low byte of #REGix.
 $6866 PUSH HL       ; Stash #REGhl on the stack.
 $6867 JR NZ,$6879   ; Jump to #R$6879 if ?? is not equal to #N$00.
 $6869 LD A,IXh      ; #REGa=the high byte of #REGix.
 $686B LD (HL),A     ; Write #REGa to *#REGhl.
 $686C CALL $6704    ; Call #R$6704.
 $686F LD B,$08      ; #REGb=#N$08.
*$6871 LD A,(DE)     ; #REGa=*#REGde.
 $6872 LD (HL),A     ; Write #REGa to *#REGhl.
 $6873 INC H         ; Increment #REGh by one.
 $6874 INC DE        ; Increment #REGde by one.
 $6875 DJNZ $6871    ; Decrease counter by one and loop back to #R$6871 until
                     ; counter is zero.
 $6877 JR $6880      ; Jump to #R$6880.
*$6879 LD HL,$0008   ; #REGhl=#N($0008,$04,$04).
 $687C AND A         ; Set flags.
 $687D ADC HL,DE     ; #REGhl+=#REGde (with carry).
 $687F EX DE,HL      ; Exchange the #REGde and #REGhl registers.
*$6880 POP HL        ; Restore #REGhl from the stack.
 $6881 INC HL        ; Increment #REGhl by one.
 $6882 POP BC        ; Restore #REGbc from the stack.
 $6883 DJNZ $6862    ; Decrease counter by one and loop back to #R$6862 until
                     ; counter is zero.
 $6885 POP HL        ; Restore #REGhl from the stack.
 $6886 LD C,$20      ; #REGc=#N$20.
 $6888 AND A         ; Set flags.
 $6889 ADC HL,BC     ; #REGhl+=#REGbc (with carry).
 $688B POP BC        ; Restore #REGbc from the stack.
 $688C DJNZ $685E    ; Decrease counter by one and loop back to #R$685E until
                     ; counter is zero.
 $688E POP DE        ; Restore #REGde from the stack.
 $688F RET           ; Return.

; Routine at 6890
;
; Used by the routines at #R$7C82 and #R$7DD9.
c$6890 LD A,($6527)  ; {Return if *#R$6527 is equal to #N$35 (ASCII "#CHR$35").
 $6893 CP $35        ;
 $6895 RET Z         ; }
 $6896 PUSH BC       ; Stash #REGbc on the stack.
 $6897 LD BC,$0008   ; #REGbc=#N($0008,$04,$04).
*$689A DJNZ $689A    ; Decrease counter by one and loop back to #R$689A until
                     ; counter is zero.
 $689C DEC C         ; Decrease #REGc by one.
 $689D JR NZ,$689A   ; Jump to #R$689A until #REGc is zero.
 $689F POP BC        ; Restore #REGbc from the stack.
 $68A0 RET           ; Return.

; Print Asterisk
;
; Used by the routine at #R$68B8.
@label=Print_Asterisk
c$68A1 PUSH AF       ; {Stash #REGaf, #REGbc, #REGde and #REGhl on the stack.
 $68A2 PUSH BC       ;
 $68A3 PUSH DE       ;
 $68A4 PUSH HL       ; }
 $68A5 CALL $6704    ; Call #R$6704.
; Point to an asterisk in the ZX Spectrum font UDG data.
 $68A8 LD DE,$3D50   ; #HTML(#REGde=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html#3D50">CHARSET+#N$50</a>.)
 $68AB LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
*$68AD LD A,(DE)     ; {Copy the UDG data to the screen buffer.
 $68AE LD (HL),A     ; }
 $68AF INC H         ; Move down one pixel line in the screen buffer.
 $68B0 INC DE        ; Move to the next UDG graphic data byte.
 $68B1 DJNZ $68AD    ; Decrease the line counter by one and loop back to #R$6962 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $68B3 POP HL        ; {Restore #REGhl, #REGde, #REGbc and #REGaf from the
 $68B4 POP DE        ; stack.
 $68B5 POP BC        ;
 $68B6 POP AF        ; }
 $68B7 RET           ; Return.

; Transition Effect
;
; Used by the routines at #R$72C9, #R$7599 and #R$7C82.
; .
; #PUSHS #UDGTABLE {
;   #CLS$43#SIM(start=$68B8,stop=$6910)#SCR$02(asterisk)
; } TABLE# #POPS
@label=TransitionEffect
c$68B8 LD B,$02      ; #REGb=#N$02.
*$68BA PUSH BC       ; Stash #REGbc on the stack.
 $68BB LD DE,$0109   ; #REGde=#N$0109.
 $68BE LD HL,$596B   ; #REGhl=#N$596B (attribute buffer location).
 $68C1 LD A,B        ; {Compare #REGb with #N$01.
 $68C2 CP $01        ; }
 $68C4 LD A,$00      ; #REGa=#INK$00.
 $68C6 JR Z,$68D3    ; Jump to #R$68D3 if #REGb was equal to #N$01.
 $68C8 LD A,($66F1)  ; #REGa=*#R$66F1.
 $68CB ADD A,$03     ; #REGa+=#N$03.
 $68CD CP $07        ; {Jump to #R$68D3 if #REGa is not equal to #N$07.
 $68CF JR NZ,$68D3   ; }
 $68D1 LD A,$43      ; #REGa=#COLOUR$43.
*$68D3 LD B,$0C      ; #REGb=#N$0C.
*$68D5 PUSH BC       ; Stash #REGbc on the stack.
 $68D6 LD B,E        ; #REGb=#REGe.
*$68D7 LD (HL),A     ; Write #REGa to *#REGhl.
 $68D8 CALL $68A1    ; Call #R$68A1.
 $68DB INC HL        ; Increment #REGhl by one.
 $68DC DJNZ $68D7    ; Decrease counter by one and loop back to #R$68D7 until
                     ; counter is zero.
 $68DE LD B,D        ; #REGb=#REGd.
*$68DF PUSH BC       ; Stash #REGbc on the stack.
 $68E0 LD (HL),A     ; Write #REGa to *#REGhl.
 $68E1 CALL $68A1    ; Call #R$68A1.
 $68E4 LD BC,$0020   ; {#REGhl+=#N($0020,$04,$04).
 $68E7 ADD HL,BC     ; }
 $68E8 POP BC        ; Restore #REGbc from the stack.
 $68E9 DJNZ $68DF    ; Decrease counter by one and loop back to #R$68DF until
                     ; counter is zero.
 $68EB LD B,E        ; #REGb=#REGe.
*$68EC LD (HL),A     ; Write #REGa to *#REGhl.
 $68ED CALL $68A1    ; Call #R$68A1.
 $68F0 DEC HL        ; Decrease #REGhl by one.
 $68F1 DJNZ $68EC    ; Decrease counter by one and loop back to #R$68EC until
                     ; counter is zero.
 $68F3 LD B,D        ; #REGb=#REGd.
*$68F4 PUSH BC       ; Stash #REGbc on the stack.
 $68F5 LD (HL),A     ; Write #REGa to *#REGhl.
 $68F6 CALL $68A1    ; Call #R$68A1.
 $68F9 LD BC,$0020   ; {#REGhl-=#N($0020,$04,$04).
 $68FC AND A         ;
 $68FD SBC HL,BC     ; }
 $68FF POP BC        ; Restore #REGbc from the stack.
 $6900 DJNZ $68F4    ; Decrease counter by one and loop back to #R$68F4 until
                     ; counter is zero.
 $6902 LD C,$21      ; #REGc=#N$21.
 $6904 SBC HL,BC     ; #REGhl-=#REGbc.
 $6906 INC E         ; {Increment #REGe by two.
 $6907 INC E         ; }
 $6908 INC D         ; {Increment #REGd by two.
 $6909 INC D         ; }
 $690A PUSH AF       ; Stash #REGaf on the stack.
 $690B LD BC,$000A   ; #REGbc=#N($000A,$04,$04).
*$690E DJNZ $690E    ; Decrease counter by one and loop back to #R$690E until
                     ; counter is zero.
 $6910 DEC C         ; Decrease #REGc by one.
 $6911 JR NZ,$690E   ; Jump to #R$690E if #REGc is not equal to #REGa.
 $6913 POP AF        ; {Restore #REGaf and #REGbc from the stack.
 $6914 POP BC        ; }
 $6915 DJNZ $68D5    ; Decrease counter by one and loop back to #R$68D5 until
                     ; counter is zero.
 $6917 LD BC,$0032   ; #REGbc=#N($0032,$04,$04).
*$691A DJNZ $691A    ; Decrease counter by one and loop back to #R$691A until
                     ; counter is zero.
 $691C DEC C         ; Decrease #REGc by one.
 $691D JR NZ,$691A   ; Jump to #R$691A until #REGc is zero.
 $691F POP BC        ; Restore #REGbc from the stack.
 $6920 DJNZ $68BA    ; Decrease counter by one and loop back to #R$68BA until
                     ; counter is zero.
 $6922 CALL $6720    ; Call #R$6720.
 $6925 RET           ; Return.

; Routine at 6926
;
; Used by the routine at #R$6CEE.
c$6926 PUSH BC       ; Stash #REGbc on the stack.
 $6927 LD A,($66A5)  ; #REGa=*#R$66A5.
 $692A DEC A         ; Decrease #REGa by one.
 $692B XOR %11111111 ; Flip bits 0-7.
 $692D AND %00111000 ; Keep only bits 3-5.
 $692F SRA A         ; {Shift #REGa right (with carry).
 $6931 SRA A         ;
 $6933 SRA A         ; }
 $6935 ADD A,$40     ; #REGa+=#N$40.
 $6937 LD B,A        ; #REGb=#REGa.
 $6938 LD A,IXl      ;
 $693A CP $02        ; Compare #REGa with #N$02.
 $693C JR Z,$6942    ; Jump to #R$6942 if #REGa is equal to #N$02.
 $693E LD A,$40      ; #REGa=#N$40.
 $6940 JR $6943      ; Jump to #R$6943.
*$6942 LD A,B        ; #REGa=#REGb.
*$6943 LD (HL),A     ; Write #REGa to *#REGhl.
 $6944 CALL $6704    ; Call #R$6704.
 $6947 PUSH HL       ; Stash #REGhl on the stack.
 $6948 LD A,($66A3)  ; #REGa=*#R$66A3.
 $694B LD H,$00      ; #REGh=#N$00.
 $694D LD L,A        ; #REGl=#REGa.
 $694E ADD HL,HL     ; {Multiply #REGhl by #N$08.
 $694F ADD HL,HL     ;
 $6950 ADD HL,HL     ; }
 $6951 LD DE,$61A3   ; {#REGhl+=#R$61A3.
 $6954 ADD HL,DE     ; }
 $6955 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $6956 POP HL        ; Restore #REGhl from the stack.
 $6957 INC A         ; Increment #REGa by one.
 $6958 CP $03        ; {Jump to #R$695D if #REGa is not equal to #N$03.
 $695A JR NZ,$695D   ; }
 $695C XOR A         ; #REGa=#N$00.
*$695D LD ($66A3),A  ; Write #REGa to *#R$66A3.
 $6960 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
*$6962 LD A,(DE)     ; {Copy the UDG data to the screen buffer.
 $6963 LD (HL),A     ; }
 $6964 INC H         ; Move down one pixel line in the screen buffer.
 $6965 INC DE        ; Move to the next UDG graphic data byte.
 $6966 DJNZ $6962    ; Decrease the line counter by one and loop back to #R$6962 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $6968 POP BC        ; Restore #REGbc from the stack.
 $6969 RET           ; Return.

; Draw Alien Mothership
;
; Used by the routine at #R$72C9.
; .
; #PUSHS #UDGTABLE {
;   #CLS($05) #SIM(start=$696A,stop=$6A22)#SCR$02(mothership)
; } TABLE# #POPS
@label=Draw_AlienMothership
c$696A LD HL,$6538   ; {Call #R$677B using #R$6538; printing #N$02 characters
 $696D LD DE,$408F   ; in #INK$05.
 $6970 LD BC,$0205   ;
 $6973 CALL $677B    ; }
 $6976 LD E,$AF      ; {Call #R$677B using #R$653A; printing #N$02 characters
 $6978 LD B,$02      ; in #INK$05.
 $697A CALL $677B    ; }
 $697D LD E,$CA      ; {Call #R$677B using #R$653C; printing #N$02 characters
 $697F LD BC,$0206   ; in #INK$06.
 $6982 CALL $677B    ; }
 $6985 LD E,$CC      ; {Call #R$677B using #R$653E; printing #N$08 characters
 $6987 LD BC,$0832   ; in #COLOUR$32.
 $698A CALL $677B    ; }
 $698D LD E,$D4      ; {Call #R$677B using #R$6546; printing #N$02 characters
 $698F LD BC,$0206   ; in #INK$06.
 $6992 CALL $677B    ; }
 $6995 LD E,$E9      ; {Call #R$677B using #R$6548; printing #N$01 character in
 $6997 INC B         ; #INK$06.
 $6998 CALL $677B    ; }
 $699B INC E         ; Increment #REGe by one.
 $699C LD BC,$0C31   ; #REGbc=#N$0C31.
 $699F CALL $6775    ; Call #R$6775.
 $69A2 LD E,$F6      ; #REGe=#N$F6.
 $69A4 LD BC,$0106   ; #REGbc=#N$0106.
 $69A7 CALL $677B    ; Call #R$677B.
 $69AA LD DE,$4808   ; #REGde=#N$4808 (screen buffer location).
 $69AD INC B         ; Increment #REGb by one.
 $69AE CALL $677B    ; Call #R$677B.
 $69B1 INC E         ; Increment #REGe by one.
 $69B2 LD BC,$0E31   ; #REGbc=#N$0E31.
 $69B5 CALL $677B    ; Call #R$677B.
 $69B8 LD E,$17      ; #REGe=#N$17.
 $69BA LD BC,$0106   ; #REGbc=#N$0106.
 $69BD CALL $677B    ; Call #R$677B.
 $69C0 LD E,$27      ; #REGe=#N$27.
 $69C2 LD BC,$120F   ; #REGbc=#N$120F.
 $69C5 CALL $677B    ; Call #R$677B.
 $69C8 LD E,$47      ; #REGe=#N$47.
 $69CA LD BC,$0102   ; #REGbc=#N$0102.
 $69CD CALL $677B    ; Call #R$677B.
 $69D0 INC B         ; Increment #REGb by one.
 $69D1 LD E,$68      ; #REGe=#N$68.
 $69D3 CALL $677B    ; Call #R$677B.
 $69D6 LD E,$89      ; #REGe=#N$89.
 $69D8 LD B,$02      ; #REGb=#N$02.
 $69DA CALL $677B    ; Call #R$677B.
 $69DD LD E,$AB      ; #REGe=#N$AB.
 $69DF LD B,$0A      ; #REGb=#N$0A.
 $69E1 CALL $677B    ; Call #R$677B.
 $69E4 LD E,$95      ; #REGe=#N$95.
 $69E6 LD B,$02      ; #REGb=#N$02.
 $69E8 CALL $677B    ; Call #R$677B.
 $69EB LD E,$77      ; #REGe=#N$77.
 $69ED INC B         ; Increment #REGb by one.
 $69EE CALL $677B    ; Call #R$677B.
 $69F1 LD E,$58      ; #REGe=#N$58.
 $69F3 INC B         ; Increment #REGb by one.
 $69F4 CALL $677B    ; Call #R$677B.
 $69F7 LD HL,$0404   ; {Write #N$0404 to *#N$58EF (attribute buffer location).
 $69FA LD ($58EF),HL ; }
 $69FD LD HL,$4242   ; {Write #N$4242 to *#N$590F (attribute buffer location).
 $6A00 LD ($590F),HL ; }
 $6A03 LD A,$10      ; #REGa=#COLOUR$10.
 $6A05 LD HL,$5948   ; #REGhl=#N$5948 (attribute buffer location).
 $6A08 LD DE,$5949   ; #REGde=#N$5949 (attribute buffer location).
 $6A0B LD (HL),A     ; Write #REGa to *#REGhl.
 $6A0C LD C,$0F      ; #REGc=#N$0F.
 $6A0E LDIR          ; LDIR.
 $6A10 LD L,$69      ; #REGl=#N$69.
 $6A12 LD E,$6A      ; #REGe=#N$6A.
 $6A14 LD (HL),A     ; Write #REGa to *#REGhl.
 $6A15 LD C,$0D      ; #REGc=#N$0D.
 $6A17 LDIR          ; LDIR.
 $6A19 LD L,$8A      ; #REGl=#N$8A.
 $6A1B LD E,$8B      ; #REGe=#N$8B.
 $6A1D LD (HL),A     ; Write #REGa to *#REGhl.
 $6A1E LD C,$0B      ; #REGc=#N$0B.
 $6A20 LDIR          ; LDIR.
 $6A22 RET           ; Return.

; Handler: Mothership
;
; Used by the routine at #R$7616.
;
; .
;
; Prints the top part of the alien mothership:
; #UDGTABLE { #UDGS$02,$01(mothership-05)(
;   #UDG($6153+$08*(#PEEK(#PC+$x)),$32)(*udg)
;   udg
; ) } TABLE#
@label=Handler_Mothership
c$6A23 LD DE,$40CF   ; #REGde=#N$40CF (screen buffer location).
 $6A26 PUSH DE       ; Stash #REGde on the stack.
 $6A27 LD HL,$6541   ; #REGhl=#R$6541.
 $6A2A LD BC,$0232   ; Set to print #N$02 characters in #COLOUR$32.
 $6A2D CALL $677B    ; Call #R$677B.
 $6A30 POP HL        ; Restore #REGhl from the stack.
 $6A31 LD A,($66D4)  ; #REGa=*#R$66D4.
 $6A34 PUSH AF       ; Stash #REGaf on the stack.
 $6A35 SRA A         ; Shift #REGa right (with carry).
 $6A37 AND %00000111 ; Keep only bits 0-2.
 $6A39 XOR %00000111 ; Flip bits 0-2.
 $6A3B ADD A,H       ; #REGa+=#REGh.
 $6A3C LD H,A        ; #REGh=#REGa.
 $6A3D LD (HL),$03   ; Write #N$03 to *#REGhl.
 $6A3F INC HL        ; Increment #REGhl by one.
 $6A40 LD (HL),$C0   ; Write #N$C0 to *#REGhl.
 $6A42 POP AF        ; Restore #REGaf from the stack.
 $6A43 AND %00000011 ; Keep only bits 0-1.
 $6A45 JR NZ,$6A69   ; Jump to #R$6A69 if #REGhl is not equal to #N$00.
 $6A47 LD HL,$4837   ; #REGhl=#N$4837 (screen buffer location).
 $6A4A LD DE,$4838   ; #REGde=#N$4838 (screen buffer location).
 $6A4D LD B,$08      ; #REGb=#N$08.
*$6A4F PUSH BC       ; Stash #REGbc on the stack.
 $6A50 LD A,(DE)     ; #REGa=*#REGde.
 $6A51 PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $6A52 PUSH DE       ; }
 $6A53 LD BC,$0011   ; #REGbc=#N($0011,$04,$04).
 $6A56 LDDR          ; LDDR.
 $6A58 LD (DE),A     ; Write #REGa to *#REGde.
 $6A59 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $6A5A POP HL        ; }
 $6A5B INC H         ; Increment #REGh by one.
 $6A5C INC D         ; Increment #REGd by one.
 $6A5D POP BC        ; Restore #REGbc from the stack.
 $6A5E DJNZ $6A4F    ; Decrease counter by one and loop back to #R$6A4F until
                     ; counter is zero.
 $6A60 LD D,$59      ; #REGd=#N$59.
 $6A62 LD H,D        ; #REGh=#REGd.
 $6A63 LD C,$11      ; #REGc=#N$11.
 $6A65 LD A,(DE)     ; #REGa=*#REGde.
 $6A66 LDDR          ; LDDR.
 $6A68 LD (DE),A     ; Write #REGa to *#REGde.
; Update mothership animation counter.
@label=Handler_Mothership_UpdateCounter
*$6A69 LD HL,$66D4   ; #REGhl=#R$66D4.
 $6A6C LD A,(HL)     ; Fetch the counter and store it in #REGa.
 $6A6D INC (HL)      ; Increment *#R$66D4 by one.
 $6A6E AND %00001111 ; {Only animate the alien every 16th frame (when bits 0-3 are all
 $6A70 JR NZ,$6A99   ; zero) else jump to #R$6A99.}
; Draw the mothership alien in one of its two frames. Note; it is a 2x2
; sprite.
; .
; This is the 16th frame, now toggle between the two frames of the alien
; sprite.
 $6A72 BIT 4,(HL)    ; Test bit 4 of the counter.
 $6A74 LD HL,$5FD4   ; #REGhl=#R$5FD4.
 $6A77 JR Z,$6A7C    ; Jump to #R$6A7C if bit 4 isn't set.
 $6A79 LD HL,$5FF4   ; #REGhl=#R$5FF4.
@label=Handler_Mothership_DrawAlien
*$6A7C LD DE,$40EF   ; #REGde=#N$40EF (screen buffer location).
 $6A7F LD B,$02      ; Set a counter in #REGb for #N$02 rows.
@label=Handler_Mothership_RowLoop
*$6A81 PUSH BC       ; Stash the row counter on the stack.
 $6A82 LD B,$02      ; Set a counter in #REGb for #N$02 columns.
@label=Handler_Mothership_ColumnLoop
*$6A84 PUSH BC       ; {Stash the column counter and screen buffer pointer on
 $6A85 PUSH DE       ; the stack.}
 $6A86 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=Handler_Mothership_LineLoop
*$6A88 LD A,(HL)     ; {Copy the UDG data to the screen buffer.
 $6A89 LD (DE),A     ; }
 $6A8A INC D         ; Move down one pixel line in the screen buffer.
 $6A8B INC HL        ; Move to the next UDG graphic data byte.
 $6A8C DJNZ $6A88    ; Decrease the line counter by one and loop back to #R$6A88 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $6A8E POP DE        ; Restore the original screen buffer pointer from the
                     ; stack.
 $6A8F INC DE        ; Move right one character block.
 $6A90 POP BC        ; Restore the column counter from the stack.
 $6A91 DJNZ $6A84    ; Decrease the column counter by one and loop back to #R$6A84 until
                     ; both UDGs have been drawn in this row.
 $6A93 LD DE,$480F   ; #REGde=#N$480F (screen buffer location).
 $6A96 POP BC        ; Restore the row counter from the stack.
 $6A97 DJNZ $6A81    ; Decrease the row counter by one and loop back to #R$6A81 until both
                     ; rows have finished being drawn and the alien is complete.
@label=Handler_Mothership_ProcessBullets
*$6A99 LD A,($6695)  ; {Return if *#R$6695 is not zero.
 $6A9C OR A          ;
 $6A9D RET NZ        ; }
 $6A9E LD HL,$0003   ; #REGhl=#N($0003,$04,$04).
*$6AA1 PUSH HL       ; Stash #REGhl on the stack.
 $6AA2 PUSH HL       ; {#REGix=#REGhl (using the stack).
 $6AA3 POP IX        ; }
 $6AA5 LD BC,$66BA   ; {Multiply #REGhl by #N$02 and add #R$66BA.
 $6AA8 ADD HL,HL     ;
 $6AA9 ADD HL,BC     ; }
 $6AAA PUSH HL       ; Stash #REGhl on the stack.
 $6AAB LD E,(HL)     ; #REGe=*#REGhl.
 $6AAC INC HL        ; Increment #REGhl by one.
 $6AAD LD D,(HL)     ; #REGd=*#REGhl.
 $6AAE LD A,D        ; #REGa=#REGd.
 $6AAF EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $6AB0 OR A          ; {Jump to #R$6AC9 if #REGa is not zero.
 $6AB1 JR NZ,$6AC9   ; }
 $6AB3 CALL $670E    ; Call #R$670E.
 $6AB6 AND %00001111 ; Keep only bits 0-3.
 $6AB8 OR A          ; {Jump to #R$6AC0 if #REGa is not zero.
 $6AB9 JR NZ,$6AC0   ; }
 $6ABB LD HL,$594F   ; #REGhl=#N$594F (attribute buffer location).
 $6ABE JR $6AF2      ; Jump to #R$6AF2.
*$6AC0 CP $03        ; {Jump to #R$6B25 if #REGa is not equal to #N$03.
 $6AC2 JR NZ,$6B25   ; }
 $6AC4 LD HL,$5950   ; #REGhl=#N$5950 (attribute buffer location).
 $6AC7 JR $6AF2      ; Jump to #R$6AF2.
*$6AC9 LD A,(HL)     ; #REGa=*#REGhl.
 $6ACA AND %01000111 ; Keep only bits 0-2, 6.
 $6ACC CP $06        ; {Jump to #R$6AE0 if #REGa is not equal to #N$06.
 $6ACE JR NZ,$6AE0   ; }
 $6AD0 LD A,(HL)     ; #REGa=*#REGhl.
 $6AD1 AND %11111000 ; Keep only bits 3-7.
 $6AD3 LD (HL),A     ; Write #REGa to *#REGhl.
 $6AD4 PUSH HL       ; Stash #REGhl on the stack.
 $6AD5 CALL $6704    ; Call #R$6704.
 $6AD8 LD B,$08      ; #REGb=#N$08.
 $6ADA XOR A         ; {Write #N$00 to *#REGhl.
*$6ADB LD (HL),A     ; }
 $6ADC INC H         ; Increment #REGh by one.
 $6ADD DJNZ $6ADB    ; Decrease counter by one and loop back to #R$6ADB until
                     ; counter is zero.
 $6ADF POP HL        ; Restore #REGhl from the stack.
*$6AE0 LD BC,$0020   ; {#REGhl+=#N($0020,$04,$04).
 $6AE3 ADD HL,BC     ; }
 $6AE4 PUSH HL       ; Stash #REGhl on the stack.
 $6AE5 LD BC,$5AFF   ; #REGbc=#N$5AFF (attribute buffer location).
 $6AE8 AND A         ; {#REGhl-=#REGbc.
 $6AE9 SBC HL,BC     ; }
 $6AEB POP HL        ; Restore #REGhl from the stack.
 $6AEC JR C,$6AF2    ; Jump to #R$6AF2 if #REGh is less than #REGa.
*$6AEE LD H,$00      ; #REGh=#N$00.
 $6AF0 JR $6B25      ; Jump to #R$6B25.
@label=Mothership_Bullet_Collision
*$6AF2 LD A,(HL)     ; {Jump to #R$6B25 if *#REGhl is equal to #INK$02.
 $6AF3 CP $02        ;
 $6AF5 JR Z,$6B25    ; }
 $6AF7 CP $46        ; {Jump to #R$6B05 if *#REGhl is not equal to #COLOUR$46.
 $6AF9 JR NZ,$6B05   ; }
 $6AFB LD A,($6693)  ; {Jump to #R$6AEE if *#R$6693 is not zero.
 $6AFE OR A          ;
 $6AFF JR NZ,$6AEE   ; }
 $6B01 LD (HL),$06   ; Write #INK$06 to *#REGhl.
 $6B03 JR $6B0D      ; Jump to #R$6B0D.
*$6B05 AND %00000111 ; Keep only bits 0-2.
 $6B07 JR NZ,$6AEE   ; Jump to #R$6AEE if #REGa is not equal to #REGa.
 $6B09 LD A,(HL)     ; #REGa=*#REGhl.
 $6B0A ADD A,$06     ; #REGa+=#N$06.
 $6B0C LD (HL),A     ; Write #REGa to *#REGhl.
*$6B0D PUSH HL       ; Stash #REGhl on the stack.
 $6B0E CALL $6704    ; Call #R$6704.
 $6B11 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $6B12 LD BC,$6026   ; #REGbc=#R$6026.
 $6B15 PUSH IX       ; {#REGhl=#REGix (using the stack).
 $6B17 POP HL        ; }
 $6B18 ADD HL,HL     ; {Multiply #REGhl by #N$08.
 $6B19 ADD HL,HL     ;
 $6B1A ADD HL,HL     ; }
 $6B1B ADD HL,BC     ; #REGhl+=#REGbc.
 $6B1C LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
*$6B1E LD A,(HL)     ; {Copy the UDG data to the screen buffer.
 $6B1F LD (DE),A     ; }
 $6B20 INC D         ; Move down one pixel line in the screen buffer.
 $6B21 INC HL        ; Move to the next UDG graphic data byte.
 $6B22 DJNZ $6B1E    ; Decrease the line counter by one and loop back to #R$6B1E until all
                     ; #N$08 lines of the UDG character have been drawn.
 $6B24 POP HL        ; Restore the attribute position from the stack.
@label=Handler_Mothership_SaveBulletPosition
*$6B25 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $6B26 POP HL        ; Restore the bullet position table from the stack.
 $6B27 LD (HL),E     ; {Save the current bullet position to the table.
 $6B28 INC HL        ;
 $6B29 LD (HL),D     ;
 $6B2A INC HL        ; }
 $6B2B POP HL        ; Restore the bullet index from the stack.
 $6B2C DEC L         ; Decrease the bullet index by one.
 $6B2D JP NZ,$6AA1   ; Jump back to #R$6AA1 until there are no more bullets left to
                     ; process.
 $6B30 RET           ; Return.

; Fill Screen With UDG
;
; Used by the routine at #R$72C9.
; .
; #PUSHS #CLS($45)#SIM(start=$7323,stop=$6B35)
; #UDGTABLE(default,centre,centre) { =h Loop Index | =h Screen Output }
;   #FOR$01,$03(x,{ #Nx | #SIM(start=$6B35,stop=$6B4A)#SCR$01(fill-x) })
; TABLE# #POPS
;
; DE Pointer to UDG graphic data
@label=FillScreenWithUDG
c$6B31 LD HL,$4000   ; Point #REGhl to the start of the screen buffer
                     ; (#N$4000).
 $6B34 LD B,L        ; #REGb=#REGl.
; Draw one character block.
@label=FillScreenWithUDG_Loop
*$6B35 PUSH BC       ; {Stash the position counter, screen address and graphic pointer on
 $6B36 PUSH HL       ; the stack.
 $6B37 PUSH DE       ; }
 $6B38 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=FillScreenWithUDG_LineLoop
*$6B3A LD A,(DE)     ; {Copy the UDG data to the screen buffer.
 $6B3B LD (HL),A     ; }
 $6B3C INC H         ; Move down one pixel line in the screen buffer.
 $6B3D INC DE        ; Move to the next UDG graphic data byte.
 $6B3E DJNZ $6B3A    ; Decrease the line counter by one and loop back to #R$6B3A until all
                     ; #N$08 lines of the UDG character have been drawn.
; Move to the next character position in the row.
 $6B40 POP DE        ; {Restore the graphic pointer and original screen address from the
 $6B41 POP HL        ; stack.}
 $6B42 INC HL        ; Move right one character block.
 $6B43 POP BC        ; Restore the position counter from the stack.
 $6B44 DJNZ $6B35    ; Decrease the position counter by one and loop back to #R$6B35 until
                     ; the current screen third is filled with the sprite.
; Move to the next screen third.
 $6B46 LD A,H        ; {Add #N$07 to #REGh to move down to the next screen
 $6B47 ADD A,$07     ; third.
 $6B49 LD H,A        ; }
 $6B4A CP $58        ; {Jump back to #R$6B35 until #REGhl reaches the attribute buffer at
 $6B4C JR NZ,$6B35   ; #N$5800.}
 $6B4E RET           ; Return.

; Print Control Menu
;
; Used by the routine at #R$7DD9.
; .
; #PUSHS #UDGTABLE {
;   #SIM(start=$6B4F,stop=$6B75)#SCR$02(menu)
; } TABLE# #POPS
@label=Print_ControlMenu
c$6B4F CALL $6720    ; Call #R$6720.
; Print "Select Joystick Or Keys".
 $6B52 LD HL,$64D1   ; {Call #R$676F using #R$64D1; printing #N$17 characters
 $6B55 LD DE,$40C4   ; in #INK06.
 $6B58 LD BC,$1706   ;
 $6B5B CALL $676F    ; }
; Print "K - Kempston Stick".
 $6B5E LD DE,$4847   ; {Call #R$6775 using #R$64E8; printing #N$12 characters in
 $6B61 LD BC,$1243   ; #COLOUR$43.
 $6B64 CALL $6775    ; }
; Print "A - AGF Stick".
 $6B67 LD E,$87      ; {Call #R$6775 using #R$64FA; printing #N$0D characters.
 $6B69 LD B,$0D      ;
 $6B6B CALL $6775    ; }
; Print "B - Keyboard".
 $6B6E LD E,$C7      ; {Call #R$6775 using #R$6507; printing #N$0C characters.
 $6B70 LD B,$0C      ;
 $6B72 CALL $6775    ; }
; Has the player selected to use a Kempston joystick?
@label=ControlMenu_Input_Kempston
*$6B75 LD A,$BF      ; {Read from the keyboard;
 $6B77 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$BF | ENTER | L | K | J | H }
                     ; TABLE#}
 $6B79 BIT 2,A       ; {Jump to #R$6B81 if "K" wasn't pressed.
 $6B7B JR NZ,$6B81   ; }
 $6B7D LD A,$02      ; Set #REGa to Kempston joystick controls (#N$02).
 $6B7F JR $6B96      ; Jump to #R$6B96.
; Has the player selected to use an AGF joystick?
@label=ControlMenu_Input_AGF
*$6B81 LD A,$FD      ; {Read from the keyboard;
 $6B83 IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FD | A | S | D | F | G }
                     ; TABLE#}
 $6B85 BIT 0,A       ; {Jump to #R$6B8D if "A" wasn't pressed.
 $6B87 JR NZ,$6B8D   ; }
 $6B89 LD A,$01      ; Set #REGa to AGF joystick controls (#N$01).
 $6B8B JR $6B96      ; Jump to #R$6B96.
; Has the player selected to use the keyboard?
@label=ControlMenu_Input_Keyboard
*$6B8D LD A,$7F      ; {Read from the keyboard;
 $6B8F IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7F | SPACE | FULL-STOP | M | N | B }
                     ; TABLE#}
 $6B91 BIT 4,A       ; {Jump back to #R$6B75 if "B" wasn't pressed.
 $6B93 JR NZ,$6B75   ; }
 $6B95 XOR A         ; Set #REGa to keyboard controls (#N$00).
@label=SetControlMethod
*$6B96 LD ($66F6),A  ; Write #REGa to *#R$66F6.
; Continue on to #R$6B99.

; Print Instructions Menu
;
; #PUSHS #UDGTABLE {
;   #SIM(start=$6B99,stop=$6BD8)#SCR$02(instructions)
; } TABLE# #POPS
@label=Print_InstructionsMenu
c$6B99 CALL $6720    ; Call #R$6720.
 $6B9C LD A,($66F6)  ; {Jump to #R$6BCC if *#R$66F6 is a joystick method.
 $6B9F OR A          ;
 $6BA0 JR NZ,$6BCC   ; }
; The player has selected to use the keyboard, so remind them what the
; keys are.
; .
; Print "Instructions".
 $6BA2 LD HL,$6476   ; {Call #R$676F using #R$6476; printing #N$0C characters
 $6BA5 LD DE,$40A9   ; in #INK06.
 $6BA8 LD BC,$0C06   ;
 $6BAB CALL $676F    ; }
; Print "Left".
 $6BAE LD DE,$4807   ; {Call #R$676F using #R$6482; printing #N$14 characters in
 $6BB1 LD BC,$1443   ; #COLOUR$43.
 $6BB4 CALL $676F    ; }
; Print "Right".
 $6BB7 LD E,$47      ; {Call #R$676F using #R$6496; printing #N$0B characters.
 $6BB9 LD B,$0B      ;
 $6BBB CALL $676F    ; }
; Print "Fire".
 $6BBE LD E,$87      ; {Call #R$676F using #R$64A1; printing #N$0F characters.
 $6BC0 LD B,$0F      ;
 $6BC2 CALL $676F    ; }
; Print "Barrier".
 $6BC5 LD E,$C7      ; {Call #R$676F using #R$64B0; printing #N$0F characters.
 $6BC7 LD B,$0F      ;
 $6BC9 CALL $676F    ; }
; Print "Select Level".
@label=Input_SelectLevel
*$6BCC LD HL,$64BF   ; {Call #R$676F using #R$64BF; printing #N$12 characters
 $6BCF LD DE,$5087   ; in #INK07.
 $6BD2 LD BC,$1207   ;
 $6BD5 CALL $676F    ; }
; Read keyboard input to select level 1-5.
@label=Input_SelectLevel_Loop
*$6BD8 DI            ; Disable interrupts.
 $6BD9 LD A,$F7      ; {Read from the keyboard;
 $6BDB IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#}
 $6BDD XOR %11111111 ; Flip the bits.
 $6BDF AND %00011111 ; Keep only bits 0-4 (the key states).
 $6BE1 JR Z,$6BD8    ; Jump to #R$6BD8 if no keys were pressed.
 $6BE3 LD C,$31      ; Start a count in #REGc starting at #N$31 (ASCII
                     ; "#CHR$31").
 $6BE5 BIT 0,A       ; {Jump to #R$6BFD if bit 0 of #REGa was set (key "1"
 $6BE7 JR NZ,$6BFD   ; pressed).}
 $6BE9 INC C         ; Increment #REGc by one (ASCII "#CHR$32").
 $6BEA BIT 1,A       ; {Jump to #R$6BFD if bit 1 of #REGa was set (key "2"
 $6BEC JR NZ,$6BFD   ; pressed).}
 $6BEE INC C         ; Increment #REGc by one (ASCII "#CHR$33").
 $6BEF BIT 2,A       ; {Jump to #R$6BFD if bit 2 of #REGa was set (key "3"
 $6BF1 JR NZ,$6BFD   ; pressed).}
 $6BF3 INC C         ; Increment #REGc by one (ASCII "#CHR$34").
 $6BF4 BIT 3,A       ; {Jump to #R$6BFD if bit 3 of #REGa was set (key "4"
 $6BF6 JR NZ,$6BFD   ; pressed).}
 $6BF8 INC C         ; Increment #REGc by one (ASCII "#CHR$35").
 $6BF9 BIT 4,A       ; {Jump to #R$6BD8 if bit 4 of #REGa was set (key "5"
 $6BFB JR Z,$6BD8    ; pressed).}
@label=Input_SelectLevel_Store
*$6BFD LD HL,$6527   ; {Write #REGc to *#R$6527.
 $6C00 LD (HL),C     ; }
 $6C01 LD A,C        ; {Convert the ASCII digit to a numeric value by, subtracting #N$30,
 $6C02 SUB $30       ; multiply by #N$02, and subtracting the result from #N$0A, e.g.
 $6C04 ADD A,A       ; #TABLE(default,centre,centre)
 $6C05 LD C,A        ; { =h ASCII | =h Byte | =h Result }
 $6C06 LD A,$0A      ; #FOR$31,$35(x,{ "#CHRx" | #Nx | #EVAL($0A-((x-$30)*$02)) })
 $6C08 SUB C         ; TABLE#
 $6C09 LD ($6898),A  ;
                     ; Write the result to *#R$6897(#N$6898).}
 $6C0C RET           ; Return.

; Data block at 6C0D
b$6C0D DEFB $00,$00,$00,$00,$00,$00

; Table: Music Data
;
; See #R$74A4.
; .
; #HTML(#AUDIO(intro.wav)(#INCLUDE(Intro)))
@label=Table_MusicData
g$6C13 DEFB $84,$01,$64
 $6C16 DEFB $84,$01,$64
 $6C19 DEFB $84,$01,$64
 $6C1C DEFB $84,$01,$64
 $6C1F DEFB $B8,$01,$4B
 $6C22 DEFB $F1,$01,$32
 $6C25 DEFB $F1,$01,$32
 $6C28 DEFB $10,$02,$20
 $6C2B DEFB $55,$02,$00
 $6C2E DEFB $55,$02,$00
 $6C31 DEFB $F1,$01,$32
 $6C34 DEFB $84,$01,$64
 $6C37 DEFB $1A,$01,$FF
 $6C3A DEFB $1A,$01,$FF
 $6C3D DEFB $1A,$01,$FF
 $6C40 DEFB $1A,$01,$FF
 $6C43 DEFB $40,$01,$C8
 $6C46 DEFB $6B,$01,$82
 $6C49 DEFB $6B,$01,$82
 $6C4C DEFB $84,$01,$64
 $6C4F DEFB $B8,$01,$4B
 $6C52 DEFB $B8,$01,$4B
 $6C55 DEFB $84,$01,$64
 $6C58 DEFB $6B,$01,$82
 $6C5B DEFB $84,$01,$64
 $6C5E DEFB $6B,$01,$82
 $6C61 DEFB $84,$01,$64
 $6C64 DEFB $2C,$01,$F0
 $6C67 DEFB $6B,$01,$82
 $6C6A DEFB $84,$01,$64
 $6C6D DEFB $84,$01,$64
 $6C70 DEFB $B8,$01,$4B
 $6C73 DEFB $F1,$01,$32
 $6C76 DEFB $F1,$01,$32
 $6C79 DEFB $10,$02,$20
 $6C7C DEFB $55,$02,$00
 $6C7F DEFB $10,$02,$20
 $6C82 DEFB $10,$02,$20
 $6C85 DEFB $10,$02,$20
 $6C88 DEFB $10,$02,$20
 $6C8B DEFB $F1,$01,$32
 $6C8E DEFB $10,$02,$20
 $6C91 DEFB $55,$02,$00
 $6C94 DEFB $F1,$01,$32
 $6C97 DEFB $84,$01,$64
 $6C9A DEFB $1A,$01,$FF

; Routine at 6C9D
;
; Used by the routine at #R$6CEE.
c$6C9D LD A,($6693)  ; {Return if *#R$6693 is not zero.
 $6CA0 OR A          ;
 $6CA1 RET NZ        ; }
 $6CA2 LD HL,($66ED) ; #REGhl=*#R$66ED.
 $6CA5 LD B,$02      ; #REGb=#N$02.
*$6CA7 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $6CA8 PUSH HL       ; }
 $6CA9 LD B,$03      ; #REGb=#N$03.
*$6CAB LD A,(HL)     ; #REGa=*#REGhl.
 $6CAC OR A          ; {Jump to #R$6CBF if #REGa is zero.
 $6CAD JR Z,$6CBF    ; }
 $6CAF CP $46        ; {Jump to #R$6CBF if #REGa is equal to #N$46.
 $6CB1 JR Z,$6CBF    ; }
 $6CB3 CP $07        ; {Jump to #R$6CBF if #REGa is equal to #N$07.
 $6CB5 JR Z,$6CBF    ; }
; See #POKE#immunity(Immunity).
 $6CB7 LD A,$01      ; {Write #N$01 to *#R$66A4.
 $6CB9 LD ($66A4),A  ; }
 $6CBC POP AF        ; {Restore #REGaf and #REGaf from the stack.
 $6CBD POP AF        ; }
 $6CBE RET           ; Return.
*$6CBF INC HL        ; Increment #REGhl by one.
 $6CC0 DJNZ $6CAB    ; Decrease counter by one and loop back to #R$6CAB until
                     ; counter is zero.
 $6CC2 POP HL        ; Restore #REGhl from the stack.
 $6CC3 SET 5,L       ; Set bit 5 of #REGl.
 $6CC5 POP BC        ; Restore #REGbc from the stack.
 $6CC6 DJNZ $6CA7    ; Decrease counter by one and loop back to #R$6CA7 until
                     ; counter is zero.
 $6CC8 RET           ; Return.

; Draw Ship
;
; Used by the routine at #R$72C9.
; .
; #PUSHS #POKES$66F3,$00;$74EF,$00;$74F0,$00;$74F1,$00
; #SIM(start=$74A4,stop=$74B9) #UDGTABLE {
;   #SIM(start=$72C9,stop=$6FDB)#SCR$02(ship)
; } TABLE# #POPS
@label=DrawShip
c$6CC9 LD HL,$604E   ; Point #REGhl to the ship graphic: #R$604E.
 $6CCC LD DE,$50CF   ; Set the screen buffer location #N$50CF.
 $6CCF LD B,$02      ; Set a counter in #REGb for #N$02 rows.
@label=DrawShip_RowLoop
*$6CD1 PUSH BC       ; Stash the row counter on the stack.
 $6CD2 LD B,$02      ; And a counter in #REGc for #N$02 columns.
@label=DrawShip_ColumnLoop
*$6CD4 PUSH BC       ; {Stash the column counter and the screen position on the
 $6CD5 PUSH DE       ; stack.}
 $6CD6 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=DrawShip_LineLoop
*$6CD8 LD A,(HL)     ; {Copy the UDG data to the screen buffer.
 $6CD9 LD (DE),A     ; }
 $6CDA INC HL        ; Move to the next UDG graphic data byte.
 $6CDB INC D         ; Move down one pixel line in the screen buffer.
 $6CDC DJNZ $6CD8    ; Decrease the line counter by one and loop back to #R$6CD8 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $6CDE POP DE        ; Restore the starting screen position from the stack.
 $6CDF INC DE        ; Increment #REGde by one.
 $6CE0 POP BC        ; Restore the column counter from the stack.
 $6CE1 DJNZ $6CD4    ; Decrease the column counter by one and loop back to #R$6CD4 until
                     ; both columns have been drawn to the screen buffer.
 $6CE3 LD DE,$50EF   ; Update the screen buffer pointer in #REGde to #N$50EF.
 $6CE6 POP BC        ; Restore the row counter from the stack.
 $6CE7 DJNZ $6CD1    ; Decrease the row counter by one and loop back to #R$6CD1 until both
                     ; rows have been drawn to the screen buffer.
 $6CE9 LD L,$CE      ; #REGl=#N$CE.
 $6CEB JP $6F93      ; Jump to #R$6F93.

; Routine at 6CEE
;
; Used by the routines at #R$7C82 and #R$7DD9.
c$6CEE LD HL,$66A4   ; #REGhl=#R$66A4.
 $6CF1 LD A,(HL)     ; #REGa=*#REGhl.
 $6CF2 OR A          ; {Jump to #R$6DCF if #REGa is zero.
 $6CF3 JP Z,$6DCF    ; }
 $6CF6 INC HL        ; Increment #REGhl by one.
 $6CF7 LD A,(HL)     ; #REGa=*#REGhl.
 $6CF8 CP $40        ; {Jump to #R$6D00 if #REGa is not equal to #N$40.
 $6CFA JR NZ,$6D00   ; }
 $6CFC DEC HL        ; Decrease #REGhl by one.
 $6CFD LD (HL),$02   ; Write #N$02 to *#REGhl.
 $6CFF RET           ; Return.
@label=GameOver
*$6D00 LD A,($6695)  ; {Jump to #R$7030 if *#R$6695 is not zero.
 $6D03 OR A          ;
 $6D04 JP NZ,$7030   ; }
 $6D07 LD A,($66F0)  ; {Jump to #R$6D29 if *#R$66F0 is not equal to #N$01.
 $6D0A CP $01        ;
 $6D0C JR NZ,$6D29   ; }
 $6D0E LD A,($66F3)  ; {Jump to #R$6D29 if *#R$66F3 is set.
 $6D11 OR A          ;
 $6D12 JR NZ,$6D29   ; }
 $6D14 PUSH HL       ; Stash #REGhl on the stack.
; Prints #FONT#(:(#STR($646E,$03,$04)))$3D00,attr=$45(game)
 $6D15 LD HL,$646E   ; #REGhl=#R$646E.
 $6D18 LD DE,$48CB   ; #REGde=#N$48CB (screen buffer location).
 $6D1B LD BC,$0445   ; Set to print #N$04 characters in #COLOUR$45.
 $6D1E CALL $676F    ; Call #R$676F.
; Prints #FONT#(:(#STR($6472,$03,$04)))$3D00,attr=$45(over)
 $6D21 LD E,$D1      ; Update the screen buffer address.
 $6D23 LD B,$04      ; Set to print #N$04 characters.
 $6D25 CALL $676F    ; Call #R$676F.
 $6D28 POP HL        ;
*$6D29 LD A,(HL)     ;
 $6D2A AND $07       ;
 $6D2C BIT 3,(HL)    ;
 $6D2E JR NZ,$6D31   ;
 $6D30 INC A         ;
*$6D31 INC (HL)      ;
 $6D32 INC (HL)      ;
 $6D33 LD C,A        ;
 $6D34 LD B,$00      ;
 $6D36 LD IX,$0002   ;
*$6D3A PUSH BC       ;
 $6D3B LD HL,($66ED) ;
 $6D3E LD DE,$0021   ;
 $6D41 ADD HL,DE     ;
 $6D42 LD (HL),D     ;
 $6D43 PUSH HL       ;
 $6D44 LD A,L        ;
 $6D45 AND $1F       ;
 $6D47 SUB C         ;
 $6D48 PUSH AF       ;
 $6D49 AND A         ;
 $6D4A SBC HL,BC     ;
 $6D4C POP AF        ;
 $6D4D CALL NC,$6926 ;
 $6D50 POP HL        ;
 $6D51 PUSH HL       ;
 $6D52 LD A,L        ;
 $6D53 AND $1F       ;
 $6D55 ADD A,C       ;
 $6D56 CP $20        ;
 $6D58 PUSH AF       ;
 $6D59 ADD HL,BC     ;
 $6D5A POP AF        ;
 $6D5B CALL C,$6926  ;
 $6D5E POP HL        ;
 $6D5F PUSH HL       ;
 $6D60 LD B,C        ;
 $6D61 LD DE,$0020   ;
*$6D64 AND A         ;
 $6D65 SBC HL,DE     ;
 $6D67 DJNZ $6D64    ;
 $6D69 CALL $6926    ;
 $6D6C POP HL        ;
 $6D6D LD A,C        ;
 $6D6E SUB $02       ;
 $6D70 LD B,A        ;
 $6D71 JR C,$6D8A    ;
 $6D73 JR Z,$6D8A    ;
 $6D75 PUSH HL       ;
 $6D76 LD DE,$0021   ;
 $6D79 LD A,L        ;
 $6D7A AND $1F       ;
 $6D7C ADD A,$02     ;
 $6D7E SUB C         ;
 $6D7F PUSH AF       ;
*$6D80 AND A         ;
 $6D81 SBC HL,DE     ;
 $6D83 DJNZ $6D80    ;
 $6D85 POP AF        ;
 $6D86 CALL NC,$6926 ;
 $6D89 POP HL        ;
*$6D8A LD A,C        ;
 $6D8B SUB $02       ;
 $6D8D LD B,A        ;
 $6D8E JR C,$6DA4    ;
 $6D90 JR Z,$6DA4    ;
 $6D92 LD DE,$001F   ;
 $6D95 LD A,L        ;
 $6D96 AND E         ;
 $6D97 ADD A,C       ;
 $6D98 CP $22        ;
 $6D9A PUSH AF       ;
*$6D9B AND A         ;
 $6D9C SBC HL,DE     ;
 $6D9E DJNZ $6D9B    ;
 $6DA0 POP AF        ;
 $6DA1 CALL C,$6926  ;
*$6DA4 POP BC        ;
 $6DA5 INC C         ;
 $6DA6 DEC IXl       ;
 $6DA8 JR NZ,$6D3A   ;
 $6DAA LD A,($66F3)  ;
 $6DAD OR A          ;
 $6DAE JP NZ,$7030   ;
 $6DB1 LD A,($66A5)  ;
 $6DB4 AND $03       ;
 $6DB6 JP NZ,$7030   ;
 $6DB9 LD B,$08      ;
*$6DBB LD A,B        ;
 $6DBC ADD A,$19     ;
 $6DBE AND $18       ;
 $6DC0 DI            ;
 $6DC1 OUT ($FE),A   ;
 $6DC3 PUSH BC       ;
*$6DC4 DJNZ $6DC4    ;
 $6DC6 POP BC        ;
 $6DC7 DJNZ $6DBB    ;
 $6DC9 XOR A         ;
 $6DCA OUT ($FE),A   ;
 $6DCC JP $7030      ;
*$6DCF CALL $6C9D    ;
 $6DD2 LD A,($66ED)  ;
 $6DD5 PUSH AF       ;
 $6DD6 LD HL,$6694   ;
 $6DD9 LD A,(HL)     ;
 $6DDA OR A          ;
 $6DDB JR Z,$6DE8    ;
 $6DDD DEC (HL)      ;
 $6DDE BIT 7,(HL)    ;
 $6DE0 JR NZ,$6E20   ;
 $6DE2 XOR A         ;
 $6DE3 LD ($6693),A  ;
 $6DE6 JR $6E20      ;
*$6DE8 LD A,($66F3)  ;
 $6DEB OR A          ;
 $6DEC JR Z,$6DF6    ;
 $6DEE CALL $670E    ;
 $6DF1 OR A          ;
 $6DF2 JR Z,$6E1B    ;
 $6DF4 JR $6E20      ;
*$6DF6 LD A,($66F6)  ;
 $6DF9 CP $02        ;
 $6DFB JR NZ,$6E05   ;
 $6DFD IN A,($1F)    ;
 $6DFF AND $04       ;
 $6E01 JR NZ,$6E1B   ;
 $6E03 JR $6E20      ;
*$6E05 CP $01        ;
 $6E07 JR NZ,$6E13   ;
 $6E09 LD A,$EF      ;
 $6E0B IN A,($FE)    ;
 $6E0D BIT 4,A       ;
 $6E0F JR Z,$6E1B    ;
 $6E11 JR $6E20      ;
*$6E13 LD A,$BF      ;
 $6E15 IN A,($FE)    ;
 $6E17 AND $01       ;
 $6E19 JR NZ,$6E20   ;
*$6E1B LD (HL),$FF   ;
 $6E1D DEC HL        ;
 $6E1E LD (HL),$01   ;
*$6E20 LD A,($6693)  ;
 $6E23 OR A          ;
 $6E24 JP Z,$6EF8    ;
 $6E27 LD A,($66F3)  ;
 $6E2A OR A          ;
 $6E2B JR NZ,$6E40   ;
 $6E2D LD A,($6694)  ;
 $6E30 AND $07       ;
 $6E32 ADD A,A       ;
 $6E33 ADD A,A       ;
 $6E34 LD HL,$00DE   ;
 $6E37 LD D,H        ;
 $6E38 LD E,A        ;
 $6E39 ADD HL,DE     ;
 $6E3A LD E,$04      ;
 $6E3C CALL $03B5    ;
 $6E3F DI            ;
*$6E40 LD HL,($66ED) ;
 $6E43 LD H,$52      ;
 $6E45 LD B,$02      ;
 $6E47 LD A,($66A6)  ;
 $6E4A PUSH AF       ;
*$6E4B OR A          ;
 $6E4C LD DE,$0000   ;
 $6E4F JR NZ,$6E62   ;
 $6E51 LD A,($6694)  ;
 $6E54 BIT 2,A       ;
 $6E56 JR Z,$6E62    ;
 $6E58 LD DE,$0136   ;
 $6E5B LD A,B        ;
 $6E5C CP $01        ;
 $6E5E JR NZ,$6E62   ;
 $6E60 LD D,$80      ;
*$6E62 LD ($6E87),DE ;
 $6E66 LD ($6E9A),DE ;
 $6E6A POP AF        ;
 $6E6B INC A         ;
 $6E6C PUSH BC       ;
 $6E6D LD B,A        ;
 $6E6E PUSH HL       ;
 $6E6F LD HL,$6E86   ;
 $6E72 LD A,($6694)  ;
 $6E75 BIT 2,A       ;
 $6E77 LD A,$7E      ;
 $6E79 JR Z,$6E7D    ;
 $6E7B ADD A,$40     ;
*$6E7D ADD A,$08     ;
 $6E7F DJNZ $6E7D    ;
 $6E81 LD (HL),A     ;
 $6E82 POP HL        ;
 $6E83 LD B,$06      ;
*$6E85 SET 0,(HL)    ;
 $6E87 LD (HL),$01   ;
 $6E89 INC H         ;
 $6E8A DJNZ $6E85    ;
 $6E8C LD A,($6E86)  ;
 $6E8F LD ($6E99),A  ;
 $6E92 SET 5,L       ;
 $6E94 LD H,$50      ;
 $6E96 LD B,$08      ;
*$6E98 SET 0,(HL)    ;
 $6E9A LD (HL),$01   ;
 $6E9C INC H         ;
 $6E9D DJNZ $6E98    ;
 $6E9F LD HL,($66ED) ;
 $6EA2 LD H,$52      ;
 $6EA4 INC L         ;
 $6EA5 INC L         ;
 $6EA6 POP BC        ;
 $6EA7 LD A,($66A6)  ;
 $6EAA PUSH AF       ;
 $6EAB SUB $07       ;
 $6EAD DJNZ $6E4B    ;
 $6EAF POP AF        ;
 $6EB0 LD A,($6694)  ;
 $6EB3 BIT 2,A       ;
 $6EB5 LD HL,$6014   ;
 $6EB8 JR Z,$6EBD    ;
 $6EBA LD HL,$601D   ;
*$6EBD LD DE,$617B   ;
 $6EC0 LD C,$09      ;
 $6EC2 LDIR          ;
 $6EC4 LD A,($66A6)  ;
 $6EC7 OR A          ;
 $6EC8 JR Z,$6EE1    ;
 $6ECA LD B,A        ;
*$6ECB PUSH BC       ;
 $6ECC LD HL,$617B   ;
 $6ECF LD B,$09      ;
*$6ED1 SLA (HL)      ;
 $6ED3 INC HL        ;
 $6ED4 BIT 7,(HL)    ;
 $6ED6 DEC HL        ;
 $6ED7 JR Z,$6EDB    ;
 $6ED9 SET 0,(HL)    ;
*$6EDB INC HL        ;
 $6EDC DJNZ $6ED1    ;
 $6EDE POP BC        ;
 $6EDF DJNZ $6ECB    ;
*$6EE1 LD DE,($66ED) ;
 $6EE5 LD D,$50      ;
 $6EE7 LD HL,$617B   ;
 $6EEA LD B,$03      ;
*$6EEC PUSH BC       ;
 $6EED PUSH DE       ;
 $6EEE LD BC,$0003   ;
 $6EF1 LDIR          ;
 $6EF3 POP DE        ;
 $6EF4 INC D         ;
 $6EF5 POP BC        ;
 $6EF6 DJNZ $6EEC    ;
*$6EF8 LD H,$50      ;
 $6EFA LD A,($66F3)  ;
 $6EFD OR A          ;
 $6EFE JR Z,$6F05    ;
 $6F00 LD A,($66F4)  ;
 $6F03 JR $6F37      ;
*$6F05 DI            ;
 $6F06 LD A,($66F6)  ;
 $6F09 CP $02        ;
 $6F0B JR NZ,$6F1C   ;
 $6F0D IN A,($1F)    ;
 $6F0F AND $03       ;
 $6F11 CP $02        ;
 $6F13 JR Z,$6F43    ;
 $6F15 CP $01        ;
 $6F17 JP Z,$6FDD    ;
 $6F1A JR $6F40      ;
*$6F1C CP $01        ;
 $6F1E JR NZ,$6F33   ;
 $6F20 LD A,$F7      ;
 $6F22 IN A,($FE)    ;
 $6F24 BIT 4,A       ;
 $6F26 JR Z,$6F43    ;
 $6F28 LD A,$EF      ;
 $6F2A IN A,($FE)    ;
 $6F2C BIT 2,A       ;
 $6F2E JP Z,$6FDD    ;
 $6F31 JR $6F40      ;
*$6F33 LD A,$FE      ;
 $6F35 IN A,($FE)    ;
*$6F37 BIT 0,A       ;
 $6F39 JR Z,$6F43    ;
 $6F3B BIT 1,A       ;
 $6F3D JP Z,$6FDD    ;
*$6F40 POP AF        ;
 $6F41 JR $6F93      ;
*$6F43 POP AF        ;
 $6F44 CP $C0        ;
 $6F46 JR NZ,$6F52   ;
 $6F48 LD A,($66A6)  ;
 $6F4B CP $03        ;
 $6F4D JR Z,$6F93    ;
 $6F4F LD A,($66ED)  ;
*$6F52 LD L,A        ;
 $6F53 LD B,$02      ;
*$6F55 PUSH BC       ;
 $6F56 PUSH HL       ;
 $6F57 LD B,$08      ;
*$6F59 PUSH BC       ;
 $6F5A PUSH HL       ;
 $6F5B LD B,$03      ;
*$6F5D SLA (HL)      ;
 $6F5F INC HL        ;
 $6F60 BIT 7,(HL)    ;
 $6F62 DEC HL        ;
 $6F63 JR Z,$6F67    ;
 $6F65 SET 0,(HL)    ;
*$6F67 INC HL        ;
 $6F68 DJNZ $6F5D    ;
 $6F6A DEC HL        ;
 $6F6B RES 0,(HL)    ;
 $6F6D POP HL        ;
 $6F6E INC H         ;
 $6F6F POP BC        ;
 $6F70 DJNZ $6F59    ;
 $6F72 POP HL        ;
 $6F73 SET 5,L       ;
 $6F75 POP BC        ;
 $6F76 DJNZ $6F55    ;
 $6F78 LD A,($66A6)  ;
 $6F7B CP $07        ;
 $6F7D JR Z,$6F82    ;
 $6F7F INC A         ;
 $6F80 JR $6F83      ;
*$6F82 XOR A         ;
*$6F83 LD ($66A6),A  ;
 $6F86 OR A          ;
 $6F87 LD A,($66ED)  ;
 $6F8A JR NZ,$6F8D   ;
 $6F8C DEC A         ;
*$6F8D LD ($66ED),A  ;
 $6F90 CALL $6C9D    ;
; This entry point is used by the routine at #R$6CC9.
*$6F93 LD A,($66A4)  ;
 $6F96 OR A          ;
 $6F97 JP NZ,$7030   ;
 $6F9A LD HL,($66ED) ;
 $6F9D LD A,($6693)  ;
 $6FA0 OR A          ;
 $6FA1 JR Z,$6FAE    ;
 $6FA3 LD A,($6694)  ;
 $6FA6 BIT 2,A       ;
 $6FA8 JR Z,$6FAE    ;
 $6FAA LD A,$07      ;
 $6FAC JR $6FB0      ;
*$6FAE LD A,$46      ; #REGa=#COLOUR$46.
*$6FB0 LD B,$02      ;
*$6FB2 PUSH BC       ;
 $6FB3 PUSH HL       ;
 $6FB4 DEC L         ;
 $6FB5 PUSH AF       ;
 $6FB6 CP $46        ;
 $6FB8 JR Z,$6FBE    ;
 $6FBA CP $07        ;
 $6FBC JR NZ,$6FC0   ;
*$6FBE LD (HL),$00   ;
*$6FC0 POP AF        ;
 $6FC1 INC L         ;
 $6FC2 LD B,$03      ;
*$6FC4 LD (HL),A     ;
 $6FC5 INC HL        ;
 $6FC6 DJNZ $6FC4    ;
 $6FC8 PUSH AF       ;
 $6FC9 LD A,(HL)     ;
 $6FCA CP $46        ;
 $6FCC JR Z,$6FD2    ;
 $6FCE CP $07        ;
 $6FD0 JR NZ,$6FD4   ;
*$6FD2 LD (HL),$00   ;
*$6FD4 POP AF        ;
 $6FD5 POP HL        ;
 $6FD6 SET 5,L       ;
 $6FD8 POP BC        ;
 $6FD9 DJNZ $6FB2    ;
 $6FDB JR $7030      ;
*$6FDD POP AF        ;
 $6FDE CP $DD        ;
 $6FE0 LD A,($66A6)  ;
 $6FE3 JR NZ,$6FE8   ;
 $6FE5 OR A          ;
 $6FE6 JR Z,$6F93    ;
*$6FE8 OR A          ;
 $6FE9 JR Z,$6FEE    ;
 $6FEB DEC A         ;
 $6FEC JR $6FF0      ;
*$6FEE LD A,$07      ;
*$6FF0 LD ($66A6),A  ;
 $6FF3 CP $07        ;
 $6FF5 LD A,($66ED)  ;
 $6FF8 JR NZ,$6FFE   ;
 $6FFA INC A         ;
 $6FFB LD ($66ED),A  ;
*$6FFE PUSH AF       ;
 $6FFF ADD A,$02     ;
 $7001 LD L,A        ;
 $7002 LD B,$02      ;
*$7004 PUSH BC       ;
 $7005 PUSH HL       ;
 $7006 LD B,$08      ;
*$7008 PUSH BC       ;
 $7009 PUSH HL       ;
 $700A LD B,$03      ;
*$700C SRL (HL)      ;
 $700E DEC HL        ;
 $700F BIT 0,(HL)    ;
 $7011 RES 0,(HL)    ;
 $7013 INC HL        ;
 $7014 JR Z,$7018    ;
 $7016 SET 7,(HL)    ;
*$7018 DEC HL        ;
 $7019 DJNZ $700C    ;
 $701B INC HL        ;
 $701C RES 7,(HL)    ;
 $701E POP HL        ;
 $701F INC H         ;
 $7020 POP BC        ;
 $7021 DJNZ $7008    ;
 $7023 POP HL        ;
 $7024 SET 5,L       ;
 $7026 POP BC        ;
 $7027 DJNZ $7004    ;
 $7029 POP AF        ;
 $702A CALL $6C9D    ;
 $702D JP $6F93      ;
*$7030 LD HL,$6695   ;
 $7033 LD A,(HL)     ;
 $7034 CP $03        ;
 $7036 JR NZ,$703A   ;
 $7038 LD (HL),$FF   ;
*$703A INC (HL)      ;
 $703B LD HL,$6697   ;
 $703E LD B,$01      ;
; This entry point is used by the routine at #R$70E7.
*$7040 PUSH HL       ;
 $7041 PUSH BC       ;
 $7042 LD E,(HL)     ;
 $7043 INC HL        ;
 $7044 LD D,(HL)     ;
 $7045 LD A,D        ;
 $7046 OR D          ;
 $7047 JP NZ,$70E7   ;
 $704A LD A,($66A4)  ;
 $704D OR A          ;
 $704E JP NZ,$714E   ;
 $7051 LD A,($6693)  ;
 $7054 OR A          ;
 $7055 JP NZ,$714E   ;
 $7058 LD A,($6696)  ;
 $705B LD C,A        ;
 $705C LD A,($66F3)  ;
 $705F OR A          ;
 $7060 JR Z,$7069    ;
 $7062 CALL $670E    ;
 $7065 AND $0F       ;
 $7067 JR $7085      ;

; Routine at 7069
;
; Used by the routine at #R$6CEE.
c$7069 DI            ; Disable interrupts.
; Check if the control method is the Kempson joystick?
 $706A LD A,($66F6)  ; {Jump to #R$7077 if *#R$66F6 is not the Kempston
 $706D CP $02        ; joystick.
 $706F JR NZ,$7077   ; }
; The control method is Kempston joystick, so test the fire button.
 $7071 IN A,($1F)    ; #REGa=read from the Kempston joystick port.
 $7073 AND %00010000 ; Keep only bit 4 (the fire button input).
 $7075 JR $708A      ; Jump to #R$708A.
; Check if the control method is the AGF joystick?
@label=Player_Input_AGF
*$7077 CP $01        ; {Jump to #R$707F if *#R$66F6 is not the AGF joystick.
 $7079 JR NZ,$707F   ; }
 $707B LD A,$EF      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#
 $707D JR $7081      ; Jump to #R$7081.
; Else, the only control option left is the keyboard.
@label=Player_Input_Keyboard
*$707F LD A,$7F      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7F | SPACE | FULL-STOP | M | N | B }
                     ; TABLE#
*$7081 IN A,($FE)    ; Read from the keyboard.
 $7083 AND %00000001 ; Keep only bit 0.
; This entry point is used by the routine at #R$6CEE.
*$7085 LD A,$10      ; #REGa=#N$10.
 $7087 JR Z,$708A    ; Jump to #R$708A if ?? is equal to #N$10.
 $7089 XOR A         ; #REGa=#N$00.
*$708A LD ($6696),A  ; Write #REGa to *#R$6696.
 $708D CP C          ; {Jump to #R$714E if #REGa is equal to #REGc.
 $708E JP Z,$714E    ; }
 $7091 OR A          ; {Jump to #R$714E if #REGa is zero.
 $7092 JP Z,$714E    ; }
 $7095 LD A,($66F3)  ; {Jump to #R$70B8 if *#R$66F3 is set.
 $7098 OR A          ;
 $7099 JR NZ,$70B8   ; }
 $709B PUSH DE       ; Stash #REGde on the stack.
 $709C LD B,$16      ; #REGb=#N$16.
 $709E LD HL,$0052   ; #REGhl=#N($0052,$04,$04).
*$70A1 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $70A2 PUSH HL       ; }
 $70A3 LD A,$10      ; #REGa=#COLOUR$10.
 $70A5 DI            ; Disable interrupts.
 $70A6 OUT ($FE),A   ; Set border to the colour held by #REGa.
 $70A8 LD DE,$0001   ; #REGde=#N($0001,$04,$04).
 $70AB CALL $03B5    ; #HTML(Call <a "noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $70AE DI            ; Disable interrupts.
 $70AF POP HL        ; Restore #REGhl from the stack.
 $70B0 INC HL        ; {Increment #REGhl by four.
 $70B1 INC HL        ;
 $70B2 INC HL        ;
 $70B3 INC HL        ; }
 $70B4 POP BC        ; Restore #REGbc from the stack.
 $70B5 DJNZ $70A1    ; Decrease counter by one and loop back to #R$70A1 until
                     ; counter is zero.
 $70B7 POP DE        ; Restore #REGde from the stack.
*$70B8 LD A,($66ED)  ; {#REGl=*#R$66ED-#N$1F.
 $70BB SUB $1F       ;
 $70BD LD L,A        ; }
 $70BE LD H,$5A      ; #REGh=#N$5A.
 $70C0 LD A,(HL)     ; {Jump to #R$714E if *#REGhl is not zero.
 $70C1 OR A          ;
 $70C2 JP NZ,$714E   ; }
 $70C5 LD (HL),$47   ; Write #COLOUR$47 to *#REGhl.
 $70C7 CALL $6704    ; Call #R$6704.
 $70CA SET 2,H       ; Set bit 2 of #REGh.
 $70CC PUSH HL       ; Stash #REGhl on the stack.
 $70CD LD A,($66A6)  ; #REGa=*#R$66A6.
 $70D0 OR A          ; Set the bits from #REGa.
 $70D1 LD B,A        ; #REGb=#REGa.
 $70D2 LD A,$01      ; #REGa=#N$01.
 $70D4 JR Z,$70DA    ; Jump to #R$70DA if #REGhl is equal to #REGa.
*$70D6 SLA A         ; Shift #REGa left (with carry).
 $70D8 DJNZ $70D6    ; Decrease counter by one and loop back to #R$70D6 until
                     ; counter is zero.
*$70DA POP DE        ; {Restore #REGde and #REGbc from the stack.
 $70DB POP BC        ; }
 $70DC PUSH BC       ; {Stash #REGbc and #REGde on the stack.
 $70DD PUSH DE       ; }
 $70DE LD HL,$669E   ; #REGhl=#R$669E.
*$70E1 INC HL        ; Increment #REGhl by one.
 $70E2 DJNZ $70E1    ; Decrease counter by one and loop back to #R$70E1 until
                     ; counter is zero.
 $70E4 LD (HL),A     ; Write #REGa to *#REGhl.
 $70E5 JR $7147      ; Jump to #R$7147.

; Routine at 70E7
;
; Used by the routine at #R$6CEE.
c$70E7 LD HL,$669E   ;
 $70EA POP BC        ;
 $70EB PUSH BC       ;
*$70EC INC HL        ;
 $70ED DJNZ $70EC    ;
 $70EF LD A,(HL)     ;
 $70F0 PUSH AF       ;
 $70F1 PUSH DE       ;
 $70F2 CALL $66F7    ;
 $70F5 LD A,(DE)     ;
 $70F6 CP $47        ;
 $70F8 POP DE        ;
 $70F9 JR NZ,$7134   ;
 $70FB BIT 2,D       ;
 $70FD JR Z,$710C    ;
 $70FF POP AF        ;
 $7100 RES 2,D       ;
 $7102 PUSH DE       ;
 $7103 LD B,$04      ;
*$7105 LD (DE),A     ;
 $7106 INC D         ;
 $7107 DJNZ $7105    ;
 $7109 XOR A         ;
 $710A JR $7147      ;
*$710C LD B,$04      ;
 $710E XOR A         ;
*$710F LD (DE),A     ;
 $7110 INC D         ;
 $7111 DJNZ $710F    ;
 $7113 CALL $66F7    ;
 $7116 EX DE,HL      ;
 $7117 LD (HL),$00   ;
 $7119 LD A,H        ;
 $711A CP $58        ;
 $711C JR NZ,$712B   ;
 $711E LD A,L        ;
 $711F AND $E0       ;
 $7121 CP $20        ;
 $7123 JR NZ,$712B   ;
 $7125 POP AF        ;
 $7126 LD DE,$0000   ;
 $7129 JR $714E      ;
*$712B LD C,$20      ;
 $712D AND A         ;
 $712E SBC HL,BC     ;
 $7130 LD A,(HL)     ;
 $7131 OR A          ;
 $7132 JR Z,$713D    ;
*$7134 CALL $7159    ;
 $7137 POP AF        ;
 $7138 LD DE,$0000   ;
 $713B JR $714E      ;
*$713D LD (HL),$47   ;
 $713F CALL $6704    ;
 $7142 EX DE,HL      ;
 $7143 SET 2,D       ;
 $7145 POP AF        ;
 $7146 PUSH DE       ;
; This entry point is used by the routine at #R$7069.
*$7147 LD B,$04      ;
*$7149 LD (DE),A     ;
 $714A INC D         ;
 $714B DJNZ $7149    ;
 $714D POP DE        ;
; This entry point is used by the routines at #R$6CEE and #R$7069.
*$714E POP BC        ;
 $714F POP HL        ;
 $7150 LD (HL),E     ;
 $7151 INC HL        ;
 $7152 LD (HL),D     ;
 $7153 INC HL        ;
 $7154 DEC B         ;
 $7155 JP NZ,$7040   ;
 $7158 RET           ;
*$7159 LD A,($66F1)  ;
 $715C AND $02       ;
 $715E JR NZ,$7176   ;
 $7160 LD DE,($667D) ;
 $7164 LD A,(HL)     ;
 $7165 CP D          ;
 $7166 JR NZ,$7176   ;
 $7168 INC HL        ;
 $7169 LD A,(HL)     ;
 $716A DEC HL        ;
 $716B CP E          ;
 $716C JR Z,$717F    ;
 $716E DEC HL        ;
 $716F LD A,(HL)     ;
 $7170 DEC HL        ;
 $7171 CP E          ;
 $7172 JR Z,$717F    ;
 $7174 INC HL        ;
 $7175 INC HL        ;
*$7176 LD A,(HL)     ;
 $7177 CP $06        ;
 $7179 JR NZ,$71BE   ;
 $717B DEC HL        ;
 $717C AND A         ;
 $717D SBC HL,BC     ;
*$717F PUSH HL       ;
 $7180 CALL $6704    ;
 $7183 EX DE,HL      ;
 $7184 LD HL,$65DD   ;
 $7187 LD A,($66F1)  ;
 $718A AND $06       ;
 $718C LD B,$08      ;
 $718E JR NZ,$7192   ;
 $7190 LD B,$0F      ;
*$7192 LD A,(HL)     ;
 $7193 CP E          ;
 $7194 JR Z,$719C    ;
 $7196 INC HL        ;
*$7197 INC HL        ;
 $7198 DJNZ $7192    ;
 $719A POP HL        ;
 $719B RET           ;
*$719C INC HL        ;
 $719D PUSH DE       ;
 $719E LD D,(HL)     ;
 $719F RES 7,D       ;
 $71A1 LD A,D        ;
 $71A2 POP DE        ;
 $71A3 CP D          ;
 $71A4 JR Z,$71A8    ;
 $71A6 JR $7197      ;
*$71A8 LD (HL),$00   ;
 $71AA POP DE        ;
; This entry point is used by the routine at #R$7616.
*$71AB LD HL,$66D5   ;
*$71AE LD A,(HL)     ;
 $71AF OR A          ;
 $71B0 JR Z,$71B7    ;
 $71B2 INC HL        ;
 $71B3 INC HL        ;
 $71B4 INC HL        ;
 $71B5 JR $71AE      ;
*$71B7 LD (HL),$01   ;
 $71B9 INC HL        ;
 $71BA LD (HL),E     ;
 $71BB INC HL        ;
 $71BC LD (HL),D     ;
 $71BD RET           ;
*$71BE LD A,($66F1)  ;
 $71C1 BIT 1,A       ;
 $71C3 JR Z,$71EC    ;
 $71C5 LD A,(HL)     ;
 $71C6 CP $43        ;
 $71C8 JR Z,$71D1    ;
 $71CA CP $41        ;
 $71CC JR Z,$71D1    ;
 $71CE CP $05        ;
 $71D0 RET NZ        ;
*$71D1 LD A,($66F3)  ;
 $71D4 OR A          ;
 $71D5 RET NZ        ;
 $71D6 LD B,$18      ;
 $71D8 LD HL,$0122   ;
*$71DB PUSH BC       ;
 $71DC PUSH HL       ;
 $71DD LD DE,$0001   ;
 $71E0 CALL $03B5    ;
 $71E3 DI            ;
 $71E4 POP HL        ;
 $71E5 INC HL        ;
 $71E6 INC HL        ;
 $71E7 INC HL        ;
 $71E8 POP BC        ;
 $71E9 DJNZ $71DB    ;
 $71EB RET           ;
*$71EC CP $04        ;
 $71EE RET NZ        ;
 $71EF LD A,(HL)     ;
 $71F0 CP $01        ;
 $71F2 JR NZ,$71F8   ;
 $71F4 LD (HL),$40   ;
 $71F6 JR $721E      ;
*$71F8 CP $0F        ;
 $71FA JR NZ,$7200   ;
 $71FC LD (HL),$01   ;
 $71FE JR $7229      ;

; Routine at 7200
;
; Used by the routine at #R$70E7.
c$7200 CP $02        ; {Jump to #R$7223 if #REGa is not equal to #N$02.
 $7202 JR NZ,$7223   ; }
 $7204 PUSH HL       ; Stash #REGhl on the stack.
 $7205 LD A,L        ; {#REGl-=#N$20.
 $7206 SUB $20       ;
 $7208 LD L,A        ; }
 $7209 LD A,(HL)     ; #REGa=*#REGhl.
 $720A CP $10        ; {Jump to #R$721B if #REGa is not equal to #N$10.
 $720C JR NZ,$721B   ; }
 $720E LD H,$4D      ; #REGh=#N$4D.
 $7210 LD B,$03      ; #REGb=#N$03.
 $7212 LD DE,$61EF   ; #REGde=#R$61EF.
*$7215 LD A,(DE)     ; #REGa=*#REGde.
 $7216 LD (HL),A     ; Write #REGa to *#REGhl.
 $7217 INC H         ; Increment #REGh by one.
 $7218 DEC DE        ; Decrease #REGde by one.
 $7219 DJNZ $7215    ; Decrease counter by one and loop back to #R$7215 until
                     ; counter is zero.
*$721B POP HL        ; Restore #REGhl from the stack.
 $721C LD (HL),$00   ; Write #N$00 to *#REGhl.
; This entry point is used by the routine at #R$70E7.
*$721E LD DE,$3D00   ; #HTML(#REGde=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3D00</a>.)
 $7221 JR $722C      ; Jump to #R$722C.
*$7223 CP $10        ; {Jump to #R$7245 if #REGa is not equal to #N$10.
 $7225 JR NZ,$7245   ; }
 $7227 LD (HL),$02   ; Write #N$02 to *#REGhl.
; This entry point is used by the routine at #R$70E7.
*$7229 LD DE,$61EB   ; #REGde=#R$61EB.
*$722C LD H,$48      ; #REGh=#N$48.
 $722E LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
*$7230 LD A,(DE)     ; {Copy the UDG data to the screen buffer.
 $7231 LD (HL),A     ; }
 $7232 INC DE        ; Move to the next UDG graphic data byte.
 $7233 INC H         ; Move down one pixel line in the screen buffer.
 $7234 DJNZ $7230    ; Decrease the line counter by one and loop back to #R$7230 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $7236 LD A,$35      ; {Write #N$35 to *#R$652E.
 $7238 LD ($652E),A  ; }
 $723B CALL $67B6    ; Call #R$67B6.
 $723E CALL $67A9    ; Call #R$67A9.
 $7241 CALL $681C    ; Call #R$681C.
 $7244 RET           ; Return.
*$7245 CP $40        ; {Return if #REGa is not equal to #N$40.
 $7247 RET NZ        ; }
 $7248 RES 5,L       ; Reset bit 5 of #REGl.
 $724A LD A,(HL)     ; {Return if *#REGhl is not equal to #N$42.
 $724B CP $42        ;
 $724D RET NZ        ; }
 $724E LD A,$01      ; {Write #N$01 to *#R$66D3.
 $7250 LD ($66D3),A  ; }
 $7253 RET           ; Return.

; Routine at 7254
;
; Used by the routines at #R$7C82 and #R$7DD9.
c$7254 LD A,($66A4)  ; {Jump to #R$730D if *#R$66A4 is not equal to #N$02.
 $7257 CP $02        ;
 $7259 JP NZ,$730D   ; }
 $725C LD A,($66F1)  ; {Jump to #R$7277 if *#R$66F1 is not equal to #N$04.
 $725F CP $04        ;
 $7261 JR NZ,$7277   ; }
 $7263 LD HL,$65DD   ; #REGhl=#R$65DD.
 $7266 LD B,$08      ; #REGb=#N$08.
*$7268 PUSH BC       ; Stash #REGbc on the stack.
 $7269 LD E,(HL)     ; #REGe=*#REGhl.
 $726A INC HL        ; Increment #REGhl by one.
 $726B LD D,(HL)     ; #REGd=*#REGhl.
 $726C INC HL        ; Increment #REGhl by one.
 $726D PUSH HL       ; Stash #REGhl on the stack.
 $726E BIT 6,D       ; {Call #R$7564 if bit 6 of #REGd is set.
 $7270 CALL NZ,$7564 ; }
 $7273 POP HL        ; {Restore #REGhl and #REGbc from the stack.
 $7274 POP BC        ; }
 $7275 DJNZ $7268    ; Decrease counter by one and loop back to #R$7268 until
                     ; counter is zero.
*$7277 LD HL,$6680   ; #REGhl=#R$6680.
 $727A LD DE,$6681   ; #REGde=#R$6680(#N$6681).
 $727D LD BC,$006C   ; #REGbc=#N($006C,$04,$04).
 $7280 LD (HL),B     ; Write #REGb to *#REGhl.
 $7281 LDIR          ; LDIR.
 $7283 LD HL,$65DD   ; #REGhl=#R$65DD.
 $7286 LD DE,$65DE   ; #REGde=#R$65DD(#N$65DE).
 $7289 PUSH HL       ; Stash #REGhl on the stack.
 $728A LD C,$1D      ; #REGc=#N$1D.
 $728C LD (HL),B     ; Write #REGb to *#REGhl.
 $728D LDIR          ; LDIR.
 $728F LD HL,$6637   ; #REGhl=#R$6637.
 $7292 LD A,($66F1)  ; {Jump to #R$729D if *#R$66F1 is not zero.
 $7295 OR A          ;
 $7296 JR NZ,$729D   ; }
 $7298 LD HL,$65FB   ; #REGhl=#R$65FB.
 $729B JR $72AD      ; Jump to #R$72AD.
*$729D CP $01        ; {Jump to #R$72A6 if #REGa is not equal to #N$01.
 $729F JR NZ,$72A6   ; }
 $72A1 LD HL,$6619   ; #REGhl=#R$6619.
 $72A4 JR $72AD      ; Jump to #R$72AD.
*$72A6 CP $04        ; {Jump to #R$72AD if #REGa is not equal to #N$04.
 $72A8 JR NZ,$72AD   ; }
 $72AA LD HL,$6647   ; #REGhl=#R$6647.
*$72AD POP DE        ; Restore #REGde from the stack.
 $72AE LD A,($667F)  ; #REGa=*#R$667F.
 $72B1 ADD A,A       ; Multiply #REGa by #N$02.
 $72B2 JR Z,$72B7    ; Jump to #R$72B7 if #REGa is zero.
 $72B4 LD C,A        ; #REGc=#REGa.
 $72B5 LDIR          ; LDIR.
*$72B7 LD HL,$66ED   ; {Write #N$CE to *#R$66ED.
 $72BA LD (HL),$CE   ; }
 $72BC LD HL,$66F0   ; #REGhl=#R$66F0.
; See #POKE#infinite-lives(Infinite Lives).
 $72BF DEC (HL)      ; Decrease #R$66F0 by one.
 $72C0 LD A,(HL)     ; {Jump to #R$72C9 if *#R$66F0 indicates the player still has lives
 $72C1 OR A          ; left.
 $72C2 JR NZ,$72C9   ; }
; Player has lost all their lives, set the *#R$66F5 flag.
 $72C4 INC A         ; {Write #N$01 to *#R$66F5.
 $72C5 LD ($66F5),A  ; }
 $72C8 RET           ; Return.

; Routine at 72C9
;
; Used by the routine at #R$7254.
c$72C9 LD A,($66F3)  ;
 $72CC OR A          ;
 $72CD JP NZ,$740C   ;
 $72D0 LD A,($66F1)  ;
 $72D3 CP $04        ;
 $72D5 CALL NZ,$67F6 ;
 $72D8 JR NZ,$730A   ;
 $72DA CALL $681C    ;
 $72DD LD HL,$5940   ;
 $72E0 LD C,$02      ;
*$72E2 LD B,$E0      ;
*$72E4 PUSH BC       ;
 $72E5 PUSH HL       ;
 $72E6 LD A,(HL)     ;
 $72E7 CP $02        ;
 $72E9 JR Z,$7302    ;
 $72EB CP $10        ;
 $72ED JR Z,$7302    ;
 $72EF CP $16        ;
 $72F1 LD A,$00      ;
 $72F3 JR NZ,$72F7   ;
 $72F5 LD A,$10      ;
*$72F7 LD (HL),A     ;
 $72F8 CALL $6704    ;
 $72FB XOR A         ;
 $72FC LD B,$08      ;
*$72FE LD (HL),A     ;
 $72FF INC H         ;
 $7300 DJNZ $72FE    ;
*$7302 POP HL        ;
 $7303 INC HL        ;
 $7304 POP BC        ;
 $7305 DJNZ $72E4    ;
 $7307 DEC C         ;
 $7308 JR NZ,$72E2   ;
*$730A CALL $6CC9    ;
; This entry point is used by the routine at #R$7254.
*$730D LD A,($66A4)  ;
 $7310 CP $01        ;
 $7312 RET Z         ;
 $7313 LD A,($66F1)  ;
 $7316 CP $04        ;
 $7318 JP NZ,$7407   ;
 $731B LD A,($66D3)  ;
 $731E OR A          ;
 $731F RET Z         ;
; #PUSHS #POKES$66F3,$00;$74EF,$00;$74F0,$00;$74F1,$00
; #SIM(start=$74A4,stop=$74B9) #UDGTABLE {
;   #SIM(start=$72C9,stop=$6FDB)
;   #SIM(start=$7320,stop=$737D)#SCR$01(fgkjfdg)
; } TABLE# #POPS
 $7320 CALL $6720    ; Call #R$6720.
 $7323 LD DE,$61DB   ; #REGde=#R$61DB.
 $7326 CALL $6B31    ; Call #R$6B31.
 $7329 LD DE,$486E   ; #REGde=#N$486E (screen buffer location).
 $732C LD BC,$0445   ; #REGbc=#N$0445.
 $732F LD HL,$652B   ; #REGhl=#R$652B.
 $7332 LD A,($667F)  ; #REGa=*#R$667F.
 $7335 SRA A         ; Shift #REGa right (with carry).
 $7337 ADD A,$34     ; #REGa+=#N$34.
 $7339 LD (HL),A     ; Write #REGa to *#REGhl.
 $733A CALL $676F    ; Call #R$676F.
 $733D LD HL,$652B   ; #REGhl=#R$652B.
 $7340 LD E,$8E      ; #REGe=#N$8E.
 $7342 LD B,$04      ; #REGb=#N$04.
 $7344 CALL $676F    ; Call #R$676F.
 $7347 LD C,$04      ;
*$7349 LD HL,$4E6B   ;
 $734C LD DE,$4F6B   ;
 $734F LD B,$08      ;
*$7351 PUSH BC       ;
 $7352 PUSH HL       ;
 $7353 LD BC,$000A   ;
 $7356 LDIR          ;
 $7358 POP DE        ;
 $7359 PUSH DE       ;
 $735A POP HL        ;
 $735B DEC H         ;
 $735C POP BC        ;
 $735D DJNZ $7351    ;
 $735F DEC C         ;
 $7360 JR NZ,$7349   ;
 $7362 LD C,$04      ;
*$7364 LD HL,$498B   ;
 $7367 LD DE,$488B   ;
 $736A LD B,$07      ;
*$736C PUSH BC       ;
 $736D PUSH HL       ;
 $736E LD BC,$000A   ;
 $7371 LDIR          ;
 $7373 POP DE        ;
 $7374 PUSH DE       ;
 $7375 POP HL        ;
 $7376 INC H         ;
 $7377 POP BC        ;
 $7378 DJNZ $736C    ;
 $737A DEC C         ;
 $737B JR NZ,$7364   ;
 $737D CALL $67B6    ;
 $7380 LD IX,$0000   ;
 $7384 LD B,$10      ;
*$7386 PUSH BC       ;
 $7387 LD B,$0B      ;
*$7389 PUSH BC       ;
 $738A PUSH IX       ;
 $738C LD HL,$594A   ;
 $738F LD DE,$030B   ;
 $7392 LD A,$0C      ;
 $7394 SUB B         ;
 $7395 LD B,A        ;
*$7396 PUSH BC       ;
 $7397 LD A,IXl      ;
 $7399 AND $3F       ;
 $739B LD B,E        ;
*$739C LD (HL),A     ;
 $739D INC HL        ;
 $739E DJNZ $739C    ;
 $73A0 LD B,D        ;
*$73A1 PUSH BC       ;
 $73A2 LD (HL),A     ;
 $73A3 LD BC,$0020   ;
 $73A6 ADD HL,BC     ;
 $73A7 POP BC        ;
 $73A8 DJNZ $73A1    ;
 $73AA LD B,E        ;
*$73AB LD (HL),A     ;
 $73AC DEC HL        ;
 $73AD DJNZ $73AB    ;
 $73AF LD B,D        ;
*$73B0 PUSH BC       ;
 $73B1 LD (HL),A     ;
 $73B2 LD BC,$0020   ;
 $73B5 SBC HL,BC     ;
 $73B7 POP BC        ;
 $73B8 DJNZ $73B0    ;
 $73BA LD C,$21      ;
 $73BC SBC HL,BC     ;
 $73BE INC E         ;
 $73BF INC E         ;
 $73C0 INC D         ;
 $73C1 INC D         ;
 $73C2 INC IX        ;
 $73C4 POP BC        ;
 $73C5 DJNZ $7396    ;
 $73C7 POP HL        ;
 $73C8 PUSH HL       ;
 $73C9 LD A,L        ;
 $73CA AND $0F       ;
 $73CC LD L,A        ;
 $73CD LD H,B        ;
 $73CE ADD HL,HL     ;
 $73CF ADD HL,HL     ;
 $73D0 ADD HL,HL     ;
 $73D1 ADD HL,HL     ;
 $73D2 ADD HL,HL     ;
 $73D3 ADD HL,HL     ;
 $73D4 LD B,$07      ;
*$73D6 PUSH BC       ;
 $73D7 PUSH HL       ;
 $73D8 LD DE,$0002   ;
 $73DB CALL $03B5    ;
 $73DE DI            ;
 $73DF POP HL        ;
 $73E0 LD BC,$0014   ;
 $73E3 ADD HL,BC     ;
 $73E4 POP BC        ;
 $73E5 DJNZ $73D6    ;
 $73E7 POP IX        ;
 $73E9 DEC IX        ;
 $73EB POP BC        ;
 $73EC DJNZ $7389    ;
 $73EE POP BC        ;
 $73EF DJNZ $7386    ;
 $73F1 CALL $6720    ;
 $73F4 LD BC,$00C8   ;
*$73F7 DJNZ $73F7    ;
 $73F9 DEC C         ;
 $73FA JR NZ,$73F7   ;
 $73FC LD HL,$6898   ;
 $73FF LD A,(HL)     ;
 $7400 CP $04        ;
 $7402 JR C,$740C    ;
 $7404 DEC (HL)      ;
 $7405 JR $740C      ;
*$7407 LD A,($667F)  ;
 $740A OR A          ;
 $740B RET NZ        ;
; This entry point is used by the routines at #R$7C82 and #R$7DD9.
*$740C LD HL,$6680   ;
 $740F LD DE,$6681   ;
 $7412 LD BC,$006C   ;
 $7415 LD (HL),B     ;
 $7416 LDIR          ;
 $7418 LD HL,$66F1   ;
 $741B LD A,(HL)     ;
 $741C SUB $04       ;
 $741E LD DE,$703F   ;
 $7421 JR NZ,$742D   ;
 $7423 LD (HL),A     ;
 $7424 INC A         ;
 $7425 LD (DE),A     ;
 $7426 PUSH HL       ;
 $7427 CALL $74A4    ;
 $742A POP HL        ;
 $742B JR $7431      ;
*$742D INC (HL)      ;
 $742E LD A,$04      ;
 $7430 LD (DE),A     ;
*$7431 LD A,(HL)     ;
 $7432 PUSH AF       ;
 $7433 AND $06       ;
 $7435 LD HL,$667F   ;
 $7438 LD (HL),$08   ;
 $743A JR NZ,$743E   ;
 $743C LD (HL),$0F   ;
*$743E LD HL,$6637   ;
 $7441 POP AF        ;
 $7442 OR A          ;
 $7443 JR NZ,$744A   ;
 $7445 LD HL,$65FB   ;
 $7448 JR $745A      ;
*$744A CP $01        ;
 $744C JR NZ,$7453   ;
 $744E LD HL,$6619   ;
 $7451 JR $745A      ;
*$7453 CP $04        ;
 $7455 JR NZ,$745A   ;
 $7457 LD HL,$6647   ;
*$745A LD DE,$65DD   ;
 $745D LD A,($667F)  ;
 $7460 ADD A,A       ;
 $7461 LD C,A        ;
 $7462 LDIR          ;
 $7464 LD A,($66F1)  ;
 $7467 CP $01        ;
 $7469 JR NZ,$7470   ;
 $746B LD BC,$4304   ;
 $746E JR $7485      ;
*$7470 CP $02        ;
 $7472 JR NZ,$7479   ;
 $7474 LD B,$41      ;
 $7476 LD C,B        ;
 $7477 JR $7485      ;
*$7479 CP $03        ;
 $747B JR NZ,$7482   ;
 $747D LD B,$43      ;
 $747F LD C,B        ;
 $7480 JR $7485      ;
*$7482 LD BC,$0643   ;
*$7485 LD ($667D),BC ;
 $7489 LD HL,$66ED   ;
 $748C LD (HL),$CE   ;
 $748E LD A,($66F1)  ;
 $7491 PUSH AF       ;
 $7492 AND $06       ;
 $7494 CALL NZ,$68B8 ;
 $7497 CALL $67F6    ;
 $749A POP AF        ;
 $749B CP $04        ;
 $749D CALL Z,$696A  ;
 $74A0 CALL $6CC9    ;
 $74A3 RET           ;

; Game Intro
;
; Used by the routine at #R$72C9.
; .
; #PUSHS #POKES$74EF,$00;$74F0,$00;$74F1,$00 #UDGTABLE {
;   #CLS$05#SIM(start=$74B9,stop=$7558)#SCR$02(level-01)
; } TABLE# #POPS
@label=GameIntro
c$74A4 CALL $6720    ; Call #R$6720.
; Don't bother with the animation if this is the demo mode.
 $74A7 LD A,($66F3)  ; {Return if *#R$66F3 is set.
 $74AA OR A          ;
 $74AB RET NZ        ; }
; Set the attribute buffer to all cyan.
 $74AC LD HL,$5800   ; {Copy #INK$05 to #N$0300 bytes starting from #N$5800 in the
 $74AF LD DE,$5801   ; attribute buffer.
 $74B2 LD BC,$02FF   ;
 $74B5 LD (HL),$05   ;
 $74B7 LDIR          ; }
 $74B9 LD HL,$6C13   ; #REGhl=#R$6C13.
 $74BC LD B,$2E      ; Set a counter in #REGb for #N$2E stars to draw.
@label=GameIntro_StarLoop
*$74BE LD A,B        ; {Jump to #R$74E3 if #REGb is greater than or equal to
 $74BF CP $2D        ; #N$2D.
 $74C1 JR NC,$74E3   ; }
; Check if the control method is the Kempson joystick?
 $74C3 LD A,($66F6)  ; {Jump to #R$74D3 if *#R$66F6 is not the Kempston
 $74C6 CP $02        ; joystick.
 $74C8 JR NZ,$74D3   ; }
; The control method is Kempston joystick, so test the fire button.
 $74CA IN A,($1F)    ; #REGa=read from the Kempston joystick port.
 $74CC AND %00010000 ; {Jump to #R$7558 if the fire button was pressed.
 $74CE JP NZ,$7558   ; }
 $74D1 JR $74E3      ; Jump to #R$74E3.
; Check if the control method is the AGF joystick?
@label=GameIntro_CheckAGF
*$74D3 CP $01        ; {Jump to #R$74DB if *#R$66F6 is not the AGF joystick.
 $74D5 JR NZ,$74DB   ; }
 $74D7 LD A,$EF      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                     ; TABLE#
 $74D9 JR $74DD      ; Jump to #R$74DD.
; Else, the only control option left is the keyboard.
@label=GameIntro_IsKeyboard
*$74DB LD A,$7F      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$7F | SPACE | FULL-STOP | M | N | B }
                     ; TABLE#
@label=GameIntro_CheckFireButton
*$74DD IN A,($FE)    ; Read from the keyboard.
 $74DF BIT 0,A       ; {Jump to #R$7558 if the fire button was pressed.
 $74E1 JR Z,$7558    ; }
@label=GameIntro_MusicLoop
*$74E3 PUSH BC       ; Stash the star counter on the stack.
 $74E4 LD C,(HL)     ; {Fetch the pitch from the music data pointer.
 $74E5 INC HL        ;
 $74E6 LD B,(HL)     ; }
 $74E7 INC HL        ; {Fetch the duration from the music data pointer.
 $74E8 LD E,(HL)     ; }
 $74E9 LD D,$01      ; #REGd=#N$01.
 $74EB INC HL        ; Move the music data pointer to the next byte.
 $74EC PUSH HL       ; Stash the music data pointer on the stack.
 $74ED PUSH BC       ; {#REGhl=#REGbc (using the stack).
 $74EE POP HL        ; }
 $74EF CALL $03B5    ; #HTML(Call <a "noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $74F2 DI            ; Disable interrupts.
 $74F3 LD HL,$57DF   ; #REGhl=#N$57DF (screen buffer location).
 $74F6 LD DE,$57FF   ; #REGde=#N$57FF (screen buffer location).
 $74F9 LD C,$03      ; #REGc=#N$03.
*$74FB LD B,$08      ; #REGb=#N$08.
*$74FD PUSH BC       ; {Stash #REGbc, #REGhl and #REGde on the stack.
 $74FE PUSH HL       ;
 $74FF PUSH DE       ; }
 $7500 LD BC,$00E0   ; #REGbc=#N($00E0,$04,$04).
 $7503 LDDR          ; LDDR.
 $7505 LD C,$20      ; #REGc=#N$20.
 $7507 LD L,$FF      ; #REGl=#N$FF.
 $7509 LD A,H        ; {Jump to #R$7513 if #REGh is less than #N$47.
 $750A CP $47        ;
 $750C JR C,$7513    ; }
 $750E SUB $07       ; {Subtract #N$07 and store the result in #REGh.
 $7510 LD H,A        ; }
 $7511 LDDR          ; LDDR.
*$7513 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $7514 POP HL        ; }
 $7515 DEC D         ; Decrease #REGd by one.
 $7516 DEC H         ; Decrease #REGh by one.
 $7517 POP BC        ; Restore #REGbc from the stack.
 $7518 DJNZ $74FD    ; Decrease counter by one and loop back to #R$74FD until
                     ; counter is zero.
 $751A DEC C         ; Decrease #REGc by one.
 $751B JR NZ,$74FB   ; Jump to #R$74FB until #REGc is zero.
 $751D LD H,$40      ; #REGh=#N$40.
 $751F LD B,$08      ; #REGb=#N$08.
*$7521 PUSH BC       ; Stash #REGbc on the stack.
 $7522 LD BC,$001F   ; #REGbc=#N($001F,$04,$04).
 $7525 LD D,H        ; #REGd=#REGh.
 $7526 LD L,B        ; #REGl=#REGb.
 $7527 LD E,$01      ; #REGe=#N$01.
 $7529 LD (HL),B     ; Write #REGb to *#REGhl.
 $752A LDIR          ; LDIR.
 $752C INC H         ; Increment #REGh by one.
 $752D POP BC        ; Restore #REGbc from the stack.
 $752E DJNZ $7521    ; Decrease counter by one and loop back to #R$7521 until
                     ; counter is zero.
 $7530 LD HL,$61DB   ; #REGhl=#R$61DB.
; Draw two stars; one large and one small.
 $7533 LD B,$02      ; Set a counter in #REGb for the number of types of stars
                     ; to draw.
@label=GameIntro_DrawStar_Loop
*$7535 PUSH BC       ; Stash the star type counter on the stack.
*$7536 CALL $670E    ; Call #R$670E.
 $7539 AND %00011111 ; Keep only bits 0-4.
 $753B JR Z,$7536    ; {Jump to #R$7536 if #REGh is equal to #N$02 or #REGa is
 $753D CP $1F        ; equal to #N$1F.
 $753F JR Z,$7536    ; }
 $7541 LD E,A        ; #REGe=#REGa.
 $7542 LD D,$40      ; #REGd=#N$40.
 $7544 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=GameIntro_DrawStar_LineLoop
*$7546 LD A,(HL)     ; {Copy the UDG data to the screen buffer.
 $7547 LD (DE),A     ; }
 $7548 INC HL        ; Move to the next UDG graphic data byte.
 $7549 INC D         ; Move down one pixel line in the screen buffer.
 $754A DJNZ $7546    ; Decrease the line counter by one and loop back to #R$7546 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $754C LD HL,$624B   ; #REGhl=#R$624B.
 $754F POP BC        ; Restore the star type counter from the stack.
 $7550 DJNZ $7535    ; Decrease star type counter by one and loop back to #R$7535 until
                     ; both types of star have been drawn.
 $7552 POP HL        ; {Restore the music data pointer and star counter from
 $7553 POP BC        ; the stack.}
 $7554 DEC B         ; Decrease the star counter by one.
 $7555 JP NZ,$74BE   ; Jump back to #R$74BE until all the stars have been
                     ; drawn.
; The animation is finished.
@label=GameIntro_Done
*$7558 CALL $6720    ; Call #R$6720.
 $755B LD BC,$0000   ; Set a counter in #REGbc of #N($0000,$04,$04).
@label=GameIntro_Done_PauseLoop
*$755E DJNZ $755E    ; Decrease the pause counter by one and loop back to #R$755E until
                     ; the counter is zero.
 $7560 DEC C         ; Decrease #REGc by one.
 $7561 JR NZ,$755E   ; Jump to #R$755E until #REGc is zero.
 $7563 RET           ; Return.

; Routine at 7564
;
; Used by the routines at #R$7254, #R$7616 and #R$79B2.
c$7564 CALL $66F7    ; Call #R$66F7.
 $7567 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $7568 LD E,$01      ; #REGe=#N$01.
 $756A LD B,$03      ; #REGb=#N$03.
*$756C PUSH BC       ; Stash #REGbc on the stack.
 $756D LD A,(HL)     ; {Jump to #R$7584 if *#REGhl is equal to #N$46 or #N$07.
 $756E CP $46        ;
 $7570 JR Z,$7584    ;
 $7572 CP $07        ;
 $7574 JR Z,$7584    ; }
 $7576 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $7578 PUSH HL       ; Stash #REGhl on the stack.
 $7579 CALL $6704    ; Call #R$6704.
 $757C LD B,$08      ; #REGb=#N$08.
 $757E XOR A         ; #REGa=#N$00.
*$757F LD (HL),A     ; Write #REGa to *#REGhl.
 $7580 INC H         ; Increment #REGh by one.
 $7581 DJNZ $757F    ; Decrease counter by one and loop back to #R$757F until
                     ; counter is zero.
 $7583 POP HL        ; Restore #REGhl from the stack.
*$7584 INC HL        ; Increment #REGhl by one.
 $7585 POP BC        ; Restore #REGbc from the stack.
 $7586 DJNZ $756C    ; Decrease counter by one and loop back to #R$756C until
                     ; counter is zero.
 $7588 LD A,E        ; {Return if #REGe is zero.
 $7589 OR A          ;
 $758A RET Z         ; }
 $758B LD C,$1E      ; #REGc=#N$1E.
 $758D ADD HL,BC     ; #REGhl+=#REGbc.
 $758E DEC E         ; Decrease #REGe by one.
 $758F INC B         ; Increment #REGb by one.
 $7590 JR $756C      ; Jump to #R$756C.

; Messaging: Hi There!
@label=Messaging_HiThere
t$7592 DEFM "HiThere"

; Game Entry Point
@label=GameEntryPoint
c$7599 DI            ; Disable interrupts.
 $759A XOR A         ; {Jump to #R$759E (copy protection?)
 $759B JR Z,$759E    ; }
 $759D RST $00       ; Reset the machine (never reached in normal operation).
; Run a copy protection timing check.
@label=GameEntryPoint_TimingCheck
*$759E LD HL,($5C78) ; {#HTML(Add
 $75A1 LD BC,$EEBE   ; <a rel="noopener nofollow" href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C78.html">FRAMES</a>
 $75A4 ADC HL,BC     ; to #N$EEBE.)}
 $75A6 JP Z,$7C82    ; If the if the result is zero, jump to #R$7C82.
; The copy protection timing check failed ...
 $75A9 CALL $68B8    ; {Display the transition effect and reset the machine.
 $75AC RST $00       ; }

; Handler: Bird Alien
;
; Used by the routine at #R$7616.
@label=Handler_BirdAlien_01
c$75AD LD HL,$60AE   ; #REGhl=#R$60AE.
 $75B0 JR $75DA      ; Jump to #R$75DA.
; This entry point is used by the routine at #R$7616.
@label=Handler_BirdAlien_02
*$75B2 LD HL,$60CD   ; #REGhl=#R$60CD.
 $75B5 JR $75DA      ; Jump to #R$75DA.

; Handler: Pheenix
;
; Used by the routine at #R$7616.
; .
; This is a fairly dogmatic sprite drawing routine, and hopefully this
; will explain why there are empty blocks seemingly randomly in the Pheenix
; sprite data.
; .
; This routine always assumes the Pheenix sprite data looks like this:
; #TABLE { X | X | X } { | X | } TABLE#
; However the sprites aren't always in that format, sometimes they have a
; single row of #N$02 UDGs - so in order to use the same routine the sprites
; "share" empty UDGs, so although something is written, it's just all #N$00.
; .
; Lastly, to conserve on space - some UDGs are less than #N$08 line bytes, they
; just share the bytes from the following sprite data. So some sprites end with
; empty bytes, and some start with empty bytes (which are shared between each).
;
; DE Screen buffer sprite destination
;
; Display frame #N$01 (the egg stage).
@label=Handler_Pheenix_01
c$75B7 LD HL,$60E7   ; #REGhl=#R$60E7.
 $75BA JR $75BF      ; Jump to #R$75BF.
; This entry point is used by the routine at #R$7616.
; .
; Display frame #N$02 (the egg breaking apart).
@label=Handler_Pheenix_02
*$75BC LD HL,$60FF   ; #REGhl=#R$60FF.
; Handler for single row sprites (as the second row is invisible).
@label=Handler_Pheenix_SingleRow
*$75BF LD BC,$0505   ; Set #REGbc to #INK$05 / #INK$05 (centre and righthand blocks of the
                     ; top and only row).
 $75C2 XOR A         ; {Write #INK$00 to the low byte of #REGix (the lefthand block of the
 $75C3 LD IXl,A      ; top row - which is an empty block).}
 $75C5 JR $75E0      ; Jump to #R$75E0.
; This entry point is used by the routine at #R$7616.
; .
; Display frame #N$03 (the broken egg with a baby Pheenix).
@label=Handler_Pheenix_03
*$75C7 LD HL,$611F   ; #REGhl=#R$611F.
 $75CA LD B,$05      ; Set #REGb to #INK$05 (righthand block of top row/ shell
                     ; colour).
 $75CC LD A,($667D)  ; {#REGc=*#R$667D (the centre colour of the top row/
 $75CF LD C,A        ; Pheenix body).}
 $75D0 JR $75DE      ; Jump to #R$75DE.
; This entry point is used by the routine at #R$7616.
; .
; Display frame #N$05 (Pheenix wings "up").
@label=Handler_Pheenix_05
*$75D2 LD HL,$6185   ; #REGhl=#R$6185.
 $75D5 JR $75DA      ; Jump to #R$75DA.
; This entry point is used by the routine at #R$7616.
; .
; Display frame #N$04 (Pheenix wings "down").
@label=Handler_Pheenix_04
*$75D7 LD HL,$615B   ; #REGhl=#R$615B.
; This entry point is used by the routine at #R$75AD.
@label=Handler_Pheenix_LoadColours
*$75DA LD BC,($667D) ; Set #REGb to *#R$667D (righthand block of top row) and set #REGc to
                     ; *#R$667E (middle block of top row).
@label=Handler_Pheenix_SetColour
*$75DE LD IXl,B      ; Write #REGb to the low byte of #REGix which is used for colouring
                     ; the lefthand block of the top row.
@label=Handler_Pheenix_Draw
*$75E0 PUSH DE       ; {Stash the screen buffer destination, colour pair and screen buffer
 $75E1 PUSH BC       ; destination (again) on the stack.
 $75E2 PUSH DE       ; }
; All Pheenix sprites are #N$03 columns in the top row.
 $75E3 LD B,$03      ; Set a counter in #REGb for #N$03 columns.
@label=Handler_Pheenix_ColumnLoop
*$75E5 PUSH BC       ; {Stash the column counter and screen buffer pointer on
 $75E6 PUSH DE       ; the stack.}
; Draw the UDG to the screen buffer.
 $75E7 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=Handler_Pheenix_LineLoop
*$75E9 LD A,(HL)     ; {Copy the UDG data to the screen buffer.
 $75EA LD (DE),A     ; }
 $75EB INC HL        ; Move to the next UDG graphic data byte.
 $75EC INC D         ; Move down one pixel line in the screen buffer.
 $75ED DJNZ $75E9    ; Decrease the line counter by one and loop back to #R$75E9 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $75EF POP DE        ; Restore the original screen buffer location from the
                     ; stack.
 $75F0 INC DE        ; Move right one character block.
 $75F1 POP BC        ; Restore the column counter from the stack.
 $75F2 DJNZ $75E5    ; Decrease the column counter by one and loop back to #R$75E5 until
                     ; all three columns of this row have been drawn.
 $75F4 POP DE        ; {Restore the screen buffer destination and colour pair
 $75F5 POP BC        ; from the stack.}
 $75F6 PUSH HL       ; Stash the UDG data pointer on the stack.
 $75F7 CALL $66F7    ; Call #R$66F7.
 $75FA EX DE,HL      ; Exchange the #REGde and #REGhl registers.
; Colour the top row of the Pheenix sprite.
 $75FB LD A,IXl      ; {Write the colour held by the low byte of #REGix to the attribute
 $75FD LD (HL),A     ; buffer pointer.}
 $75FE INC HL        ; Move right one attribute block.
 $75FF LD (HL),C     ; Write the colour held by #REGc to the attribute buffer
                     ; pointer.
 $7600 INC HL        ; Move right one attribute block.
 $7601 LD (HL),B     ; Write the colour held by #REGb to the attribute buffer
                     ; pointer.
; Colour the bottom row of the Pheenix sprite (feet, or an empty block).
 $7602 LD BC,$001F   ; {Move the attribute buffer pointer to the row below the current row
 $7605 ADD HL,BC     ; and left one attribute block (by adding #N($001F,$04,$04)).
                     ; }
 $7606 LD (HL),$06   ; Write #INK$06 to the attribute buffer pointer.
 $7608 CALL $6704    ; Call #R$6704.
; Now draw the bottom row (feet, or empty block).
 $760B POP DE        ; Restore the UDG pointer from the stack.
; Draw the UDG to the screen buffer.
 $760C LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=Handler_Pheenix_BottomRowLoop
*$760E LD A,(DE)     ; {Copy the UDG data to the screen buffer.
 $760F LD (HL),A     ; }
 $7610 INC H         ; Move down one pixel line in the screen buffer.
 $7611 INC DE        ; Move to the next UDG graphic data byte.
 $7612 DJNZ $760E    ; Decrease the line counter by one and loop back to #R$760E until all
                     ; #N$08 lines of the UDG character have been drawn.
 $7614 POP DE        ; Restore the original screen buffer location from the
                     ; stack.
 $7615 RET           ; Return.

; Routine at 7616
;
; Used by the routines at #R$7C82 and #R$7DD9.
c$7616 LD A,($66F1)  ; {Jump to #R$7620 if *#R$66F1 is not equal to #N$04.
 $7619 CP $04        ;
 $761B JR NZ,$7620   ; }
 $761D CALL $6A23    ; Call #R$6A23.
*$7620 LD DE,$65DD   ; #REGde=#R$65DD.
 $7623 LD HL,($668F) ; #REGhl=*#R$668F.
 $7626 LD A,($6691)  ; {Jump to #R$764C if *#R$6691 is not zero.
 $7629 OR A          ;
 $762A JR NZ,$764C   ; }
 $762C LD A,($66F1)  ;
 $762F AND $04       ;
 $7631 LD A,$07      ;
 $7633 JR NZ,$7636   ;
 $7635 ADD A,A       ;
*$7636 PUSH AF       ;
 $7637 SUB L         ;
 $7638 EX AF,AF'     ;
 $7639 POP AF        ;
 $763A CP L          ;
 $763B JR NZ,$764C   ;
 $763D PUSH HL       ;
 $763E LD HL,$66C2   ;
 $7641 INC (HL)      ;
 $7642 LD A,(HL)     ;
 $7643 SUB $14       ;
 $7645 POP HL        ;
 $7646 JR NZ,$764C   ;
 $7648 INC A         ;
 $7649 LD ($6691),A  ;
*$764C ADD HL,HL     ;
 $764D ADD HL,DE     ;
 $764E PUSH HL       ;
 $764F LD E,(HL)     ;
 $7650 INC HL        ;
 $7651 LD D,(HL)     ;
 $7652 LD A,D        ;
 $7653 OR A          ;
 $7654 JR NZ,$7662   ;
 $7656 EX AF,AF'     ;
 $7657 JR NZ,$765E   ;
 $7659 LD A,$01      ;
 $765B LD ($6691),A  ;
*$765E POP AF        ;
 $765F JP $7991      ;
*$7662 PUSH DE       ;
 $7663 LD A,($66F1)  ;
 $7666 BIT 1,A       ;
 $7668 JP NZ,$76FD   ;
 $766B AND $04       ;
 $766D JR Z,$7676    ;
 $766F LD A,($6691)  ;
 $7672 OR A          ;
 $7673 JP NZ,$76FD   ;
*$7676 LD BC,$66C4   ;
 $7679 LD HL,($668F) ;
 $767C ADD HL,BC     ;
 $767D LD A,(HL)     ;
 $767E OR A          ;
 $767F JR NZ,$76F3   ;
 $7681 LD A,($6691)  ;
 $7684 OR A          ;
 $7685 JR Z,$7692    ;
 $7687 CALL $670E    ;
 $768A CP $D5        ;
 $768C JR NZ,$76CB   ;
 $768E LD (HL),$3C   ;
 $7690 JR $76EE      ;
*$7692 LD A,($6695)  ;
 $7695 AND $01       ;
 $7697 JR NZ,$769C   ;
 $7699 POP AF        ;
 $769A POP AF        ;
 $769B RET           ;
*$769C LD BC,$6657   ;
 $769F LD A,($66F1)  ;
 $76A2 OR A          ;
 $76A3 JR Z,$76AF    ;
 $76A5 LD BC,$6666   ;
 $76A8 CP $01        ;
 $76AA JR Z,$76AF    ;
 $76AC LD BC,$6675   ;
*$76AF LD HL,($668F) ;
 $76B2 ADD HL,BC     ;
 $76B3 LD A,(HL)     ;
 $76B4 CP E          ;
 $76B5 JR Z,$76EE    ;
 $76B7 LD HL,$668F   ;
 $76BA LD A,(HL)     ;
 $76BB OR A          ;
 $76BC JR NZ,$76CA   ;
 $76BE LD A,($66F1)  ;
 $76C1 AND $06       ;
 $76C3 LD A,$0F      ;
 $76C5 JR Z,$76C9    ;
 $76C7 LD A,$08      ;
*$76C9 LD (HL),A     ;
*$76CA DEC (HL)      ;
*$76CB CALL $66F7    ;
 $76CE EX DE,HL      ;
 $76CF LD BC,$0020   ;
 $76D2 LD A,($66C3)  ;
 $76D5 OR A          ;
 $76D6 LD A,L        ;
 $76D7 JR NZ,$76E4   ;
 $76D9 AND $1F       ;
 $76DB JP NZ,$7800   ;
 $76DE INC A         ;
 $76DF LD ($66C3),A  ;
 $76E2 JR $76EE      ;
*$76E4 AND $1F       ;
 $76E6 SUB $1D       ;
 $76E8 JP NZ,$781F   ;
 $76EB LD ($66C3),A  ;
*$76EE POP AF        ;
 $76EF POP AF        ;
 $76F0 JP $799E      ;
*$76F3 CP $01        ;
 $76F5 JR NZ,$76FC   ;
 $76F7 LD A,D        ;
 $76F8 CP $48        ;
 $76FA JR NZ,$76FD   ;
*$76FC DEC (HL)      ;
*$76FD LD BC,$6680   ;
 $7700 LD HL,($668F) ;
 $7703 ADD HL,BC     ;
 $7704 LD A,(HL)     ;
 $7705 PUSH AF       ;
 $7706 LD A,($6691)  ;
 $7709 OR A          ;
 $770A JR NZ,$7782   ;
 $770C POP AF        ;
 $770D PUSH HL       ;
 $770E PUSH AF       ;
 $770F LD A,E        ;
 $7710 AND $1F       ;
 $7712 PUSH AF       ;
 $7713 CP $0A        ;
 $7715 JR Z,$7723    ;
 $7717 CP $0D        ;
 $7719 JR Z,$7723    ;
 $771B CP $10        ;
 $771D JR Z,$7723    ;
 $771F CP $13        ;
 $7721 JR NZ,$7728   ;
*$7723 LD A,$02      ;
 $7725 LD ($6692),A  ;
*$7728 BIT 7,D       ;
 $772A JR NZ,$773B   ;
 $772C POP AF        ;
 $772D CP $1D        ;
 $772F JR NZ,$7738   ;
 $7731 SET 7,D       ;
 $7733 POP AF        ;
 $7734 INC A         ;
 $7735 PUSH AF       ;
 $7736 JR $7746      ;
*$7738 INC DE        ;
 $7739 JR $7747      ;
*$773B POP AF        ;
 $773C OR A          ;
 $773D JR NZ,$7746   ;
 $773F RES 7,D       ;
 $7741 POP AF        ;
 $7742 INC A         ;
 $7743 PUSH AF       ;
 $7744 JR $7738      ;
*$7746 DEC DE        ;
*$7747 POP AF        ;
 $7748 POP HL        ;
 $7749 LD (HL),A     ;
 $774A POP HL        ;
 $774B PUSH AF       ;
 $774C PUSH DE       ;
 $774D EX DE,HL      ;
 $774E RES 7,D       ;
 $7750 CALL $7564    ;
 $7753 POP DE        ;
 $7754 POP AF        ;
 $7755 PUSH DE       ;
 $7756 RES 7,D       ; Reset bit 7 of #REGd.
 $7758 OR A          ; {Call #R$75B7 if #REGa is equal to #N$00.
 $7759 CALL Z,$75B7  ; }
 $775C CP $01        ; {Call #R$75BC if #REGa is equal to #N$01.
 $775E CALL Z,$75BC  ; }
 $7761 CP $02        ; {Call #R$75C7 if #REGa is equal to #N$02.
 $7763 CALL Z,$75C7  ; }
 $7766 CP $03        ; {Jump to #R$777E if #REGa is not equal to #N$03.
 $7768 JR NZ,$777E   ; }
 $776A LD A,$01      ; {Write #N$01 to *#R$6691.
 $776C LD ($6691),A  ; }
 $776F CALL $75D7    ; Call #R$75D7.
 $7772 LD HL,$6680   ; #REGhl=#R$6680.
 $7775 LD DE,$6681   ; #REGde=#R$6681.
 $7778 LD BC,$000E   ; #REGbc=#N($000E,$04,$04).
 $777B LD (HL),B     ; Write #REGb to *#REGhl.
 $777C LDIR          ; LDIR.
*$777E POP DE        ; Restore #REGde from the stack.
 $777F JP $798D      ; Jump to #R$798D.
*$7782 POP AF        ;
 $7783 PUSH AF       ;
 $7784 AND $F0       ;
 $7786 JR NZ,$7796   ;
 $7788 POP AF        ;
 $7789 CALL $670E    ;
 $778C SRA A         ;
 $778E SRA A         ;
 $7790 AND $07       ;
 $7792 ADD A,$80     ;
 $7794 JR $7797      ;
*$7796 POP AF        ;
*$7797 SUB $10       ;
 $7799 LD (HL),A     ;
 $779A AND $07       ;
 $779C PUSH AF       ;
 $779D CALL $66F7    ;
 $77A0 EX DE,HL      ;
 $77A1 LD BC,$0020   ;
 $77A4 PUSH HL       ;
 $77A5 PUSH BC       ;
 $77A6 LD B,$03      ;
*$77A8 LD A,(HL)     ;
 $77A9 CP $46        ;
 $77AB JR Z,$77C4    ;
 $77AD CP $07        ;
 $77AF JR Z,$77C4    ;
 $77B1 INC HL        ;
 $77B2 DJNZ $77A8    ;
 $77B4 DEC HL        ;
 $77B5 DEC HL        ;
 $77B6 POP BC        ;
 $77B7 ADD HL,BC     ;
 $77B8 LD A,(HL)     ;
 $77B9 CP $46        ;
 $77BB JR Z,$77C5    ;
 $77BD CP $07        ;
 $77BF JR Z,$77C5    ;
 $77C1 POP HL        ;
 $77C2 JR $77DA      ;
*$77C4 POP BC        ;
*$77C5 POP DE        ;
 $77C6 CALL $71AB    ;
 $77C9 LD DE,$65DD   ;
 $77CC LD HL,($668F) ;
 $77CF ADD HL,HL     ;
 $77D0 ADD HL,DE     ;
 $77D1 INC HL        ;
 $77D2 LD (HL),$00   ;
 $77D4 POP AF        ;
 $77D5 POP AF        ;
 $77D6 POP AF        ;
 $77D7 JP $799E      ;
*$77DA POP AF        ;
 $77DB JR Z,$7855    ;
 $77DD CP $07        ;
 $77DF JR Z,$781F    ;
 $77E1 CP $06        ;
 $77E3 JR Z,$7800    ;
 $77E5 CP $04        ;
 $77E7 JP Z,$78C6    ;
 $77EA CP $02        ;
 $77EC JP Z,$78C6    ;
 $77EF AND A         ;
 $77F0 SBC HL,BC     ;
 $77F2 PUSH HL       ;
 $77F3 LD B,$03      ;
*$77F5 LD A,(HL)     ;
 $77F6 OR A          ;
 $77F7 JR NZ,$7844   ;
 $77F9 INC HL        ;
 $77FA DJNZ $77F5    ;
 $77FC POP HL        ;
 $77FD JP $7965      ;
*$7800 LD A,L        ;
 $7801 AND $1F       ;
 $7803 JR Z,$7845    ;
 $7805 ADD HL,BC     ;
 $7806 LD A,(HL)     ;
 $7807 OR A          ;
 $7808 JR NZ,$7845   ;
 $780A DEC HL        ;
 $780B SBC HL,BC     ;
 $780D LD A,(HL)     ;
 $780E OR A          ;
 $780F JR Z,$781C    ;
 $7811 LD A,($6693)  ;
 $7814 OR A          ;
 $7815 JR NZ,$7845   ;
 $7817 LD A,(HL)     ;
 $7818 CP $46        ;
 $781A JR NZ,$7845   ;
*$781C JP $7965      ;
*$781F LD A,L        ;
 $7820 AND $1F       ;
 $7822 CP $1D        ;
 $7824 JR Z,$7845    ;
 $7826 INC HL        ;
 $7827 PUSH HL       ;
 $7828 INC HL        ;
 $7829 ADD HL,BC     ;
 $782A LD A,(HL)     ;
 $782B OR A          ;
 $782C JR NZ,$7844   ;
 $782E INC HL        ;
 $782F SBC HL,BC     ;
 $7831 LD A,(HL)     ;
 $7832 OR A          ;
 $7833 JR Z,$7840    ;
 $7835 LD A,($6693)  ;
 $7838 OR A          ;
 $7839 JR NZ,$7844   ;
 $783B LD A,(HL)     ;
 $783C CP $46        ;
 $783E JR NZ,$7844   ;
*$7840 POP HL        ;
 $7841 JP $7965      ;
*$7844 POP AF        ;
*$7845 POP AF        ;
 $7846 POP AF        ;
 $7847 LD BC,$6680   ;
 $784A LD HL,($668F) ;
 $784D ADD HL,BC     ;
 $784E LD A,(HL)     ;
 $784F AND $0F       ;
 $7851 LD (HL),A     ;
 $7852 JP $7991      ;
*$7855 LD A,L        ;
 $7856 AND $E0       ;
 $7858 CP $C0        ;
 $785A JR NZ,$7882   ;
 $785C LD A,H        ;
 $785D CP $5A        ;
 $785F JR NZ,$7882   ;
*$7861 LD A,($66F1)  ;
 $7864 AND $02       ;
 $7866 JR Z,$7845    ;
 $7868 LD H,$58      ;
 $786A LD A,L        ;
 $786B SUB $A0       ;
 $786D LD L,A        ;
 $786E PUSH HL       ;
 $786F LD B,$03      ;
*$7871 LD A,(HL)     ;
 $7872 OR A          ;
 $7873 JR NZ,$7844   ;
 $7875 INC HL        ;
 $7876 DJNZ $7871    ;
 $7878 LD C,$20      ;
 $787A ADD HL,BC     ;
 $787B DEC HL        ;
 $787C LD A,(HL)     ;
 $787D OR A          ;
 $787E JR NZ,$7844   ;
 $7880 JR $78B5      ;
*$7882 ADD HL,BC     ;
 $7883 PUSH HL       ;
 $7884 LD A,(HL)     ;
 $7885 OR A          ;
 $7886 JR Z,$7893    ;
 $7888 LD A,($6693)  ;
 $788B OR A          ;
 $788C JR NZ,$7844   ;
 $788E LD A,(HL)     ;
 $788F CP $46        ;
 $7891 JR NZ,$7844   ;
*$7893 INC HL        ;
 $7894 INC HL        ;
 $7895 LD A,(HL)     ;
 $7896 OR A          ;
 $7897 JR Z,$78A4    ;
 $7899 LD A,($6693)  ;
 $789C OR A          ;
 $789D JR NZ,$7844   ;
 $789F LD A,(HL)     ;
 $78A0 CP $46        ;
 $78A2 JR NZ,$7844   ;
*$78A4 ADD HL,BC     ;
 $78A5 DEC HL        ;
 $78A6 LD A,(HL)     ;
 $78A7 OR A          ;
 $78A8 JR Z,$78B5    ;
 $78AA LD A,($6693)  ;
 $78AD OR A          ;
 $78AE JR NZ,$7844   ;
 $78B0 LD A,(HL)     ;
 $78B1 CP $46        ;
 $78B3 JR NZ,$7844   ;
*$78B5 POP HL        ;
 $78B6 CALL $6704    ;
 $78B9 POP DE        ;
 $78BA PUSH HL       ;
 $78BB SET 7,D       ;
 $78BD PUSH DE       ;
 $78BE RES 7,D       ;
 $78C0 CALL $7564    ;
 $78C3 JP $7970      ;
*$78C6 PUSH HL       ;
 $78C7 LD A,L        ;
 $78C8 AND $1F       ;
 $78CA LD L,A        ;
 $78CB LD A,($66ED)  ;
 $78CE INC A         ;
 $78CF AND $1F       ;
 $78D1 CP L          ;
 $78D2 POP HL        ;
 $78D3 JR Z,$7855    ;
 $78D5 JR NC,$7925   ;
 $78D7 LD A,L        ;
 $78D8 AND $1F       ;
 $78DA JP Z,$7855    ;
 $78DD LD A,L        ;
 $78DE AND $E0       ;
 $78E0 CP $C0        ;
 $78E2 JR NZ,$78EA   ;
 $78E4 LD A,H        ;
 $78E5 CP $5A        ;
 $78E7 JP Z,$7861    ;
*$78EA ADD HL,BC     ;
 $78EB DEC HL        ;
 $78EC PUSH HL       ;
 $78ED LD A,(HL)     ;
 $78EE OR A          ;
 $78EF JR Z,$78FE    ;
 $78F1 LD A,($6693)  ;
 $78F4 OR A          ;
 $78F5 JP NZ,$7844   ;
 $78F8 LD A,(HL)     ;
 $78F9 CP $46        ;
 $78FB JP NZ,$7844   ;
*$78FE INC HL        ;
 $78FF LD A,(HL)     ;
 $7900 OR A          ;
 $7901 JR Z,$7910    ;
 $7903 LD A,($6693)  ;
 $7906 OR A          ;
 $7907 JP NZ,$7844   ;
 $790A LD A,(HL)     ;
 $790B CP $46        ;
 $790D JP NZ,$7844   ;
*$7910 ADD HL,BC     ;
*$7911 LD A,(HL)     ;
 $7912 OR A          ;
 $7913 JR Z,$7922    ;
 $7915 LD A,($6693)  ;
 $7918 OR A          ;
 $7919 JP NZ,$7844   ;
 $791C LD A,(HL)     ;
 $791D CP $46        ;
 $791F JP NZ,$7844   ;
*$7922 POP HL        ;
 $7923 JR $7965      ;
*$7925 LD A,L        ;
 $7926 AND $1F       ;
 $7928 CP $1D        ;
 $792A JP Z,$7855    ;
 $792D LD A,L        ;
 $792E AND $E0       ;
 $7930 CP $C0        ;
 $7932 JR NZ,$793A   ;
 $7934 LD A,H        ;
 $7935 CP $5A        ;
 $7937 JP Z,$7861    ;
*$793A ADD HL,BC     ;
 $793B INC HL        ;
 $793C PUSH HL       ;
 $793D INC HL        ;
 $793E LD A,(HL)     ;
 $793F OR A          ;
 $7940 JR Z,$794F    ;
 $7942 LD A,($6693)  ;
 $7945 OR A          ;
 $7946 JP NZ,$7844   ;
 $7949 LD A,(HL)     ;
 $794A CP $46        ;
 $794C JP NZ,$7844   ;
*$794F INC HL        ;
 $7950 LD A,(HL)     ;
 $7951 OR A          ;
 $7952 JR Z,$795E    ;
 $7954 LD A,($6693)  ;
 $7957 OR A          ;
 $7958 JP NZ,$7844   ;
 $795B LD A,(HL)     ;
 $795C CP $46        ;
*$795E JP NZ,$7844   ;
 $7961 DEC HL        ;
 $7962 ADD HL,BC     ;
 $7963 JR $7911      ;
*$7965 CALL $6704    ;
 $7968 POP DE        ;
 $7969 PUSH HL       ;
 $796A PUSH DE       ;
 $796B RES 7,D       ;
 $796D CALL $7564    ;
*$7970 POP DE        ;
 $7971 BIT 7,D       ;
 $7973 POP DE        ;
 $7974 LD A,($66F1)  ;
 $7977 JR Z,$7983    ;
 $7979 AND $02       ;
 $797B CALL NZ,$75D7 ;
 $797E CALL Z,$75AD  ;
 $7981 JR $798D      ;
*$7983 AND $02       ;
 $7985 CALL NZ,$75D2 ;
 $7988 CALL Z,$75B2  ;
 $798B SET 7,D       ;
*$798D POP HL        ;
 $798E LD (HL),E     ;
 $798F INC HL        ;
 $7990 LD (HL),D     ;
*$7991 LD A,($6692)  ;
 $7994 OR A          ;
 $7995 JR Z,$799E    ;
 $7997 DEC A         ;
 $7998 LD ($6692),A  ;
 $799B JP $7616      ;
*$799E LD HL,$668F   ;
 $79A1 LD A,($66F1)  ;
 $79A4 AND $06       ;
 $79A6 LD A,$07      ;
 $79A8 JR NZ,$79AB   ;
 $79AA ADD A,A       ;
*$79AB CP (HL)       ;
 $79AC JR NZ,$79B0   ;
 $79AE LD (HL),$FF   ;
*$79B0 INC (HL)      ;
 $79B1 RET           ;

; Routine at 79B2
;
; Used by the routines at #R$7C82 and #R$7DD9.
c$79B2 LD A,($6695)  ; {Return if bit 0 of *#R$6695 is not set.
 $79B5 AND %00000001 ;
 $79B7 RET Z         ; }
 $79B8 LD HL,$66D5   ; #REGhl=#R$66D5.
 $79BB LD B,$06      ; #REGb=#N$06.
*$79BD LD A,(HL)     ; {Jump to #R$79CA if *#REGhl is not zero.
 $79BE OR A          ;
 $79BF JR NZ,$79CA   ; }
 $79C1 PUSH BC       ; Stash #REGbc on the stack.
 $79C2 LD B,$C8      ; #REGb=#N$C8.
*$79C4 DJNZ $79C4    ; Decrease counter by one and loop back to #R$79C4 until
                     ; counter is zero.
 $79C6 POP BC        ; Restore #REGbc from the stack.
 $79C7 JP $7B5F      ; Jump to #R$7B5F.
*$79CA PUSH AF       ; {Stash #REGaf, #REGbc and #REGhl on the stack.
 $79CB PUSH BC       ;
 $79CC PUSH HL       ; }
 $79CD LD A,($66F3)  ; {Jump to #R$7A1F if *#R$66F3 is set.
 $79D0 OR A          ;
 $79D1 JR NZ,$7A1F   ; }
 $79D3 LD A,($66F1)  ; {Jump to #R$79F8 if bit 1 of *#R$66F1 is not zero.
 $79D6 AND %00000010 ;
 $79D8 JR Z,$79F8    ; }
 $79DA LD A,(HL)     ; {#REGde=*#REGhl*#N$08.
 $79DB ADD A,A       ;
 $79DC ADD A,A       ;
 $79DD ADD A,A       ;
 $79DE LD E,A        ;
 $79DF LD D,$00      ; }
 $79E1 LD HL,$00F2   ; {#REGhl=#N($00F2,$04,$04)+#REGde.
 $79E4 ADD HL,DE     ; }
 $79E5 LD B,$03      ; #REGb=#N$03.
*$79E7 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $79E8 PUSH HL       ; }
 $79E9 LD DE,$0002   ; #REGde=#N($0002,$04,$04).
 $79EC CALL $03B5    ; #HTML(Call <a "noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $79EF DI            ; Disable interrupts.
 $79F0 POP HL        ; Restore #REGhl from the stack.
 $79F1 INC HL        ; {Increment #REGhl by two.
 $79F2 INC HL        ; }
 $79F3 POP BC        ; Restore #REGbc from the stack.
 $79F4 DJNZ $79E7    ; Decrease counter by one and loop back to #R$79E7 until
                     ; counter is zero.
 $79F6 JR $7A1F      ; Jump to #R$7A1F.
*$79F8 LD A,(HL)     ;
 $79F9 CP $01        ;
 $79FB JR NZ,$7A1F   ;
 $79FD LD B,$12      ;
 $79FF LD HL,$0064   ;
*$7A02 PUSH BC       ;
 $7A03 PUSH HL       ;
 $7A04 LD A,$64      ;
 $7A06 SUB B         ;
 $7A07 SUB B         ;
 $7A08 LD B,A        ;
 $7A09 LD A,$10      ;
 $7A0B DI            ;
*$7A0C OUT ($FE),A   ;
 $7A0E DJNZ $7A0C    ;
 $7A10 LD DE,$0001   ;
 $7A13 CALL $03B5    ;
 $7A16 DI            ;
 $7A17 POP HL        ;
 $7A18 LD BC,$0008   ;
 $7A1B ADD HL,BC     ;
 $7A1C POP BC        ;
 $7A1D DJNZ $7A02    ;
*$7A1F POP HL        ;
 $7A20 POP BC        ;
 $7A21 POP AF        ;
 $7A22 PUSH BC       ;
 $7A23 PUSH HL       ;
 $7A24 INC HL        ;
 $7A25 LD E,(HL)     ;
 $7A26 INC HL        ;
 $7A27 LD D,(HL)     ;
 $7A28 LD C,A        ;
 $7A29 LD A,($66F1)  ;
 $7A2C AND $02       ;
 $7A2E LD A,C        ;
 $7A2F JR NZ,$7A99   ;
 $7A31 CP $01        ;
 $7A33 JR NZ,$7A41   ;
 $7A35 PUSH DE       ;
 $7A36 PUSH AF       ;
 $7A37 EX DE,HL      ;
 $7A38 CALL $6704    ;
 $7A3B EX DE,HL      ;
 $7A3C CALL $7564    ;
 $7A3F POP AF        ;
 $7A40 POP DE        ;
*$7A41 CP $04        ;
 $7A43 JR NZ,$7A61   ;
 $7A45 PUSH DE       ;
 $7A46 PUSH AF       ;
 $7A47 LD HL,$652D   ;
 $7A4A LD (HL),$38   ;
 $7A4C LD A,D        ;
 $7A4D CP $5A        ;
 $7A4F JR Z,$7A56    ;
 $7A51 LD (HL),$32   ;
 $7A53 INC HL        ;
 $7A54 LD (HL),$35   ;
*$7A56 CALL $67B6    ;
 $7A59 CALL $67A9    ;
 $7A5C CALL $681C    ;
 $7A5F POP AF        ;
 $7A60 POP DE        ;
*$7A61 CP $07        ;
 $7A63 LD BC,$0344   ;
 $7A66 JR C,$7A73    ;
 $7A68 LD HL,$6535   ;
 $7A6B CP $09        ;
 $7A6D JR C,$7A82    ;
 $7A6F LD C,$03      ;
 $7A71 JR $7A82      ;
*$7A73 INC C         ;
 $7A74 CP $04        ;
 $7A76 JR C,$7A7D    ;
 $7A78 LD HL,$6532   ;
 $7A7B JR $7A82      ;
*$7A7D LD C,$47      ;
 $7A7F LD HL,$652F   ;
*$7A82 PUSH DE       ;
 $7A83 EX DE,HL      ;
 $7A84 CALL $6704    ;
 $7A87 PUSH HL       ;
 $7A88 PUSH BC       ;
 $7A89 LD BC,$50C0   ;
 $7A8C AND A         ;
 $7A8D SBC HL,BC     ;
 $7A8F POP BC        ;
 $7A90 POP HL        ;
 $7A91 EX DE,HL      ;
 $7A92 CALL C,$677B  ;
 $7A95 POP DE        ;
 $7A96 JP $7B30      ;
*$7A99 CP $01        ;
 $7A9B JR NZ,$7AAE   ;
 $7A9D PUSH DE       ;
 $7A9E PUSH AF       ;
 $7A9F EX DE,HL      ;
 $7AA0 CALL $6704    ;
 $7AA3 EX DE,HL      ;
 $7AA4 CALL $7564    ;
 $7AA7 POP AF        ;
 $7AA8 POP DE        ;
 $7AA9 INC DE        ;
 $7AAA LD (DE),A     ;
 $7AAB DEC DE        ;
 $7AAC JR $7AEB      ;
*$7AAE CP $02        ;
 $7AB0 JR NZ,$7AEB   ;
 $7AB2 PUSH AF       ;
 $7AB3 PUSH DE       ;
 $7AB4 LD HL,$652C   ;
 $7AB7 PUSH HL       ;
 $7AB8 LD (HL),$31   ;
 $7ABA LD A,($6691)  ;
 $7ABD OR A          ;
 $7ABE JR Z,$7ACC    ;
 $7AC0 LD A,D        ;
 $7AC1 CP $59        ;
 $7AC3 JR C,$7AC9    ;
 $7AC5 LD (HL),$32   ;
 $7AC7 JR Z,$7ACC    ;
*$7AC9 INC HL        ;
 $7ACA LD (HL),$35   ;
*$7ACC EX DE,HL      ;
 $7ACD CALL $6704    ;
 $7AD0 PUSH HL       ;
 $7AD1 LD BC,$50C0   ;
 $7AD4 AND A         ;
 $7AD5 SBC HL,BC     ;
 $7AD7 POP HL        ;
 $7AD8 EX DE,HL      ;
 $7AD9 POP HL        ;
 $7ADA LD BC,$0345   ;
 $7ADD CALL C,$676F  ;
 $7AE0 CALL $67B6    ;
 $7AE3 CALL $67A9    ;
 $7AE6 CALL $681C    ;
 $7AE9 POP DE        ;
 $7AEA POP AF        ;
*$7AEB PUSH DE       ;
 $7AEC LD C,A        ;
 $7AED LD A,E        ;
 $7AEE INC A         ;
 $7AEF AND $1F       ;
 $7AF1 SUB C         ;
 $7AF2 JR C,$7B0C    ;
 $7AF4 PUSH BC       ;
 $7AF5 PUSH AF       ;
 $7AF6 LD A,E        ;
 $7AF7 SUB C         ;
 $7AF8 LD E,A        ;
 $7AF9 INC E         ;
 $7AFA CALL $6845    ;
 $7AFD DEC E         ;
 $7AFE POP AF        ;
 $7AFF JR Z,$7B0B    ;
 $7B01 POP BC        ;
 $7B02 PUSH BC       ;
 $7B03 LD A,C        ;
 $7B04 CP $10        ;
 $7B06 JR Z,$7B0B    ;
 $7B08 CALL $684E    ;
*$7B0B POP BC        ;
*$7B0C POP DE        ;
 $7B0D PUSH DE       ;
 $7B0E INC E         ;
 $7B0F LD A,E        ;
 $7B10 AND $1F       ;
 $7B12 ADD A,C       ;
 $7B13 CP $20        ;
 $7B15 JR NC,$7B2F   ;
 $7B17 PUSH BC       ;
 $7B18 CP $1F        ;
 $7B1A PUSH AF       ;
 $7B1B LD A,E        ;
 $7B1C ADD A,C       ;
 $7B1D LD E,A        ;
 $7B1E DEC DE        ;
 $7B1F CALL $6845    ;
 $7B22 INC DE        ;
 $7B23 POP AF        ;
 $7B24 POP BC        ;
 $7B25 JR Z,$7B2F    ;
 $7B27 LD A,C        ;
 $7B28 CP $10        ;
 $7B2A JR Z,$7B2F    ;
 $7B2C CALL $6853    ;
*$7B2F POP DE        ;
*$7B30 POP HL        ;
 $7B31 INC (HL)      ;
 $7B32 LD A,($66F1)  ;
 $7B35 AND $02       ;
 $7B37 LD A,$0B      ;
 $7B39 JR Z,$7B3D    ;
 $7B3B LD A,$11      ;
*$7B3D CP (HL)       ;
 $7B3E JR NZ,$7B5E   ;
 $7B40 LD (HL),$00   ;
 $7B42 PUSH HL       ;
 $7B43 EX DE,HL      ;
 $7B44 CALL $6704    ;
 $7B47 PUSH HL       ;
 $7B48 LD BC,$50C0   ;
 $7B4B AND A         ;
 $7B4C SBC HL,BC     ;
 $7B4E POP HL        ;
 $7B4F EX DE,HL      ;
 $7B50 LD HL,$3F1B   ;
 $7B53 LD BC,$0300   ;
 $7B56 CALL C,$6775  ;
 $7B59 LD HL,$667F   ;
 $7B5C DEC (HL)      ;
 $7B5D POP HL        ;
*$7B5E POP BC        ;
*$7B5F INC HL        ;
 $7B60 INC HL        ;
 $7B61 INC HL        ;
 $7B62 DEC B         ;
 $7B63 JP NZ,$79BD   ;
 $7B66 RET           ;

; Handler: Aliens
;
; Used by the routines at #R$7C82 and #R$7DD9.
;
; .
;
; See #POKE#aliens-not-fire(Aliens Don't Fire).
@label=Handler_Aliens
c$7B67 LD A,($6691)  ; {Return if *#R$6691 is zero.
 $7B6A OR A          ;
 $7B6B RET Z         ; }
 $7B6C LD A,($6695)  ; {Return if *#R$6695 is not zero.
 $7B6F OR A          ;
 $7B70 RET NZ        ; }
 $7B71 LD HL,$66A7   ; #REGhl=#R$66A7.
 $7B74 LD B,$06      ; #REGb=#N$06.
*$7B76 PUSH BC       ; {Stash #REGbc and #REGhl on the stack.
 $7B77 PUSH HL       ; }
 $7B78 LD E,(HL)     ; #REGe=*#REGhl.
 $7B79 INC HL        ; Increment #REGhl by one.
 $7B7A LD D,(HL)     ; #REGd=*#REGhl.
 $7B7B LD A,D        ; {Jump to #R$7C18 if #REGd is not zero.
 $7B7C OR A          ;
 $7B7D JP NZ,$7C18   ; }
 $7B80 LD A,($66A4)  ; {Jump to #R$7C76 if *#R$66A4 is not zero.
 $7B83 OR A          ;
 $7B84 JP NZ,$7C76   ; }
 $7B87 PUSH HL       ; Stash #REGhl on the stack.
 $7B88 LD HL,$66B9   ; #REGhl=#R$66B9.
 $7B8B LD A,($66BA)  ; {Jump to #R$7BA3 if *#R$66BA is not zero.
 $7B8E OR A          ;
 $7B8F JR NZ,$7BA3   ; }
 $7B91 LD A,($66F1)  ; #REGa=*#R$66F1.
 $7B94 AND %00000110 ; Keep only bits 1-2.
 $7B96 LD A,$1C      ; #REGa=#N$1C.
 $7B98 JR Z,$7B9C    ; Jump to #R$7B9C if #REGhl is equal to #REGa.
 $7B9A LD A,$0E      ; #REGa=#N$0E.
*$7B9C CP (HL)       ; {Jump to #R$7BA1 if *#REGhl is not zero.
 $7B9D JR NZ,$7BA1   ; }
 $7B9F LD (HL),$FE   ; Write #N$FE to *#REGhl.
*$7BA1 INC (HL)      ; {Increment *#REGhl by two.
 $7BA2 INC (HL)      ; }
*$7BA3 LD L,(HL)     ; #REGl=*#REGhl.
 $7BA4 LD H,$00      ; #REGh=#N$00.
 $7BA6 LD DE,$65DD   ; {#REGhl+=#R$65DD.
 $7BA9 ADD HL,DE     ; }
 $7BAA LD E,(HL)     ; #REGe=*#REGhl.
 $7BAB INC HL        ; Increment #REGhl by one.
 $7BAC LD D,(HL)     ; #REGd=*#REGhl.
 $7BAD LD A,D        ; {Jump to #R$7BB7 if #REGd is not zero.
 $7BAE OR A          ;
 $7BAF JR NZ,$7BB7   ; }
 $7BB1 LD HL,$66BA   ; #REGhl=#R$66BA.
 $7BB4 LD (HL),A     ; Write #REGa to *#REGhl.
 $7BB5 JR $7C15      ; Jump to #R$7C15.
*$7BB7 CALL $66F7    ; Call #R$66F7.
 $7BBA LD A,D        ; {Jump to #R$7C15 if #REGd is equal to #N$58.
 $7BBB CP $58        ;
 $7BBD JR Z,$7C15    ; }
 $7BBF LD A,E        ; #REGa=#REGe.
 $7BC0 AND %00011111 ; Keep only bits 0-4.
 $7BC2 LD B,A        ; #REGb=#REGa.
 $7BC3 LD A,($66ED)  ; #REGa=*#R$66ED.
 $7BC6 AND %00011111 ; Keep only bits 0-4.
 $7BC8 CP B          ; {Jump to #R$7BD2 if #REGa is less than #REGb.
 $7BC9 JR C,$7BD2    ; }
 $7BCB SUB B         ; #REGa-=#REGb.
*$7BCC CP $08        ; {Jump to #R$7C15 if #REGa is greater than or equal to
 $7BCE JR NC,$7C15   ; #N$08.}
 $7BD0 JR $7BD7      ; Jump to #R$7BD7.
*$7BD2 LD C,A        ; #REGc=#REGa.
 $7BD3 LD A,B        ; {#REGa=#REGb-#REGc.
 $7BD4 SUB C         ; }
 $7BD5 JR $7BCC      ; Jump to #R$7BCC.
*$7BD7 LD HL,$0041   ; {#REGhl=#N($0041,$04,$04)+#REGde.
 $7BDA ADD HL,DE     ; }
 $7BDB PUSH HL       ; Stash #REGhl on the stack.
 $7BDC LD DE,$5AE0   ; #REGde=#N$5AE0 (attribute buffer location).
 $7BDF LD A,($6693)  ; {Jump to #R$7BE7 if *#R$6693 is zero.
 $7BE2 AND A         ;
 $7BE3 JR Z,$7BE7    ; }
 $7BE5 LD E,$C0      ; #REGe=#N$C0.
*$7BE7 SBC HL,DE     ; #REGhl-=#REGde (with carry).
 $7BE9 POP HL        ; Restore #REGhl from the stack.
 $7BEA JR NC,$7C15   ; Jump to #R$7C15 if #REGa is greater than or equal to
                     ; #REGa.
 $7BEC PUSH HL       ; Stash #REGhl on the stack.
 $7BED LD HL,$66BA   ; #REGhl=#R$66BA.
 $7BF0 INC (HL)      ; Increment *#REGhl by one.
 $7BF1 LD A,(HL)     ; {Jump to #R$7BF8 if *#REGhl is not equal to #N$04.
 $7BF2 CP $04        ;
 $7BF4 JR NZ,$7BF8   ; }
 $7BF6 LD (HL),$00   ; Write #N$00 to *#REGhl.
*$7BF8 INC HL        ; Increment #REGhl by one.
 $7BF9 LD A,($66F1)  ; #REGa=*#R$66F1.
 $7BFC AND %00000010 ; Keep only bit 1.
 $7BFE LD A,$03      ; #REGa=#N$03.
 $7C00 JR Z,$7C0A    ; Jump to #R$7C0A if #REGhl is equal to #N$03.
 $7C02 INC (HL)      ; Increment *#REGhl by one.
 $7C03 LD A,(HL)     ; {Jump to #R$7C0A if *#REGhl is not equal to #N$03.
 $7C04 CP $03        ;
 $7C06 JR NZ,$7C0A   ; }
 $7C08 XOR A         ; {Write #N$00 to *#REGhl.
 $7C09 LD (HL),A     ; }
*$7C0A ADD A,A       ; {Multiply #REGa by #N$08.
 $7C0B ADD A,A       ;
 $7C0C ADD A,A       ; }
 $7C0D POP HL        ; {Restore #REGhl and #REGde from the stack.
 $7C0E POP DE        ; }
 $7C0F INC DE        ; Increment #REGde by one.
 $7C10 LD (DE),A     ; Write #REGa to *#REGde.
 $7C11 LD IXl,A      ;
 $7C13 JR $7C41      ; Jump to #R$7C41.
*$7C15 POP AF        ; Restore #REGaf from the stack.
 $7C16 JR $7C50      ; Jump to #R$7C50.
*$7C18 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $7C19 LD A,(HL)     ; {Jump to #R$7C50 if *#REGhl is equal to #N$46.
 $7C1A CP $46        ;
 $7C1C JR Z,$7C50    ; }
 $7C1E CP $07        ; {Jump to #R$7C50 if *#REGhl is equal to #N$07.
 $7C20 JR Z,$7C50    ; }
 $7C22 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $7C24 INC DE        ; Increment #REGde by one.
 $7C25 LD A,(DE)     ; #REGa=*#REGde.
 $7C26 LD IXl,A      ;
 $7C28 PUSH HL       ; Stash #REGhl on the stack.
 $7C29 CALL $6704    ; Call #R$6704.
 $7C2C LD B,$08      ; #REGb=#N$08.
 $7C2E XOR A         ; #REGa=#N$00.
*$7C2F LD (HL),A     ; Write #REGa to *#REGhl.
 $7C30 INC H         ; Increment #REGh by one.
 $7C31 DJNZ $7C2F    ; Decrease counter by one and loop back to #R$7C2F until
                     ; counter is zero.
 $7C33 POP HL        ; Restore #REGhl from the stack.
 $7C34 LD C,$20      ; #REGc=#N$20.
 $7C36 ADD HL,BC     ; #REGhl+=#REGbc.
 $7C37 PUSH HL       ; Stash #REGhl on the stack.
 $7C38 LD BC,$5B00   ; #REGbc=#N$5B00 (attribute buffer location).
 $7C3B AND A         ; {#REGhl-=#REGbc.
 $7C3C SBC HL,BC     ; }
 $7C3E POP HL        ; Restore #REGhl from the stack.
 $7C3F JR NC,$7C50   ; Jump to #R$7C50 if #REGh is greater than or equal to
                     ; #REGa.
*$7C41 LD A,(HL)     ; {Jump to #R$7C54 if *#REGhl is zero.
 $7C42 OR A          ;
 $7C43 JR Z,$7C54    ; }
 $7C45 LD A,($6693)  ; {Jump to #R$7C50 if *#R$6693 is not zero.
 $7C48 OR A          ;
 $7C49 JR NZ,$7C50   ; }
 $7C4B LD A,(HL)     ; {Jump to #R$7C54 if *#REGhl is equal to #N$46.
 $7C4C CP $46        ;
 $7C4E JR Z,$7C54    ; }
*$7C50 LD D,$00      ; #REGd=#N$00.
 $7C52 JR $7C76      ; Jump to #R$7C76.
*$7C54 LD A,($66F1)  ; #REGa=*#R$66F1.
 $7C57 AND %00000010 ; Keep only bit 1.
 $7C59 LD A,$45      ; #REGa=#N$45.
 $7C5B JR Z,$7C5F    ; Jump to #R$7C5F if #REGa is equal to #N$45.
 $7C5D LD A,$06      ; {Write #N$06 to *#REGhl.
*$7C5F LD (HL),A     ; }
 $7C60 PUSH HL       ; Stash #REGhl on the stack.
 $7C61 CALL $6704    ; Call #R$6704.
 $7C64 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $7C65 LD HL,$602E   ; #REGhl=#R$602E.
 $7C68 LD C,IXl      ;
 $7C6A LD B,$00      ; #REGb=#N$00.
 $7C6C ADD HL,BC     ; #REGhl+=#REGbc.
 $7C6D LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
*$7C6F LD A,(HL)     ; {Copy the UDG data to the screen buffer.
 $7C70 LD (DE),A     ; }
 $7C71 INC D         ; Move down one pixel line in the screen buffer.
 $7C72 INC HL        ; Move to the next UDG graphic data byte.
 $7C73 DJNZ $7C6F    ; Decrease the line counter by one and loop back to #R$7C6F until all
                     ; #N$08 lines of the UDG character have been drawn.
 $7C75 POP DE        ; {Restore #REGde and #REGhl from the stack.
*$7C76 POP HL        ; }
 $7C77 LD (HL),E     ; Write #REGe to *#REGhl.
 $7C78 INC HL        ; Increment #REGhl by one.
 $7C79 LD (HL),D     ; Write #REGd to *#REGhl.
 $7C7A INC HL        ; {Increment #REGhl by two.
 $7C7B INC HL        ; }
 $7C7C POP BC        ; Restore #REGbc from the stack.
 $7C7D DEC B         ; Decrease #REGb by one.
 $7C7E JP NZ,$7B76   ; Jump to #R$7B76 if #REGb is not equal to #N$08.
 $7C81 RET           ; Return.

; Title Screen
;
; Used by the routines at #R$7599 and #R$7DD9.
; .
; #PUSHS #UDGTABLE {
;   #SIM(start=$7C82,stop=$7D3D)
;   #FOR$01,$08||x|#SIM(start=$7D3F,stop=$7D68,bc=x)
;     #SCR$02(*title-screen-x)#PLOT(0,0,0)(title-screen-x)
;   ||
;   #UDGARRAY#(#ANIMATE$0A,$08(title-screen))
; } UDGTABLE# #POPS
@label=TitleScreen
c$7C82 DI            ; Disable interrupts.
 $7C83 XOR A         ; {Set border to #INK$00.
 $7C84 OUT ($FE),A   ; }
 $7C86 LD ($5C48),A  ; #HTML(Write #INK$00 to *<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/5C48.html">BORDCR</a>.)
 $7C89 CALL $6720    ; Call #R$6720.
; More copy protection/ copyright checks.
; .
; Checks "#STR($6435,$04,$16)" starts with an "#CHR$4D".
 $7C8C LD A,($6435)  ; {Jump to #R$7C98 if *#R$6435 is not equal to #N$4D (ASCII
 $7C8F CP $4D        ; "#CHR$4D").
 $7C91 JR NZ,$7C98   ; }
; Checks "#STR($6456,$04,$08)" starts with an "#CHR$4D".
 $7C93 LD A,($6456)  ; {Compare *#R$6456 with #N$4D (ASCII "#CHR$4D").
 $7C96 CP $4D        ; }
@label=RestartSpectum
*$7C98 JP NZ,$0000   ; Restart the Spectrum if either string doesn't start with an
                     ; "#CHR$4D".
; Draw a MegaDodo!
; .
; #PUSHS #UDGTABLE {
;   #SIM(start=$7C82,stop=$7CC5)#SCR$02{$F0,$20,$20,$20}(megadodo-logo)
; } TABLE# #POPS
 $7C9B LD HL,$404F   ; Set the screen buffer location #N$404F.
 $7C9E LD DE,$61BB   ; Point #REGde to the MegaDodo graphic: #R$61BB.
 $7CA1 LD B,$02      ; Set a counter in #REGb for #N$02 rows.
@label=DrawMegaDodo_RowLoop
*$7CA3 PUSH BC       ; Stash the row counter on the stack.
 $7CA4 LD C,$02      ; And a counter in #REGc for #N$02 columns.
@label=DrawMegaDodo_ColumnLoop
*$7CA6 PUSH HL       ; Stash the screen position on the stack.
 $7CA7 LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=DrawMegaDodo_LineLoop
*$7CA9 LD A,(DE)     ; {Copy the UDG data to the screen buffer.
 $7CAA LD (HL),A     ; }
 $7CAB INC DE        ; Move to the next UDG graphic data byte.
 $7CAC INC H         ; Move down one pixel line in the screen buffer.
 $7CAD DJNZ $7CA9    ; Decrease the line counter by one and loop back to #R$7CA9 until all
                     ; #N$08 lines of the UDG character have been drawn.
 $7CAF POP HL        ; Restore the starting screen position from the stack.
 $7CB0 INC HL        ; Move right one character block.
 $7CB1 DEC C         ; Decrease the column counter by one.
 $7CB2 JR NZ,$7CA6   ; Jump to back #R$7CA6 until the row has been populated.
 $7CB4 LD L,$6F      ; Update the screen position.
 $7CB6 POP BC        ; Restore the row counter from the stack.
 $7CB7 DJNZ $7CA3    ; Decrease the row counter by one and loop back to #R$7CA3 until both
                     ; rows have been drawn to the screen buffer.
; Colour the MegaDodo graphic.
 $7CB9 LD H,$58      ; Update #REGhl to the MegaDodo position in the attribute
                     ; buffer.
 $7CBB LD A,$04      ; {Write #COLOUR$04 to the top two blocks.
 $7CBD LD (HL),A     ;
 $7CBE INC HL        ;
 $7CBF LD (HL),A     ; }
 $7CC0 LD L,$4F      ; Update the attribute buffer positioning.
 $7CC2 LD (HL),A     ; {Write the attribute to the bottom two blocks.
 $7CC3 INC HL        ;
 $7CC4 LD (HL),A     ; }
; Prints #FONT#(:(#STR($6435,$03,$09)))$6253,attr=$05(megadodo)
 $7CC5 LD HL,$6435   ; #REGhl=#R$6435.
 $7CC8 LD DE,$40A7   ; #REGde=#N$40A7 (screen buffer location).
 $7CCB LD BC,$0905   ; Set to print #N$09 characters in #INK$05.
 $7CCE CALL $676F    ; Call #R$676F.
; Prints #FONT#(:(#STR($643E,$03,$08)))$6253,attr=$05(software)
 $7CD1 LD B,$08      ; Printing #N$08 characters.
 $7CD3 LD E,$B1      ; Update the screen buffer address.
 $7CD5 CALL $676F    ; Call #R$676F.
; Prints #FONT#(:(#STR($642B,$03,$08)))$3D00,attr=$43(presents)
 $7CD8 LD HL,$642B   ; #REGhl=#R$642B.
 $7CDB LD DE,$40EC   ; #REGde=#N$40EC (screen buffer location).
 $7CDE LD BC,$0843   ; Set to print #N$08 characters in #COLOUR$43.
 $7CE1 CALL $6775    ; Call #R$6775.
; Prints #FONT#(:(@#STR($6434,$03,$17)))$3D00,attr=$42(megadodo-software)
 $7CE4 LD DE,$5023   ; #REGde=#N$5023 (screen buffer location).
 $7CE7 LD BC,$1842   ; Set to print #N$18 characters in #COLOUR$42.
 $7CEA CALL $6775    ; Call #R$6775.
; Prints #FONT#(:(#STR($644B,$03,$13)))$3D00,attr=$04(written-by)
 $7CED LD E,$66      ; Update the screen buffer address.
 $7CEF LD BC,$1304   ; Set to print #N$13 characters in #INK$04.
 $7CF2 CALL $6775    ; Call #R$6775.
; Prints #FONT#(:(#STR($645E,$03,$10)))$3D00,attr=$07(s-to-start)
 $7CF5 LD E,$E7      ; Update the screen buffer address.
 $7CF7 LD BC,$1007   ; Set to print #N$10 characters in #INK$07.
 $7CFA CALL $6775    ; Call #R$6775.
; Colour the area where "PHEENIX" will be displayed.
 $7CFD LD HL,$5900   ; {Write #INK$06 to #N$0100 bytes from #N$5900 to #N$5A00 in the
 $7D00 LD DE,$5901   ; attribute buffer.
 $7D03 LD BC,$00FF   ;
 $7D06 LD (HL),$06   ;
 $7D08 LDIR          ; }
; #PUSHS #UDGTABLE {
;   #SIM(start=$7C82,stop=$7C8C)#SIM(start=$7CFD,stop=$7D3D)#SCR$02{$00,$80,$1F0,$80}(pheenix)
; } TABLE# #POPS
; .
; Write "PHEENIX" using the box graphic.
 $7D0A LD B,$51      ; Set a counter in #REGb for #N$51 boxes.
@label=DrawBox_Loop
*$7D0C PUSH BC       ; Stash the box counter on the stack.
 $7D0D LD DE,$658A   ; #REGde=#R$658A.
; Calculate the current position byte.
; .
; This is the position table + the total bytes - the counter (which
; counts down from #N$51). Which just means, the table data is evaluated in
; order, from start-to-finish.
 $7D10 LD A,$51      ; {#REGhl=#R$658A+(#N$51-#REGb).
 $7D12 SUB B         ;
 $7D13 LD L,A        ;
 $7D14 LD H,$00      ;
 $7D16 ADD HL,DE     ; }
; Set the screen position to draw the box.
 $7D17 LD L,(HL)     ; #REGl=*#REGhl.
 $7D18 LD H,$48      ; #REGh=#N$48.
; Now draw the box.
 $7D1A LD DE,$61E3   ; Point #REGde to the box graphic: #R$61E3.
 $7D1D LD B,$08      ; Set a line counter in #REGb (#N$08 lines in a UDG).
@label=DrawBox_LineLoop
*$7D1F LD A,(DE)     ; {Copy the UDG data to the screen buffer.
 $7D20 LD (HL),A     ; }
 $7D21 INC DE        ; Move to the next UDG graphic data byte..
 $7D22 INC H         ; Move down one pixel line in the screen buffer.
 $7D23 DJNZ $7D1F    ; Decrease the line counter by one and loop back to #R$7D1F until all
                     ; #N$08 lines of the UDG character have been drawn.
; Check a few times for the player pressing "S" to start the game.
; .
; This has the effect of slowing the drawing down, so "PHEENIX" doesn't
; just appear instantly - rather it's drawn, one box at a time.
 $7D25 LD BC,$000A   ; Set a counter in #REGbc for #N($000A,$04,$04) loops.
@label=Input_StartGame_Loop
*$7D28 CALL $7E47    ; Call #R$7E47.
 $7D2B DJNZ $7D28    ; Decrease the loop counter by one and loop back to #R$7D28 until the
                     ; counter is zero.
 $7D2D DEC C         ; Decrease #REGc by one.
 $7D2E JR NZ,$7D28   ; Jump back to #R$7D28 until #REGc is zero.
 $7D30 POP BC        ; Restore the box counter from the stack.
 $7D31 LD HL,$66F2   ; {Evaluate #R$66F2...
 $7D34 LD A,(HL)     ;
 $7D35 OR A          ; }
 $7D36 LD (HL),$00   ; Write #N$00 to *#R$66F2.
 $7D38 JP NZ,$7DD9   ; Jump to #R$7DD9 if the player has pressed "S" to start.
 $7D3B DJNZ $7D0C    ; Decrease the box counter by one and loop back to #R$7D0C until all
                     ; all the game name has been drawn out in boxes.
; Flash the "PHEENIX" logo.
 $7D3D LD B,$38      ; Set a counter in #REGb for #N$38 colour loops.
@label=PheenixLogoFlash_Loop
*$7D3F PUSH BC       ; Stash the colour loop counter on the stack.
 $7D40 LD HL,$5900   ; {Fetch the attribute for the first byte in the attribute buffer
 $7D43 LD A,(HL)     ; where the "PHEENIX" logo is displayed. Store this in #REGa.
                     ; }
 $7D44 INC A         ; Increment the attribute byte by one.
 $7D45 AND %00000111 ; Keep only the INK bits (0-2).
 $7D47 JR NZ,$7D4A   ; Jump to #R$7D4A if the result is not zero (checking for
                     ; #INK$00).
; Don't use INK: #INK$00...
 $7D49 INC A         ; Increment #REGa containing the attribute byte by one -
                     ; to #INK$01.
@label=PheenixLogoFlash_WriteAttributeByte
*$7D4A LD (HL),A     ; Write the attribute byte back to the attribute buffer.
 $7D4B LD DE,$5901   ; {Copy the attribute byte to the rest of the attribute buffer section
 $7D4E LD BC,$00FF   ; containing the "PHEENIX" logo. This is #N($00FF,$04,$04) bytes, from #N$5901
 $7D51 LDIR          ; to #N$5A00.}
; Check a few times for the player pressing "S" to start the game.
 $7D53 LD BC,$0010   ; Set a counter in #REGbc for #N($0010,$04,$04) loops.
@label=Input_StartGameColourFlash_Loop
*$7D56 CALL $7E47    ; Call #R$7E47.
 $7D59 DJNZ $7D56    ; Decrease the loop counter by one and loop back to #R$7D56 until the
                     ; counter is zero.
 $7D5B DEC C         ; Decrease #REGc by one.
 $7D5C JR NZ,$7D56   ; Jump to #R$7D56 until #REGc is zero.
 $7D5E POP BC        ; Restore the colour loop counter from the stack.
 $7D5F LD HL,$66F2   ; {Evaluate #R$66F2...
 $7D62 LD A,(HL)     ;
 $7D63 OR A          ; }
 $7D64 LD (HL),$00   ; Write #N$00 to *#R$66F2.
 $7D66 JR NZ,$7DD9   ; Jump to #R$7DD9 if the player has pressed "S" to start.
 $7D68 DJNZ $7D3F    ; Decrease counter by one and loop back to #R$7D3F until
                     ; counter is zero.
; Start "Demo Mode".
 $7D6A XOR A         ; {Write #N$00 to *#R$66F5.
 $7D6B LD ($66F5),A  ; }
 $7D6E INC A         ; {Write #N$01 to; #LIST { *#R$66F3 } { *#R$66EF } LIST#
 $7D6F LD ($66F3),A  ;
 $7D72 LD ($66EF),A  ; }
 $7D75 LD A,$04      ; {Write #N$04 to *#R$66F1.
 $7D77 LD ($66F1),A  ; }
 $7D7A INC A         ; {Write #N$05 to *#R$66F0.
 $7D7B LD ($66F0),A  ; }
; Set the level text in the header.
 $7D7E LD A,$32      ; {Write #N$32 (ASCII "#CHR$32") to *#R$6527.
 $7D80 LD ($6527),A  ; }
 $7D83 LD A,$06      ; {Write #N$06 to *#R$6897(#N$6898).
 $7D85 LD ($6898),A  ; }
 $7D88 CALL $68B8    ; Call #R$68B8.
 $7D8B CALL $740C    ; Call #R$740C.
@label=Demo_Loop
*$7D8E PUSH BC       ; Stash #REGbc on the stack.
 $7D8F LD A,B        ; #REGa=#REGb.
 $7D90 AND %00001111 ; Keep only bits 0-3.
 $7D92 PUSH AF       ; Stash #REGaf on the stack.
 $7D93 LD A,B        ; #REGa=#REGb.
 $7D94 RRCA          ; RRCA.
 $7D95 RRCA          ; RRCA.
 $7D96 AND %00000111 ; Keep only bits 0-2.
 $7D98 JR NZ,$7D9B   ; Jump to #R$7D9B if #REGa is not equal to #REGa.
 $7D9A INC A         ; Increment #REGa by one.
*$7D9B LD C,A        ; #REGc=#REGa.
 $7D9C LD B,$10      ; Set #REGb to print #N$10 characters.
; Prints #FONT#(:(#STR($645E,$03,$10)))$3D00,attr=$07(s-to-start)
 $7D9E LD HL,$645E   ; #REGhl=#R$645E.
 $7DA1 LD DE,$4027   ; #REGde=#N$4027 (screen buffer location).
 $7DA4 CALL $6775    ; Call #R$6775.
 $7DA7 POP AF        ; Restore #REGaf from the stack.
 $7DA8 JR NZ,$7DB0   ; Jump to #R$7DB0 if #REGa is not equal to #REGa.
 $7DAA CALL $670E    ; {Write a random number to *#R$66F4.
 $7DAD LD ($66F4),A  ; }
*$7DB0 CALL $6CEE    ; Call #R$6CEE.
 $7DB3 CALL $7616    ; Call #R$7616.
 $7DB6 CALL $7B67    ; Call #R$7B67.
 $7DB9 CALL $79B2    ; Call #R$79B2.
 $7DBC CALL $7254    ; Call #R$7254.
 $7DBF CALL $6890    ; Call #R$6890.
 $7DC2 CALL $7E47    ; Call #R$7E47.
 $7DC5 POP BC        ; Restore #REGbc from the stack.
 $7DC6 LD HL,$66F2   ; {Evaluate #R$66F2...
 $7DC9 LD A,(HL)     ;
 $7DCA OR A          ; }
 $7DCB LD (HL),$00   ; Write #N$00 to *#R$66F2.
 $7DCD JR NZ,$7DD9   ; Jump to #R$7DD9 if the player has pressed "S" to start.
 $7DCF LD A,($66F5)  ; {Jump to #R$7C82 if *#R$66F5 is not zero.
 $7DD2 OR A          ;
 $7DD3 JP NZ,$7C82   ; }
 $7DD6 INC B         ; Increment #REGb by one.
 $7DD7 JR $7D8E      ; Jump to #R$7D8E.

; Start Game
;
; Used by the routine at #R$7C82.
;
; .
;
; First collect the control method.
@label=StartGame
c$7DD9 CALL $6B4F    ; Call #R$6B4F.
; This is a game the player started, so disable the demo mode and unset
; the game-over flag.
 $7DDC XOR A         ; {Write #N$00 to; #LIST { *#R$66F5 } { *#R$66F3 } LIST#
 $7DDD LD ($66F5),A  ;
 $7DE0 LD ($66F3),A  ; }
 $7DE3 INC A         ; {Write #N$01 to *#R$66EF.
 $7DE4 LD ($66EF),A  ; }
 $7DE7 LD A,$04      ; {Write #N$04 to *#R$66F1.
 $7DE9 LD ($66F1),A  ; }
; Set the players starting life count.
 $7DEC INC A         ; {Write #N$05 to *#R$66F0.
 $7DED LD ($66F0),A  ; }
 $7DF0 CALL $740C    ; Call #R$740C.
*$7DF3 CALL $6CEE    ; Call #R$6CEE.
 $7DF6 CALL $7616    ; Call #R$7616.
 $7DF9 CALL $7B67    ; Call #R$7B67.
 $7DFC CALL $79B2    ; Call #R$79B2.
 $7DFF CALL $7254    ; Call #R$7254.
 $7E02 CALL $6890    ; Call #R$6890.
 $7E05 LD A,($66F5)  ; {Jump to #R$7DF3 if *#R$66F5 is zero.
 $7E08 OR A          ;
 $7E09 JR Z,$7DF3    ; }
 $7E0B LD D,$08      ; #REGd=#N$08.
*$7E0D LD BC,$0000   ; #REGbc=#N($0000,$04,$04).
*$7E10 DJNZ $7E10    ; Decrease counter by one and loop back to #R$7E10 until
                     ; counter is zero.
 $7E12 DEC C         ; Decrease #REGc by one.
 $7E13 JR NZ,$7E10   ; Jump to #R$7E10 until #REGc is zero.
 $7E15 DEC D         ; Decrease #REGd by one.
 $7E16 JR NZ,$7E0D   ; Jump to #R$7E0D if #REGd is not equal to #REGa.
 $7E18 LD HL,$6514   ; #REGhl=#R$6514.
 $7E1B LD DE,$651F   ; #REGde=#R$651F.
 $7E1E LD B,$06      ; #REGb=#N$06.
 $7E20 PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $7E21 PUSH DE       ; }
*$7E22 LD A,(DE)     ; {Jump to #R$7E2A if *#REGde is equal to *#REGhl.
 $7E23 CP (HL)       ;
 $7E24 JR Z,$7E2A    ; }
 $7E26 JR C,$7E31    ; Jump to #R$7E31 if *#REGde is less than *#REGhl.
 $7E28 JR $7E2E      ; Jump to #R$7E2E.
*$7E2A INC DE        ; Increment #REGde by one.
 $7E2B INC HL        ; Increment #REGhl by one.
 $7E2C DJNZ $7E22    ; Decrease counter by one and loop back to #R$7E22 until
                     ; counter is zero.
*$7E2E POP DE        ; Restore #REGde from the stack.
 $7E2F JR $7E39      ; Jump to #R$7E39.
*$7E31 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $7E32 POP HL        ; }
 $7E33 PUSH HL       ; Stash #REGhl on the stack.
 $7E34 LD BC,$0006   ; #REGbc=#N($0006,$04,$04).
 $7E37 LDIR          ; LDIR.
*$7E39 POP HL        ; Restore #REGhl from the stack.
 $7E3A LD DE,$6515   ; #REGde=#R$6514(#N$6515).
 $7E3D LD (HL),$30   ; Write ASCII #N$30 ("#CHR$30") to *#REGhl.
 $7E3F LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $7E42 LDIR          ; LDIR.
 $7E44 JP $7C82      ; Jump to #R$7C82.

; Input: "S" To Start
;
; Used by the routine at #R$7C82.
@label=Input_StartGame
c$7E47 DI            ; Disable interrupts.
 $7E48 LD A,$FD      ; {Read from the keyboard;
 $7E4A IN A,($FE)    ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FD | A | S | D | F | G }
                     ; TABLE#}
 $7E4C BIT 1,A       ; {Jump to #R$7E55 if "S" was pressed.
 $7E4E JR NZ,$7E55   ; }
; Switch the custom font to the game font.
 $7E50 LD HL,$6153   ; #REGhl=#R$6253(#N$6153).
 $7E53 JR $7E5B      ; Jump to #R$7E5B.
@label=Input_StartGame_Start
*$7E55 BIT 4,A       ; {Return if "G" is being pressed.
 $7E57 RET NZ        ; }
; Switch the custom font to the ZX Spectrum font.
 $7E58 LD HL,$3C00   ; #HTML(#REGhl=<a rel="noopener nofollow"
                     ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/3D00.html">#N$3C00</a>.)
@label=Input_StartGame_SetFont
*$7E5B LD ($6771),HL ; Write #REGhl to #R$676F(#N$6771) (#R$676F).
; Set the flag which will start the game.
 $7E5E LD A,$01      ; {Write #N$01 to #R$66F2.
 $7E60 LD ($66F2),A  ; }
 $7E63 RET           ; Return.

; Messaging: Programs Wanted
@label=Messaging_ProgramsWanted
t$7E64 DEFM "PROGRAMSWANTED!writeto16WhileRoadSuttonColdfieldW.Mids.fordetails"

; Unused
s$7EA5 DEFS $8073

; Unused
u$FF18 DEFB $F3,$0D,$CE,$0B,$EA,$50,$CE,$0B
 $FF20 DEFB $EB,$50,$16,$17,$DC,$0A,$CE,$0B
 $FF28 DEFB $EC,$50,$15,$17,$DB,$02,$4D,$00
 $FF30 DEFB $26,$42,$00,$00,$02,$3D,$DB,$02
 $FF38 DEFB $4D,$00,$57,$47,$A9,$00,$56,$47
 $FF40 DEFB $8C,$18,$5C,$0E,$00,$47,$C0,$57
 $FF48 DEFB $71,$0E,$F3,$0D,$21,$17,$C6,$1E
 $FF50 DEFB $B4,$5F,$76,$1B,$03,$13,$00,$3E
 $FF58 DEFB $00,$3C,$42,$42,$7E,$42,$42,$00
 $FF60 DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00
 $FF68 DEFB $00,$3C,$42,$40,$40,$42,$3C,$00
 $FF70 DEFB $00,$78,$44,$42,$42,$44,$78,$00
 $FF78 DEFB $00,$7E,$40,$7C,$40,$40,$7E,$00
 $FF80 DEFB $00,$7E,$40,$7C,$40,$40,$40,$00
 $FF88 DEFB $00,$3C,$42,$40,$4E,$42,$3C,$00
 $FF90 DEFB $00,$42,$42,$7E,$42,$42,$42,$00
 $FF98 DEFB $00,$3E,$08,$08,$08,$08,$3E,$00
 $FFA0 DEFB $00,$02,$02,$02,$42,$42,$3C,$00
 $FFA8 DEFB $00,$44,$48,$70,$48,$44,$42,$00
 $FFB0 DEFB $00,$40,$40,$40,$40,$40,$7E,$00
 $FFB8 DEFB $00,$42,$66,$5A,$42,$42,$42,$00
 $FFC0 DEFB $00,$42,$62,$52,$4A,$46,$42,$00
 $FFC8 DEFB $00,$3C,$42,$42,$42,$42,$3C,$00
 $FFD0 DEFB $00,$7C,$42,$42,$7C,$40,$40,$00
 $FFD8 DEFB $00,$3C,$42,$42,$52,$4A,$3C,$00
 $FFE0 DEFB $00,$7C,$42,$42,$7C,$44,$42,$00
 $FFE8 DEFB $00,$3C,$40,$3C,$02,$42,$3C,$00
 $FFF0 DEFB $00,$FE,$10,$10,$10,$10,$10,$00
 $FFF8 DEFB $00,$42,$42,$42,$42,$42,$3C,$00
